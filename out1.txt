Starting test: testProject .............
Project: ./tests/android.googlesource.com/AlarmClock
start doc
end doc
Lcom/android/alarmclock/AlarmAlertFullScreen;.onStop()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
mClockLayout.setVisibility(visible ? View.VISIBLE : View.GONE) <- setClockVisibility(!getClockVisibility()) <- .
startActivity(new Intent(this,SettingsActivity.class)) <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm;.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
CHAINS:
new TimePickerDialog(this,this,mHour,mMinutes,DateFormat.is24HourFormat(this)).show() <- .
------------------------------------
Lcom/android/alarmclock/DigitalClock;.onFinishInflate()V
CHAINS:
mAmPmLayout.setVisibility(show ? View.VISIBLE : View.GONE) <- mAmPm.setShowAmPm(mFormat == M12) <- setDateFormat() <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock;.onResume()V
CHAINS:
findViewById(R.id.pm) <- inflateClock() <- .
findViewById(R.id.am) <- inflateClock() <- .
findViewById(R.id.clock) <- inflateClock() <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlert$1586;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- handleScreenOff(km) <- .
startActivity(i) <- handleScreenOff(km) <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock$AlarmTimeAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
labelView.setVisibility(View.GONE) <- .
labelView.setVisibility(View.VISIBLE) <- .
daysOfWeekView.setVisibility(View.GONE) <- .
daysOfWeekView.setVisibility(View.VISIBLE) <- .
onButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    boolean isChecked=((CheckBox)v).isChecked();
    Alarms.enableAlarm(AlarmClock.this,alarm.id,isChecked);
    if (isChecked) {
      SetAlarm.popAlarmSetToast(AlarmClock.this,alarm.hour,alarm.minutes,alarm.daysOfWeek);
    }
  }
}
) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlert$1360;.handleMessage(Landroid/os/Message;)V
CHAINS:
finish() <- handleScreenOff((KeyguardManager)msg.obj) <- .
startActivity(i) <- handleScreenOff((KeyguardManager)msg.obj) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen$4753;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- snooze() <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/ClockPicker$2116;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- selectClock(mPosition) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen;.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
CHAINS:
finish() <- dismiss(false) <- .
finish() <- snooze() <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm;.onBackPressed()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock$7939;.run()V
CHAINS:
findViewById(R.id.pm) <- inflateClock() <- .
findViewById(R.id.am) <- inflateClock() <- .
findViewById(R.id.clock) <- inflateClock() <- .
findViewById(R.id.clock_layout) <- updateLayout() <- .
findViewById(R.id.alarms_list) <- updateLayout() <- .
mAlarmsList.setOnItemClickListener(this) <- updateLayout() <- .
mClockLayout.setVisibility(visible ? View.VISIBLE : View.GONE) <- setClockVisibility(mPrefs.getBoolean(PREF_SHOW_CLOCK,true)) <- .
mClockLayout.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    final Intent intent=new Intent(AlarmClock.this,ClockPicker.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  }
}
) <- updateLayout() <- .
setContentView(R.layout.alarm_clock) <- updateLayout() <- .
------------------------------------
Lcom/android/alarmclock/DigitalClock$FormatChangeObserver;.onChange(Z)V
CHAINS:
mAmPmLayout.setVisibility(show ? View.VISIBLE : View.GONE) <- mAmPm.setShowAmPm(mFormat == M12) <- setDateFormat() <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.clock_layout) <- updateLayout() <- .
findViewById(R.id.alarms_list) <- updateLayout() <- .
mAlarmsList.setOnItemClickListener(this) <- updateLayout() <- .
mClockLayout.setVisibility(visible ? View.VISIBLE : View.GONE) <- setClockVisibility(mPrefs.getBoolean(PREF_SHOW_CLOCK,true)) <- .
mClockLayout.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    final Intent intent=new Intent(AlarmClock.this,ClockPicker.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
  }
}
) <- updateLayout() <- .
setContentView(R.layout.alarm_clock) <- updateLayout() <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm$5464;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/ClockPicker;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.clock_layout) <- .
findViewById(R.id.gallery) <- .
mGallery.setOnItemClickListener(this) <- .
mGallery.setOnItemSelectedListener(this) <- .
mClockLayout.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    selectClock(mPosition);
  }
}
) <- .
setContentView(R.layout.clockpicker) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlert;.onBackPressed()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm$5113;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen$4999;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- dismiss(false) <- .
------------------------------------
Lcom/android/alarmclock/SetAlarm;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
setContentView(ll) <- .
getListView() <- .
getListView() <- .
b.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    finish();
  }
}
) <- .
b.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    mEnabled=true;
    saveAlarm();
    finish();
  }
}
) <- .
------------------------------------
Lcom/android/alarmclock/ClockPicker;.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
CHAINS:
finish() <- selectClock(position) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.dismiss) <- updateLayout() <- .
findViewById(R.id.snooze) <- updateLayout() <- .
findViewById(R.id.clock) <- updateLayout() <- .
findViewById(R.id.clockView) <- updateLayout() <- .
findViewById(R.id.alertTitle) <- setTitle() <- updateLayout() <- .
setContentView(inflater.inflate(R.layout.alarm_alert,null)) <- updateLayout() <- .
findViewById(R.id.dismiss).setOnClickListener(new Button.OnClickListener(){
  public void onClick(  View v){
    dismiss(false);
  }
}
) <- updateLayout() <- .
snooze.setOnClickListener(new Button.OnClickListener(){
  public void onClick(  View v){
    snooze();
  }
}
) <- updateLayout() <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
findViewById(R.id.alertTitle) <- setTitle() <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock$8649;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen$2064;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- dismiss(true) <- .
------------------------------------
Lcom/android/alarmclock/AlarmClock;.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
------------------------------------
------------------------------------
Lcom/android/alarmclock/AlarmClock;
------------------------------------
Lcom/android/alarmclock/SetAlarm;
------------------------------------
Lcom/android/alarmclock/AlarmAlert;
------------------------------------
Lcom/android/alarmclock/ClockPicker;
------------------------------------
Lcom/android/alarmclock/ClockPicker$ClockAdapter;
------------------------------------
Lcom/android/alarmclock/SettingsActivity;
------------------------------------
Lcom/android/alarmclock/AlarmAlertFullScreen;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Calculator
start doc
end doc
Lcom/android/calculator2/Calculator$PageAdapter;.(Lcom/android/calculator2/Calculator;LViewPager;)V
CHAINS:
target.setOnClickListener(mListener) <- setOnClickListener(advancedPage,advancedButtons.getResourceId(i,0)) <- .
target.setOnClickListener(mListener) <- setOnClickListener(simplePage,simpleButtons.getResourceId(i,0)) <- .
findViewById(id) <- setOnClickListener(advancedPage,advancedButtons.getResourceId(i,0)) <- .
findViewById(id) <- setOnClickListener(simplePage,simpleButtons.getResourceId(i,0)) <- .
------------------------------------
Lcom/android/calculator2/PanelSwitcher;.onFinishInflate()V
CHAINS:
mChildren[i].setVisibility(i == mCurrentView ? View.VISIBLE : View.GONE) <- updateCurrentView() <- .
------------------------------------
Lcom/android/calculator2/PanelSwitcher$1868;.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
CHAINS:
mChildren[mCurrentView].setVisibility(View.GONE) <- moveRight() <- .
mChildren[mCurrentView - 1].setVisibility(View.VISIBLE) <- moveRight() <- .
mChildren[mCurrentView].setVisibility(View.GONE) <- moveLeft() <- .
mChildren[mCurrentView + 1].setVisibility(View.VISIBLE) <- moveLeft() <- .
------------------------------------
Lcom/android/calculator2/CalculatorHitSomeButtons;.testPressSomeKeys()V
CHAINS:
mActivity.findViewById(R.id.display) <- displayVal() <- .
------------------------------------
Lcom/android/calculator2/Calculator;.onDeleteModeChange()V
CHAINS:
mBackspaceButton.setVisibility(View.GONE) <- updateDeleteMode() <- .
mClearButton.setVisibility(View.VISIBLE) <- updateDeleteMode() <- .
mBackspaceButton.setVisibility(View.VISIBLE) <- updateDeleteMode() <- .
mClearButton.setVisibility(View.GONE) <- updateDeleteMode() <- .
------------------------------------
Lcom/android/calculator2/ColorButton;.(Landroid/content/Context;Landroid/util/AttributeSet;)V
CHAINS:
setOnClickListener(this) <- .
------------------------------------
Lcom/android/calculator2/PanelSwitcher;.setCurrentIndex(I)V
CHAINS:
mChildren[i].setVisibility(i == mCurrentView ? View.VISIBLE : View.GONE) <- updateCurrentView() <- .
------------------------------------
Lcom/android/calculator2/CalculatorHitSomeButtons;.testTapSomeButtons()V
CHAINS:
mActivity.findViewById(R.id.display) <- displayVal() <- .
mActivity.findViewById(R.id.display) <- displayVal() <- .
mActivity.findViewById(id) <- tap(R.id.equal) <- .
mActivity.findViewById(id) <- tap(R.id.digit9) <- .
mActivity.findViewById(id) <- tap(R.id.digit8) <- .
mActivity.findViewById(id) <- tap(R.id.digit7) <- .
mActivity.findViewById(id) <- tap(R.id.minus) <- .
mActivity.findViewById(id) <- tap(R.id.equal) <- .
mActivity.findViewById(id) <- tap(R.id.digit3) <- .
mActivity.findViewById(id) <- tap(R.id.div) <- .
mActivity.findViewById(id) <- tap(R.id.digit7) <- .
mActivity.findViewById(id) <- tap(R.id.digit6) <- .
mActivity.findViewById(id) <- tap(R.id.digit5) <- .
mActivity.findViewById(id) <- tap(R.id.del) <- .
mActivity.findViewById(id) <- tap(R.id.equal) <- .
------------------------------------
Lcom/android/calculator2/Calculator;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mOverflowMenuButton.setOnClickListener(this) <- createFakeMenu() <- .
target.setOnClickListener(mListener) <- setOnClickListener(null,buttons.getResourceId(i,0)) <- .
mBackspaceButton.setOnClickListener(mListener) <- .
mClearButton.setOnClickListener(mListener) <- .
setContentView(R.layout.main) <- .
findViewById(R.id.overflow_menu) <- createFakeMenu() <- .
findViewById(id) <- setOnClickListener(null,buttons.getResourceId(i,0)) <- .
findViewById(R.id.display) <- .
findViewById(R.id.del) <- .
findViewById(R.id.clear) <- .
findViewById(R.id.panelswitch) <- .
mOverflowMenuButton.setVisibility(View.VISIBLE) <- createFakeMenu() <- .
mBackspaceButton.setVisibility(View.GONE) <- updateDeleteMode() <- .
mClearButton.setVisibility(View.VISIBLE) <- updateDeleteMode() <- .
mBackspaceButton.setVisibility(View.VISIBLE) <- updateDeleteMode() <- .
mClearButton.setVisibility(View.GONE) <- updateDeleteMode() <- .
------------------------------------
------------------------------------
Lcom/android/calculator2/Calculator;
------------------------------------
Lcom/android/calculator2/HistoryAdapter;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Gallery
start doc
end doc
Lcom/android/camera/MenuHelper$18153;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
activity.startActivityForResult(cropIntent,RESULT_COMMON_MENU_CROP) <- .
------------------------------------
Lcom/android/camera/ViewImage$MyGestureListener;.onSingleTapConfirmed(Landroid/view/MotionEvent;)Z
CHAINS:
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- .
------------------------------------
Lcom/android/camera/ViewImage$13913;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_SLIDESHOW) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_SLIDESHOW) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
------------------------------------
Lcom/android/camera/MovieView;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.root) <- .
setContentView(R.layout.movie_view) <- .
------------------------------------
Lcom/android/camera/ViewImage$15981;.run()V
CHAINS:
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- .
finish() <- .
------------------------------------
Lcom/android/camera/PhotoAppWidgetConfigure;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
startActivityForResult(intent,REQUEST_GET_PHOTO) <- .
------------------------------------
Lcom/android/camera/ImageGallery;.onResume()V
CHAINS:
mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE) <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
------------------------------------
Lcom/android/camera/ImageGallery$5790;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- onSlideShowClicked() <- .
------------------------------------
Lcom/android/camera/MovieViewControl;.onError(Landroid/media/MediaPlayer;II)Z
CHAINS:
mProgressView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$3559;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
findViewById(R.id.no_images) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.no_images) <- showNoImagesView() <- rebake(false,false) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.no_images) <- showNoImagesView() <- rebake(false,true) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.no_images) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.root) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.root) <- showNoImagesView() <- rebake(false,false) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.root) <- showNoImagesView() <- rebake(false,true) <- onReceiveMediaBroadcast(intent) <- .
findViewById(R.id.root) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- rebake(false,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- rebake(false,true) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- rebake(false,false) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- rebake(false,true) <- onReceiveMediaBroadcast(intent) <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(mScanning) <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(mScanning) <- rebake(false,false) <- onReceiveMediaBroadcast(intent) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(mScanning) <- rebake(false,true) <- onReceiveMediaBroadcast(intent) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(mScanning) <- rebake(true,false) <- onReceiveMediaBroadcast(intent) <- .
------------------------------------
Lcom/android/camera/MovieView$1628;.onCompletion()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/GalleryPicker$16167;.run()V
CHAINS:
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- updateItem(finalItem) <- .
------------------------------------
Lcom/android/camera/MenuHelper$19395;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
activity.startActivity(Intent.createChooser(intent,activity.getText(isImage ? R.string.sendImage : R.string.sendVideo))) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$16392;.run()V
CHAINS:
findViewById(R.id.no_images) <- showNoImagesView() <- checkBucketIdsFinished() <- .
findViewById(R.id.root) <- showNoImagesView() <- checkBucketIdsFinished() <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- checkBucketIdsFinished() <- .
finish() <- checkBucketIdsFinished() <- .
activity.startActivity(intent) <- mAdapter.mItems.get(0).launch(this) <- checkBucketIdsFinished() <- .
------------------------------------
Lcom/android/camera/ImageGallery$5425;.onClick(Landroid/view/View;)V
CHAINS:
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- closeMultiSelectMode() <- .
------------------------------------
Lcom/android/camera/ViewImage~ImageViewTouch;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,listener).setNegativeButton(android.R.string.cancel,listener).create().show() <- confirmAction(activity,title,message,onDelete) <- deleteImpl(activity,onDelete,true) <- MenuHelper.deletePhoto(mViewImage,mViewImage.mDeletePhotoRunnable) <- .
findViewById(R.id.abs) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- mViewImage.setImage(nextImagePos,true) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- mViewImage.setImage(nextImagePos,true) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- mViewImage.setImage(nextImagePos,true) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- mViewImage.setImage(nextImagePos,true) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- mViewImage.setImage(nextImagePos,true) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- mViewImage.setMode(ViewImage.MODE_NORMAL) <- .
mViewImage.finish() <- .
------------------------------------
Lcom/android/camera/ImageGallery$6972;.run()V
CHAINS:
mNoImagesView.setVisibility(mAllImages.isEmpty() ? View.VISIBLE : View.GONE) <- .
------------------------------------
Lcom/android/camera/MenuHelper$18810;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
activity.startActivity(Intent.createChooser(intent,activity.getText(R.string.setImage))) <- .
------------------------------------
Lcom/android/camera/ImageGallery$17731;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- closeMultiSelectMode() <- .
------------------------------------
Lcom/android/camera/ImageGallery$5180;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(Intent.createChooser(intent,getText(isImage ? R.string.sendImage : R.string.sendVideo))) <- onShareMultipleClicked() <- .
startActivity(Intent.createChooser(intent,getText(R.string.send_media_files))) <- onShareMultipleClicked() <- .
------------------------------------
Lcom/android/camera/MenuHelper$32316;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
activity.startActivity(intent) <- onCapturePictureClicked(activity) <- .
------------------------------------
Lcom/android/camera/ViewImage$29397;.run()V
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
oldView.setVisibility(View.INVISIBLE) <- .
newView.setVisibility(View.VISIBLE) <- .
newView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/MenuHelper$UpdateLocationCallback;.onComplete(Ljava/lang/String;)V
CHAINS:
d.findViewById(rowId).setVisibility(View.GONE) <- MenuHelper.hideDetailsRow(view,R.id.details_location_row) <- .
------------------------------------
Lcom/android/camera/ImageGallery;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/ViewImage;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
finish() <- .
------------------------------------
Lcom/android/camera/PhotoAppWidgetBind;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/ImageGallery$17021;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(preferences) <- .
------------------------------------
Lcom/android/camera/Wallpaper;.onCreate(Landroid/os/Bundle;)V
CHAINS:
startActivityForResult(intent,PHOTO_PICKED) <- .
startActivityForResult(intent,CROP_DONE) <- .
------------------------------------
Lcom/android/camera/MovieViewControl;.(Landroid/view/View;Landroid/content/Context;Landroid/net/Uri;)V
CHAINS:
mProgressView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/MenuHelper$13242;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_date_taken_row) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_resolution_row) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_whitebalance_row) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_model_row) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_make_row) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_location_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_location_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_longitude_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_longitude_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_latitude_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_latitude_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_whitebalance_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_whitebalance_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_model_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_model_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_make_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_make_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_resolution_row) <- hideExifInformation(d) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_resolution_row) <- hideExifInformation(d) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_location_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_longitude_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_latitude_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_location_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_longitude_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
d.findViewById(rowId).setVisibility(View.GONE) <- hideDetailsRow(d,R.id.details_latitude_row) <- setLatLngDetails(d,activity,exif) <- showExifInformation(image,d,activity) <- .
------------------------------------
Lcom/android/camera/ViewImage;.onPrepareOptionsMenu(Landroid/view/Menu;)Z
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$25861;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(preferences) <- .
------------------------------------
Lcom/android/camera/DeleteImage$1318;.run()V
CHAINS:
finish() <- deleteNext() <- .
------------------------------------
Lcom/android/camera/GalleryPicker$7297;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- onSlideShowClicked(menuInfo) <- .
------------------------------------
Lcom/android/camera/ViewImage;.onClick(Landroid/view/View;)V
CHAINS:
new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,listener).setNegativeButton(android.R.string.cancel,listener).create().show() <- confirmAction(activity,title,message,onDelete) <- deleteImpl(activity,onDelete,true) <- MenuHelper.deletePhoto(this,mDeletePhotoRunnable) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- moveNextOrPrevious(-1) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- moveNextOrPrevious(1) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(-1) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(1) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(-1) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(1) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(-1) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(1) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(-1) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(1) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(-1) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(1) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(-1) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(1) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(-1) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(1) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(-1) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- moveNextOrPrevious(1) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(-1) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(nextImagePos,true) <- moveNextOrPrevious(1) <- .
startActivity(Intent.createChooser(intent,getText(R.string.setImage))) <- .
startActivity(intent) <- startPlayVideoActivity() <- .
startActivity(Intent.createChooser(intent,getText(isVideo ? R.string.sendVideo : R.string.sendImage))) <- startShareMediaActivity(image) <- .
------------------------------------
Lcom/android/camera/ViewImage;.onStop()V
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
mNextImageView.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
mActionIconPanel.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
------------------------------------
Lcom/android/camera/ImageGallery$35809;.run()V
CHAINS:
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- closeMultiSelectMode() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/camera/MenuHelper$9289;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
activity.startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri))) <- .
------------------------------------
Lcom/android/camera/MenuHelper$21157;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,listener).setNegativeButton(android.R.string.cancel,listener).create().show() <- confirmAction(activity,title,message,onDelete) <- deleteImpl(activity,onDelete,ImageManager.isImage(image)) <- deleteImage(activity,onDelete,image) <- .
------------------------------------
Lcom/android/camera/DeleteImage;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.delete_progress) <- .
finish() <- .
setContentView(R.layout.delete_image) <- .
------------------------------------
Lcom/android/camera/ViewImage;.onStart()V
CHAINS:
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,mShowControls) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,mShowControls) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,mShowControls) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,mShowControls) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,mShowControls) <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/camera/ViewImage$4911;.run()V
CHAINS:
mPrevImageView.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
mNextImageView.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
mActionIconPanel.setVisibility(View.INVISIBLE) <- hideOnScreenControls() <- .
------------------------------------
Lcom/android/camera/GalleryPicker$3772;.onChange(Z)V
CHAINS:
findViewById(R.id.no_images) <- showNoImagesView() <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
findViewById(R.id.root) <- showNoImagesView() <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
mNoImagesView.setVisibility(View.VISIBLE) <- showNoImagesView() <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(mScanning) <- rebake(false,ImageManager.isMediaScannerScanning(getContentResolver())) <- .
------------------------------------
Lcom/android/camera/ViewImage$15475;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(preferences) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$2930;.onItemClick(Landroid/widget/AdapterView<*>;Landroid/view/View;IJ)V
CHAINS:
activity.startActivity(intent) <- mAdapter.mItems.get(position).launch(this) <- launchFolderGallery(position) <- .
------------------------------------
Lcom/android/camera/MovieViewControl$2468;.run()V
CHAINS:
mProgressView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/Wallpaper;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/GalleryPicker$14111;.run()V
CHAINS:
mNoImagesView.setVisibility(View.GONE) <- hideNoImagesView() <- updateItem(finalItem) <- .
------------------------------------
Lcom/android/camera/MenuHelper$33228;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
activity.startActivity(intent) <- onCaptureVideoClicked(activity) <- .
------------------------------------
Lcom/android/camera/CropImage$11614;.run()V
CHAINS:
finish() <- saveOutput(b) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$12622;.run()V
CHAINS:
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- updateScanningDialog(scanning) <- checkScanningFinished(scanning) <- .
------------------------------------
Lcom/android/camera/ViewImage$14518;.run(Lcom/android/camera/MenuHelper$MenuCallback;)V
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,false) <- .
------------------------------------
Lcom/android/camera/CropImage$5447;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/ImageGallery;.onImageTapped(I)V
CHAINS:
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- toggleMultiSelected(mAllImages.getImageAt(index)) <- .
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- toggleMultiSelected(image) <- onImageClicked(index) <- .
mFooterOrganizeView.setVisibility(View.VISIBLE) <- showFooter() <- toggleMultiSelected(mAllImages.getImageAt(index)) <- .
mFooterOrganizeView.setVisibility(View.VISIBLE) <- showFooter() <- toggleMultiSelected(image) <- onImageClicked(index) <- .
finish() <- launchCropperOrFinish(image) <- onImageClicked(index) <- .
startActivity(intent) <- onImageClicked(index) <- .
startActivityForResult(cropIntent,CROP_MSG) <- launchCropperOrFinish(image) <- onImageClicked(index) <- .
------------------------------------
Lcom/android/camera/CropImage$5723;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- onSaveClicked() <- .
ProgressDialog.show(activity,title,message,true,false) <- Util.startBackgroundJob(this,null,getResources().getString(msdId),new Runnable(){
  public void run(){
    saveOutput(b);
  }
}
,mHandler) <- onSaveClicked() <- .
------------------------------------
Lcom/android/camera/ImageGallery;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.left_text) <- setupInclusion() <- .
findViewById(R.id.button_close) <- initializeFooterButtons() <- .
findViewById(R.id.button_share) <- initializeFooterButtons() <- .
findViewById(R.id.button_delete) <- initializeFooterButtons() <- .
findViewById(R.id.footer_organize) <- .
findViewById(R.id.grid) <- .
findViewById(R.id.no_images) <- .
closeButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    closeMultiSelectMode();
  }
}
) <- initializeFooterButtons() <- .
shareButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    onShareMultipleClicked();
  }
}
) <- initializeFooterButtons() <- .
deleteButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    onDeleteMultipleClicked();
  }
}
) <- initializeFooterButtons() <- .
mFooterOrganizeView.setOnClickListener(Util.getNullOnClickListener()) <- .
setContentView(R.layout.image_gallery) <- .
------------------------------------
Lcom/android/camera/ImageGallery$4934;.onClick(Landroid/view/View;)V
CHAINS:
new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,listener).setNegativeButton(android.R.string.cancel,listener).create().show() <- confirmAction(context,title,message,action) <- MenuHelper.deleteMultiple(this,action) <- onDeleteMultipleClicked() <- .
------------------------------------
Lcom/android/camera/ViewImage;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_SLIDESHOW) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_SLIDESHOW) <- .
findViewById(R.id.rootLayout) <- .
findViewById(R.id.action_icon_panel) <- .
findViewById(R.id.image2_slideShow) <- .
findViewById(R.id.image1_slideShow) <- .
findViewById(R.id.image) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_SLIDESHOW) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_SLIDESHOW) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- .
view.setVisibility(View.VISIBLE) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_SLIDESHOW) <- .
view.setOnClickListener(this) <- .
mPrevImageView.setOnClickListener(this) <- setupOnScreenControls(findViewById(R.id.rootLayout),mImageView) <- .
mNextImageView.setOnClickListener(this) <- setupOnScreenControls(findViewById(R.id.rootLayout),mImageView) <- .
v.setVisibility(View.INVISIBLE) <- .
setContentView(R.layout.viewimage) <- .
------------------------------------
Lcom/android/camera/ViewImage$7606;.run()V
CHAINS:
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- .
------------------------------------
Lcom/android/camera/ImageGallery$24394;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
mFooterOrganizeView.setVisibility(View.GONE) <- hideFooter() <- toggleMultiSelected(image) <- onImageClicked(mGvs.getCurrentSelection()) <- .
mFooterOrganizeView.setVisibility(View.VISIBLE) <- showFooter() <- toggleMultiSelected(image) <- onImageClicked(mGvs.getCurrentSelection()) <- .
finish() <- launchCropperOrFinish(image) <- onImageClicked(mGvs.getCurrentSelection()) <- .
startActivity(intent) <- onImageClicked(mGvs.getCurrentSelection()) <- .
startActivityForResult(cropIntent,CROP_MSG) <- launchCropperOrFinish(image) <- onImageClicked(mGvs.getCurrentSelection()) <- .
------------------------------------
Lcom/android/camera/ViewImage$MyGestureListener;.onSingleTapUp(Landroid/view/MotionEvent;)Z
CHAINS:
findViewById(R.id.abs) <- setMode(MODE_NORMAL) <- .
findViewById(R.id.slideShowContainer) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
normalPanel.setVisibility(View.GONE) <- setMode(MODE_NORMAL) <- .
slideshowPanel.setVisibility(View.VISIBLE) <- setMode(MODE_NORMAL) <- .
mActionIconPanel.setVisibility(View.VISIBLE) <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mNextImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.GONE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
mPrevImageView.setVisibility(View.VISIBLE) <- updateNextPrevControls() <- showOnScreenControls() <- setImage(mCurrentPosition,true) <- setMode(MODE_NORMAL) <- .
------------------------------------
Lcom/android/camera/GalleryPicker$7620;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
activity.startActivity(intent) <- mAdapter.mItems.get(position).launch(this) <- launchFolderGallery(info.position) <- onViewClicked(menuInfo) <- .
------------------------------------
Lcom/android/camera/CropImage;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.save) <- .
findViewById(R.id.discard) <- .
findViewById(R.id.image) <- .
finish() <- .
ProgressDialog.show(activity,title,message,true,false) <- Util.startBackgroundJob(this,null,getResources().getString(R.string.runningFaceDetection),new Runnable(){
  public void run(){
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap b=(mImage != null) ? mImage.fullSizeBitmap(IImage.UNCONSTRAINED,1024 * 1024) : mBitmap;
    mHandler.post(new Runnable(){
      public void run(){
        if (b != mBitmap && b != null) {
          mImageView.setImageBitmapResetBase(b,true);
          mBitmap.recycle();
          mBitmap=b;
        }
        if (mImageView.getScale() == 1F) {
          mImageView.center(true,true);
        }
        latch.countDown();
      }
    }
);
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
    mRunFaceDetection.run();
  }
}
,mHandler) <- startFaceDetection() <- .
setContentView(R.layout.cropimage) <- .
------------------------------------
Lcom/android/camera/ImageGallery$14981;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE) <- rebake(true,false) <- .
mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE) <- rebake(false,false) <- .
mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE) <- rebake(false,true) <- .
mNoImagesView.setVisibility(mAllImages.getCount() > 0 ? View.GONE : View.VISIBLE) <- rebake(true,false) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- rebake(true,false) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- rebake(false,false) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- rebake(false,true) <- .
ProgressDialog.show(this,null,getResources().getString(R.string.wait),true,true) <- rebake(true,false) <- .
------------------------------------
Lcom/android/camera/PhotoAppWidgetConfigure;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/Util$BackgroundJob;.onActivityStarted(Lcom/android/camera/MonitoredActivity;)V
CHAINS:
mDialog.show() <- .
------------------------------------
Lcom/android/camera/GalleryPicker;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.albums) <- .
mGridView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
  public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    launchFolderGallery(position);
  }
}
) <- .
setContentView(R.layout.gallerypicker) <- .
------------------------------------
Lcom/android/camera/ImageGallery;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
new AlertDialog.Builder(context).setIcon(android.R.drawable.ic_dialog_alert).setTitle(title).setMessage(message).setPositiveButton(android.R.string.ok,listener).setNegativeButton(android.R.string.cancel,listener).create().show() <- confirmAction(activity,title,message,onDelete) <- deleteImpl(activity,onDelete,ImageManager.isImage(image)) <- MenuHelper.deleteImage(this,mDeletePhotoRunnable,getCurrentImage()) <- .
------------------------------------
Lcom/android/camera/MenuHelper$20619;.run(Landroid/net/Uri;Lcom/android/camera/gallery/IImage;)V
CHAINS:
activity.startActivity(intent) <- .
------------------------------------
------------------------------------
Lcom/android/camera/CropImage;
------------------------------------
Lcom/android/camera/Wallpaper;
------------------------------------
Lcom/android/camera/MonitoredActivity;
------------------------------------
Lcom/android/camera/PhotoAppWidgetConfigure;
------------------------------------
Lcom/android/camera/ViewImage;
------------------------------------
Lcom/android/camera/ImageGallery;
------------------------------------
Lcom/android/camera/GalleryPicker;
------------------------------------
Lcom/android/camera/GallerySettings;
------------------------------------
Lcom/android/camera/ImageGallery$CreateContextMenuListener;
------------------------------------
Lcom/android/camera/DeleteImage;
------------------------------------
Lcom/android/camera/PhotoAppWidgetBind;
------------------------------------
Lcom/android/camera/MovieView;
------------------------------------
Lcom/android/camera/GalleryPicker$3241;
------------------------------------
Lcom/android/camera/GalleryPicker~GalleryPickerAdapter;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/IM
start doc
end doc
Lcom/android/im/app/ContactPresenceActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
txtCustomStatus.setVisibility(View.GONE) <- .
txtCustomStatus.setVisibility(View.VISIBLE) <- .
setContentView(R.layout.contact_presence_activity) <- .
findViewById(R.id.txtStatusText) <- .
findViewById(R.id.txtClientType) <- .
findViewById(R.id.txtStatus) <- .
findViewById(R.id.txtName) <- .
findViewById(R.id.labelName) <- .
findViewById(R.id.imgAvatar) <- .
------------------------------------
Lcom/android/im/app/SimpleInputActivity$2367;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
startActivity(intent) <- .
startActivity(intent) <- .
startActivity(new Intent(Intent.ACTION_VIEW,builder.build())) <- .
startActivity(i) <- .
------------------------------------
Lcom/android/im/app/ContactListTreeAdapter;.getChildView(IIZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
mTimeStamp.setVisibility(GONE) <- bind(cursor,underLineText,true,scrolling) <- ((ContactView)view).bind(cursor,null,isScrolling()) <- .
mTimeStamp.setVisibility(VISIBLE) <- bind(cursor,underLineText,true,scrolling) <- ((ContactView)view).bind(cursor,null,isScrolling()) <- .
------------------------------------
Lcom/android/im/app/SigningInActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/AccountActivity$6898;.onClick(Landroid/view/View;)V
CHAINS:
startActivityForResult(intent,REQUEST_SIGN_IN) <- signIn(rememberPass,pass) <- .
------------------------------------
Lcom/android/im/app/LandingPage;.onCreate(Landroid/os/Bundle;)V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/im/app/SimpleInputActivity$2859;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity;.onRestart()V
CHAINS:
finish() <- handleConnectionEvent(state,null) <- signInAccount() <- .
finish() <- signInAccount() <- .
finish() <- .
startActivity(intent) <- handleConnectionEvent(state,null) <- signInAccount() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity;.onRestoreInstanceState(Landroid/os/Bundle;)V
CHAINS:
setContentView(mFilterView) <- showFilterView() <- .
------------------------------------
Lcom/android/im/app/ImageListAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
tv.setVisibility(View.VISIBLE) <- setupView(position,v) <- .
separator.setVisibility(View.GONE) <- setupView(position,v) <- .
separator.setVisibility(View.VISIBLE) <- setupView(position,v) <- .
tv.setVisibility(View.GONE) <- setupView(position,v) <- .
iv.setVisibility(View.VISIBLE) <- setupView(position,v) <- .
iv.setVisibility(View.GONE) <- setupView(position,v) <- .
------------------------------------
Lcom/android/im/app/NewChatActivity;.onResume()V
CHAINS:
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- mChatView.onResume() <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- mChatView.onResume() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity;.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
CHAINS:
setContentView(mContactListView) <- showContactListView() <- .
setContentView(mFilterView) <- showFilterView() <- .
------------------------------------
Lcom/android/im/app/ContactListView;.startChatAtPosition(J)V
CHAINS:
mScreen.startActivity(i) <- startChat(getContactAtPosition(packedPosition)) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$6034;.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
CHAINS:
mActivity.finish() <- select(c,position) <- .
mActivity.startActivity(intent) <- select(c,position) <- .
------------------------------------
Lcom/android/im/app/ContactListActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
finish() <- .
setContentView(mContactListView) <- .
------------------------------------
Lcom/android/im/app/ContactListView;.startChat()V
CHAINS:
mScreen.startActivity(i) <- startChat(getSelectedContact()) <- .
------------------------------------
Lcom/android/im/app/ChatView$11525;.onClick(Landroid/view/View;)V
CHAINS:
mScreen.finish() <- approveSubscription() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity$10131;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$15758;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View view){
    select(c,position);
  }
}
) <- updateViewListeners(v,c,pos) <- mChatSwitcherDialog.update() <- update() <- .
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
mEmptyView.setVisibility(pos > 0 || !mOkToShowEmptyView ? View.GONE : View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
mViews.get(i).setVisibility(View.GONE) <- mChatSwitcherDialog.update() <- update() <- .
v.setVisibility(View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$24469;.onComplete(Landroid/database/Cursor;)V
CHAINS:
mActivity.finish() <- select(c,position) <- rotateChat(c,direction,contact,accountId,providerId) <- .
mActivity.startActivity(intent) <- select(c,position) <- rotateChat(c,direction,contact,accountId,providerId) <- .
------------------------------------
Lcom/android/im/app/ContactListTreeAdapter$ListTreeAdapter;.bindGroupView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V
CHAINS:
text2.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/im/app/ChatView;.onFinishInflate()V
CHAINS:
mSendButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    sendMessage();
  }
}
) <- .
declineSubscription.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    declineSubscription();
  }
}
) <- .
approveSubscription.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    approveSubscription();
  }
}
) <- .
declineInvitation.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    declineInvitation();
  }
}
) <- .
acceptInvitation.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    acceptInvitation();
  }
}
) <- .
mHistory.setOnItemClickListener(mOnItemClickListener) <- .
mEdtInput.addTextChangedListener(new TextWatcher(){
  public void beforeTextChanged(  CharSequence s,  int start,  int before,  int after){
  }
  public void onTextChanged(  CharSequence s,  int start,  int before,  int after){
    userActionDetected();
  }
  public void afterTextChanged(  Editable s){
  }
}
) <- .
------------------------------------
Lcom/android/im/app/NewChatActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
mActivity.finish() <- select(c,position) <- rotateChat(mSwitcherAdapter.getCursor(),direction,contact,accountId,providerId) <- mChatSwitcher.rotateChat(delta,contact,accountId,providerId) <- switchChat(1) <- .
mActivity.finish() <- select(c,position) <- rotateChat(mSwitcherAdapter.getCursor(),direction,contact,accountId,providerId) <- mChatSwitcher.rotateChat(delta,contact,accountId,providerId) <- switchChat(-1) <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mChatSwitcher.handleShortcut(item.getAlphabeticShortcut()) <- .
mScreen.finish() <- mChatView.closeChatSession() <- .
mSmileyDialog.show() <- showSmileyDialog() <- .
mChatSwitcherDialog.show() <- mChatSwitcher.open() <- .
startActivity(intent) <- showRosterScreen() <- .
mActivity.startActivity(intent) <- select(c,position) <- rotateChat(mSwitcherAdapter.getCursor(),direction,contact,accountId,providerId) <- mChatSwitcher.rotateChat(delta,contact,accountId,providerId) <- switchChat(1) <- .
mActivity.startActivity(intent) <- select(c,position) <- rotateChat(mSwitcherAdapter.getCursor(),direction,contact,accountId,providerId) <- mChatSwitcher.rotateChat(delta,contact,accountId,providerId) <- switchChat(-1) <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mChatSwitcher.handleShortcut(item.getAlphabeticShortcut()) <- .
mScreen.startActivity(intent) <- mChatView.viewProfile() <- .
startActivityForResult(i,REQUEST_PICK_CONTACTS) <- startContactPicker() <- .
------------------------------------
Lcom/android/im/app/AddContactActivity$8524;.run()V
CHAINS:
finish() <- inviteBuddies() <- .
finish() <- inviteBuddies() <- .
------------------------------------
Lcom/android/im/app/LandingPage$ProviderAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
mChatView.setVisibility(View.GONE) <- ((ProviderListItem)view).bindView(cursor) <- .
mLoginName.setVisibility(View.GONE) <- ((ProviderListItem)view).bindView(cursor) <- .
chatView.setVisibility(View.GONE) <- ((ProviderListItem)view).bindView(cursor) <- .
chatView.setVisibility(View.VISIBLE) <- ((ProviderListItem)view).bindView(cursor) <- .
chatView.setVisibility(View.GONE) <- ((ProviderListItem)view).bindView(cursor) <- .
providerName.setVisibility(View.VISIBLE) <- ((ProviderListItem)view).bindView(cursor) <- .
mLoginName.setVisibility(View.VISIBLE) <- ((ProviderListItem)view).bindView(cursor) <- .
statusIcon.setVisibility(View.VISIBLE) <- ((ProviderListItem)view).bindView(cursor) <- .
statusIcon.setVisibility(View.GONE) <- ((ProviderListItem)view).bindView(cursor) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$3120;.onInvalidated()V
CHAINS:
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View view){
    select(c,position);
  }
}
) <- updateViewListeners(v,c,pos) <- mChatSwitcherDialog.update() <- update() <- .
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
mEmptyView.setVisibility(pos > 0 || !mOkToShowEmptyView ? View.GONE : View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
mViews.get(i).setVisibility(View.GONE) <- mChatSwitcherDialog.update() <- update() <- .
v.setVisibility(View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
------------------------------------
Lcom/android/im/app/AccountActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mBtnSignIn.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    String username=mEditName.getText().toString();
    final String pass=mEditPass.getText().toString();
    final boolean rememberPass=mRememberPass.isChecked();
    ContentResolver cr=getContentResolver();
    long accountId=ImApp.insertOrUpdateAccount(cr,providerId,username,rememberPass ? pass : null);
    mAccountUri=ContentUris.withAppendedId(Imps.Account.CONTENT_URI,accountId);
    if (!origUserName.equals(username) && shouldShowTermOfUse(brandingRes)) {
      comfirmTermsOfUse(brandingRes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          signIn(rememberPass,pass);
        }
      }
);
    }
 else {
      signIn(rememberPass,pass);
    }
  }
  void signIn(  boolean rememberPass,  String pass){
    Intent intent=new Intent(AccountActivity.this,SigningInActivity.class);
    intent.setData(mAccountUri);
    if (!rememberPass) {
      intent.putExtra(ImApp.EXTRA_INTENT_PASSWORD,pass);
    }
    if (mToAddress != null) {
      intent.putExtra(ImApp.EXTRA_INTENT_SEND_TO_USER,mToAddress);
    }
    startActivityForResult(intent,REQUEST_SIGN_IN);
  }
}
) <- .
mRememberPass.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    CheckBox keepSignIn=(CheckBox)v;
    if (keepSignIn.isChecked()) {
      String msg=brandingRes.getString(BrandingResourceIDs.STRING_TOAST_CHECK_SAVE_PASSWORD);
      Toast.makeText(AccountActivity.this,msg,Toast.LENGTH_LONG).show();
    }
  }
}
) <- .
mKeepSignIn.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    CheckBox keepSignIn=(CheckBox)v;
    if (keepSignIn.isChecked()) {
      String msg=brandingRes.getString(BrandingResourceIDs.STRING_TOAST_CHECK_AUTO_SIGN_IN);
      Toast.makeText(AccountActivity.this,msg,Toast.LENGTH_LONG).show();
    }
  }
}
) <- .
finish() <- .
finish() <- .
finish() <- .
setContentView(R.layout.account_activity) <- .
findViewById(R.id.signUp) <- .
findViewById(R.id.label_username) <- .
findViewById(R.id.btnSignIn) <- .
findViewById(R.id.keepSignIn) <- .
findViewById(R.id.rememberPassword) <- .
findViewById(R.id.edtPass) <- .
findViewById(R.id.edtName) <- .
mRememberPass.setOnCheckedChangeListener(new OnCheckedChangeListener(){
  public void onCheckedChanged(  CompoundButton buttonView,  boolean isChecked){
    updateWidgetState();
  }
}
) <- .
mEditPass.addTextChangedListener(mTextWatcher) <- .
mEditName.addTextChangedListener(mTextWatcher) <- .
mBtnSignIn.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mKeepSignIn.setEnabled(rememberPass) <- updateWidgetState() <- .
mRememberPass.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mEditPass.setEnabled(goodUsername) <- updateWidgetState() <- .
------------------------------------
Lcom/android/im/app/NewChatActivity$3017;.run()V
CHAINS:
finish() <- resolveIntent(getIntent()) <- .
finish() <- resolveIntent(getIntent()) <- .
mScreen.finish() <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mScreen.finish() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mScreen.finish() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mChatSwitcherDialog.show() <- mChatSwitcher.open() <- resolveIntent(getIntent()) <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mStatusIcon.setVisibility(VISIBLE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mStatusIcon.setVisibility(GONE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(getIntent()) <- .
------------------------------------
Lcom/android/im/app/ContactListFilterView$ContactAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
mTimeStamp.setVisibility(GONE) <- bind(cursor,underLineText,true,scrolling) <- v.bind(cursor,mSearchString,false) <- .
mTimeStamp.setVisibility(VISIBLE) <- bind(cursor,underLineText,true,scrolling) <- v.bind(cursor,mSearchString,false) <- .
------------------------------------
Lcom/android/im/app/ContactListFilterView$1704;.onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V
CHAINS:
setContentView(mContactListView) <- list.showContactListView() <- .
mScreen.startActivity(i) <- list.mContactListView.startChat(c) <- .
------------------------------------
Lcom/android/im/app/ChatView$7211;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mScreen.startActivity(intent) <- .
------------------------------------
Lcom/android/im/app/SimpleInputActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mBtnCancel.setOnClickListener(new Button.OnClickListener(){
  public void onClick(  View v){
    finish();
  }
}
) <- .
mBtnOk.setOnClickListener(new Button.OnClickListener(){
  public void onClick(  View v){
    setResult(RESULT_OK,(new Intent()).setAction(mEdit.getText().toString()));
    finish();
  }
}
) <- .
mPrompt.setVisibility(View.GONE) <- .
setContentView(R.layout.simple_input_activity) <- .
findViewById(R.id.btnCancel) <- .
findViewById(R.id.btnOk) <- .
findViewById(R.id.edit) <- .
findViewById(R.id.prompt) <- .
------------------------------------
Lcom/android/im/app/PreferenceActivity$3872;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- savePreferences() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity$4317;.run()V
CHAINS:
finish() <- .
statusView.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- mPresenceView.setConnection(conn) <- mContactListView.setConnection(mConn) <- .
statusEdit.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- mPresenceView.setConnection(conn) <- mContactListView.setConnection(mConn) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$22751;.onComplete(Landroid/database/Cursor;)V
CHAINS:
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(c,key) <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(c,key) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$ChatSwitcherDialog;.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
CHAINS:
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View view){
    select(c,position);
  }
}
) <- updateViewListeners(v,c,pos) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View view){
    select(c,position);
  }
}
) <- updateViewListeners(v,c,pos) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('9') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('8') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('7') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('6') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('5') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('4') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('3') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('2') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('1') <- .
mActivity.finish() <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('0') <- .
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mEmptyView.setVisibility(pos > 0 || !mOkToShowEmptyView ? View.GONE : View.VISIBLE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mEmptyView.setVisibility(pos > 0 || !mOkToShowEmptyView ? View.GONE : View.VISIBLE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mViews.get(i).setVisibility(View.GONE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mViews.get(i).setVisibility(View.GONE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
v.setVisibility(View.VISIBLE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
v.setVisibility(View.VISIBLE) <- mChatSwitcherDialog.update() <- mSwitcher.update() <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('9') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('8') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('7') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('6') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('5') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('4') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('3') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('2') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('1') <- .
mActivity.startActivity(intent) <- select(c,c.getPosition()) <- handleShortcut(mSwitcherAdapter.getCursor(),key) <- mSwitcher.handleShortcut('0') <- .
------------------------------------
Lcom/android/im/app/ContactListView$15531;.onChildClick(Landroid/widget/ExpandableListView;Landroid/view/View;IIJ)Z
CHAINS:
mScreen.startActivity(intent) <- .
mScreen.startActivity(i) <- startChat(cursor) <- .
------------------------------------
Lcom/android/im/app/AccountActivity$7608;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivityForResult(intent,REQUEST_SIGN_IN) <- signIn(rememberPass,pass) <- .
------------------------------------
Lcom/android/im/app/SigningInActivity$4874;.run()V
CHAINS:
finish() <- handleConnectionEvent(state,null) <- signInAccount() <- .
finish() <- signInAccount() <- .
startActivity(intent) <- handleConnectionEvent(state,null) <- signInAccount() <- .
------------------------------------
Lcom/android/im/app/AccountActivity$12403;.onTextChanged(Ljava/lang/CharSequence;III)V
CHAINS:
mBtnSignIn.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mKeepSignIn.setEnabled(rememberPass) <- updateWidgetState() <- .
mRememberPass.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mEditPass.setEnabled(goodUsername) <- updateWidgetState() <- .
------------------------------------
Lcom/android/im/app/ChatView$34928;.run()V
CHAINS:
mScreen.finish() <- bindChat(id) <- .
mScreen.finish() <- updateChat() <- bindChat(id) <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- updateChat() <- bindChat(id) <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- updateChat() <- bindChat(id) <- .
mStatusIcon.setVisibility(VISIBLE) <- setStatusIcon() <- updateChat() <- bindChat(id) <- .
mStatusIcon.setVisibility(GONE) <- setStatusIcon() <- updateChat() <- bindChat(id) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- bindChat(id) <- .
------------------------------------
Lcom/android/im/app/ContactListTreeAdapter;.getGroupView(IZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
text2.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/im/app/ContactListView;.viewContactPresence()V
CHAINS:
mScreen.startActivity(i) <- viewContactPresence(getSelectedContact()) <- .
------------------------------------
Lcom/android/im/app/ChatView$25799;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mScreen.finish() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity$ContextMenuHandler;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
setContentView(mContactListView) <- showContactListView() <- .
mScreen.startActivity(i) <- mContactListView.viewContactPresence(c) <- .
mScreen.startActivity(i) <- mContactListView.startChat(c) <- .
------------------------------------
Lcom/android/im/app/UserPresenceView$2647;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
statusView.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(item.getStatus(),item.getText().toString()) <- .
statusEdit.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(item.getStatus(),item.getText().toString()) <- .
------------------------------------
Lcom/android/im/app/ContactsPickerActivity$ContactsAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
mTimeStamp.setVisibility(GONE) <- bind(cursor,underLineText,true,scrolling) <- v.bind(cursor,mConstraints,false) <- .
mTimeStamp.setVisibility(VISIBLE) <- bind(cursor,underLineText,true,scrolling) <- v.bind(cursor,mConstraints,false) <- .
------------------------------------
Lcom/android/im/app/ChooseAccountActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/im/app/PreferenceActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
btnSave.setOnClickListener(new Button.OnClickListener(){
  public void onClick(  View v){
    savePreferences();
  }
}
) <- .
finish() <- resolveIntent() <- .
finish() <- resolveIntent() <- .
setContentView(R.layout.preference_activity) <- .
findViewById(R.id.btnSave) <- .
findViewById(R.id.etMsisdn) <- .
findViewById(R.id.etHost) <- .
findViewById(R.id.rgCirChannel) <- .
findViewById(R.id.rgDataEncoding) <- .
findViewById(R.id.rgDataChannel) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$20016;.run()V
CHAINS:
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.updateTimes() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.updateTimes() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity$12868;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/ChatView$11702;.onClick(Landroid/view/View;)V
CHAINS:
mScreen.finish() <- declineSubscription() <- .
------------------------------------
Lcom/android/im/app/ContactsPickerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
setContentView(R.layout.contacts_picker_activity) <- .
findViewById(R.id.filter) <- .
filter.addTextChangedListener(new TextWatcher(){
  public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){
  }
  public void onTextChanged(  CharSequence s,  int start,  int before,  int count){
    mFilter.filter(s);
  }
  public void afterTextChanged(  Editable s){
  }
}
) <- .
------------------------------------
Lcom/android/im/app/UserPresenceView;.onFinishInflate()V
CHAINS:
mStatusDialogButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    showStatusListDialog();
  }
}
) <- .
------------------------------------
Lcom/android/im/app/AddContactActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mInviteButton.setOnClickListener(mButtonHandler) <- .
setContentView(R.layout.add_contact_activity) <- .
findViewById(R.id.invite) <- .
findViewById(R.id.choose_list) <- .
findViewById(R.id.email) <- .
findViewById(R.id.input_contact_label) <- .
mAddressList.addTextChangedListener(mTextWatcher) <- .
mInviteButton.setEnabled(false) <- .
------------------------------------
Lcom/android/im/app/SignoutActivity;.onStop()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/BlockedContactsActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
setContentView(R.layout.blocked_contacts_activity) <- .
------------------------------------
Lcom/android/im/app/ContactsPickerActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/ChatView$11348;.onClick(Landroid/view/View;)V
CHAINS:
mScreen.finish() <- declineInvitation() <- .
------------------------------------
Lcom/android/im/app/UserPresenceView$7114;.onFocusChange(Landroid/view/View;Z)V
CHAINS:
statusView.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(-1,newStatusText) <- updateStatusText() <- .
statusEdit.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(-1,newStatusText) <- updateStatusText() <- .
------------------------------------
Lcom/android/im/app/SignoutActivity$2438;.run()V
CHAINS:
finish() <- signOut(providerId,accountId) <- .
------------------------------------
Lcom/android/im/app/ContactListActivity$MyHandler;.handleMessage(Landroid/os/Message;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity;.onStop()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/ContactListActivity;.onDestroy()V
CHAINS:
statusView.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- mPresenceView.setConnection(conn) <- mContactListView.setConnection(null) <- .
statusEdit.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- mPresenceView.setConnection(conn) <- mContactListView.setConnection(null) <- .
------------------------------------
Lcom/android/im/app/ChatView$ChatViewHandler;.handleMessage(Landroid/os/Message;)V
CHAINS:
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- .
------------------------------------
Lcom/android/im/app/AccountActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/NewChatActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.chat_view) <- .
findViewById(R.id.chatView) <- .
------------------------------------
Lcom/android/im/app/SignoutActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
------------------------------------
Lcom/android/im/app/ImUrlActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/im/app/NewChatActivity$14823;.run()V
CHAINS:
mScreen.finish() <- mChatView.bindChat(chatId) <- .
mScreen.finish() <- updateChat() <- mChatView.bindChat(chatId) <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(chatId) <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(chatId) <- .
mStatusIcon.setVisibility(VISIBLE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(chatId) <- .
mStatusIcon.setVisibility(GONE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(chatId) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(chatId) <- .
------------------------------------
Lcom/android/im/app/AccountActivity$3244;.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
CHAINS:
mBtnSignIn.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mKeepSignIn.setEnabled(rememberPass) <- updateWidgetState() <- .
mRememberPass.setEnabled(hasNameAndPassword) <- updateWidgetState() <- .
mEditPass.setEnabled(goodUsername) <- updateWidgetState() <- .
------------------------------------
Lcom/android/im/app/UserPresenceView$6522;.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
CHAINS:
statusView.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(-1,newStatusText) <- updateStatusText() <- .
statusEdit.setVisibility(View.VISIBLE) <- initStatusBar(mProviderId) <- updateView() <- updatePresence(-1,newStatusText) <- updateStatusText() <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$5862;.onClick(Landroid/view/View;)V
CHAINS:
mActivity.finish() <- select(c,position) <- .
mActivity.startActivity(intent) <- select(c,position) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher;.onResume()V
CHAINS:
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.updateTimes() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.updateTimes() <- .
------------------------------------
Lcom/android/im/app/ChatView$8657;.run()V
CHAINS:
mScreen.finish() <- updateChat() <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- updateChat() <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- updateChat() <- .
mStatusIcon.setVisibility(VISIBLE) <- setStatusIcon() <- updateChat() <- .
mStatusIcon.setVisibility(GONE) <- setStatusIcon() <- updateChat() <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
finish() <- .
setContentView(R.layout.signing_in_activity) <- .
findViewById(R.id.splashscr) <- .
------------------------------------
Lcom/android/im/app/ImUrlActivity$2296;.run()V
CHAINS:
finish() <- handleIntent() <- .
startActivity(i) <- openChat(providerId,accountId) <- handleIntent() <- .
startActivity(intent) <- showContactList(accountId) <- handleIntent() <- .
startActivity(intent) <- signInAccount(accountId) <- handleIntent() <- .
startActivity(intent) <- signInAccount(accountId) <- handleIntent() <- .
startActivity(intent) <- editAccount(accountId) <- handleIntent() <- .
startActivity(intent) <- addAccount(providerId) <- handleIntent() <- .
------------------------------------
Lcom/android/im/app/SigningInActivity$MyConnectionListener;.onConnectionStateChange(LIImConnection;ILcom/android/im/engine/ImErrorInfo;)V
CHAINS:
finish() <- handleConnectionEvent(state,error) <- .
startActivity(intent) <- handleConnectionEvent(state,error) <- .
------------------------------------
Lcom/android/im/app/AddContactActivity$8705;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mInviteButton.setEnabled(s.length() != 0) <- .
------------------------------------
Lcom/android/im/app/NewChatActivity;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
finish() <- resolveIntent(intent) <- .
finish() <- resolveIntent(intent) <- .
mScreen.finish() <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mScreen.finish() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mScreen.finish() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mStatusWarningView.setVisibility(visibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mChatSwitcherDialog.show() <- mChatSwitcher.open() <- resolveIntent(intent) <- .
mWarningIcon.setVisibility(iconVisibility) <- updateWarningView() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mStatusIcon.setVisibility(VISIBLE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mStatusIcon.setVisibility(GONE) <- setStatusIcon() <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mSendButton.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(false) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_SUBSCRIPTION) <- mChatView.bindSubscription(providerId,from) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_INVITATION) <- mChatView.bindInvitation(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
mEdtInput.setEnabled(enabled) <- setChatViewEnabled(true) <- setViewType(VIEW_TYPE_CHAT) <- updateChat() <- mChatView.bindChat(ContentUris.parseId(data)) <- resolveIntent(intent) <- .
------------------------------------
Lcom/android/im/app/LandingPage;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- .
startActivity(getCreateAccountIntent()) <- .
startActivity(intent) <- .
startActivity(getEditAccountIntent()) <- .
startActivity(intent) <- signIn(accountId) <- .
startActivity(intent) <- signIn(accountId) <- .
------------------------------------
Lcom/android/im/app/LandingPage;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
startActivity(intent) <- signIn(accountId) <- .
startActivity(intent) <- signIn(accountId) <- .
startActivity(intent) <- signIn(accountId) <- .
startActivity(intent) <- signIn(accountId) <- .
------------------------------------
Lcom/android/im/app/ChatSwitcher$3120;.onChanged()V
CHAINS:
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View view){
    select(c,position);
  }
}
) <- updateViewListeners(v,c,pos) <- mChatSwitcherDialog.update() <- update() <- .
tv.setVisibility(mPreferMenuShortcut ? View.GONE : View.VISIBLE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
shortcutView.setVisibility(mPreferMenuShortcut ? View.VISIBLE : View.GONE) <- mSwitcherAdapter.bindView(v,mActivity,c) <- mChatSwitcherDialog.update() <- update() <- .
mEmptyView.setVisibility(pos > 0 || !mOkToShowEmptyView ? View.GONE : View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
mViews.get(i).setVisibility(View.GONE) <- mChatSwitcherDialog.update() <- update() <- .
v.setVisibility(View.VISIBLE) <- mChatSwitcherDialog.update() <- update() <- .
------------------------------------
Lcom/android/im/app/ContactListView;.viewContactPresenceAtPostion(J)V
CHAINS:
mScreen.startActivity(i) <- viewContactPresence(getContactAtPosition(packedPosition)) <- .
------------------------------------
Lcom/android/im/app/SigningInActivity$10540;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/im/app/ContactListTreeAdapter$ListTreeAdapter;.bindChildView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V
CHAINS:
mTimeStamp.setVisibility(GONE) <- bind(cursor,underLineText,true,scrolling) <- ((ContactView)view).bind(cursor,null,isScrolling()) <- .
mTimeStamp.setVisibility(VISIBLE) <- bind(cursor,underLineText,true,scrolling) <- ((ContactView)view).bind(cursor,null,isScrolling()) <- .
------------------------------------
Lcom/android/im/app/ContactListFilterView;.onFinishInflate()V
CHAINS:
mContactListView.setOnItemClickListener(new OnItemClickListener(){
  public void onItemClick(  AdapterView parent,  View view,  int position,  long id){
    if (mContext instanceof ContactListActivity) {
      ContactListActivity list=(ContactListActivity)mContext;
      mContactListView.setSelection(position);
      Cursor c=(Cursor)mContactListView.getSelectedItem();
      list.mContactListView.startChat(c);
      list.showContactListView();
    }
  }
}
) <- .
------------------------------------
------------------------------------
Lcom/android/im/app/ChooseAccountActivity;
------------------------------------
Lcom/android/im/app/ImUrlActivity;
------------------------------------
Lcom/android/im/app/BlockedContactsActivity;
------------------------------------
Lcom/android/im/app/UserPresenceView$StatusIconAdapter;
------------------------------------
Lcom/android/im/app/AddContactActivity;
------------------------------------
Lcom/android/im/app/LandingPage;
------------------------------------
Lcom/android/im/app/NewChatActivity;
------------------------------------
Lcom/android/im/app/SettingActivity;
------------------------------------
Lcom/android/im/app/PreferenceActivity;
------------------------------------
Lcom/android/im/app/ContactsPickerActivity;
------------------------------------
Lcom/android/im/app/ContactListActivity;
------------------------------------
Lcom/android/im/app/SignoutActivity;
------------------------------------
Lcom/android/im/app/ImageListAdapter;
------------------------------------
Lcom/android/im/app/SigningInActivity;
------------------------------------
Lcom/android/im/app/AccountActivity;
------------------------------------
Lcom/android/im/app/SimpleInputActivity;
------------------------------------
Lcom/android/im/app/ContactPresenceActivity;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Music
start doc
end doc
Lcom/android/music/PlaylistBrowserActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
startActivity(intent) <- .
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/music/QueryBrowserActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/MusicPicker;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
getListView() <- setSelected(mCursor) <- .
getListView() <- setSelected(mCursor) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$12720;.handleMessage(Landroid/os/Message;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
finish() <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
getListView() <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
------------------------------------
Lcom/android/music/AudioPreview;.onUserLeaveHint()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/ScanningProgress;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.scanning_nosdcard) <- .
setContentView(R.layout.scanning) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$45909;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
mAlbum.setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
mAlbum.setVisibility(View.GONE) <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity_expanding) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- init(mArtistCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- init(mArtistCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- init(mArtistCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- init(mArtistCursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mArtistCursor) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$16154;.onRepeat(Landroid/view/View;JI)V
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanForward(repcnt,howlong) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanForward(repcnt,howlong) <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onChildClick(Landroid/widget/ExpandableListView;Landroid/view/View;IIJ)Z
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/music/QueryBrowserActivity;.onDestroy()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/AudioPreview$4674;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
mTextLine2.setVisibility(View.VISIBLE) <- setNames() <- .
mTextLine2.setVisibility(View.GONE) <- setNames() <- .
------------------------------------
Lcom/android/music/RenamePlaylist$2087;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/MusicPicker;.onStop()V
CHAINS:
mListContainer.setVisibility(View.VISIBLE) <- makeListShown() <- mAdapter.changeCursor(null) <- .
mProgressContainer.setVisibility(View.GONE) <- makeListShown() <- mAdapter.changeCursor(null) <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivityForResult(intent,RENAME_PLAYLIST) <- .
startActivityForResult(intent,CHANGE_WEEKS) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onResume()V
CHAINS:
mAlbum.setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
mAlbum.setVisibility(View.GONE) <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
------------------------------------
Lcom/android/music/tests/MusicPlayerStability;.testPlay30sMP3()V|Ljava/lang/Exception;
CHAINS:
getActivity().getListView() <- .
------------------------------------
Lcom/android/music/MediaPickerActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/music/MusicPicker;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.music_picker) <- .
mCancelButton.setOnClickListener(this) <- .
mOkayButton.setOnClickListener(this) <- .
finish() <- .
findViewById(R.id.cancelButton) <- .
findViewById(R.id.okayButton) <- .
findViewById(R.id.listContainer) <- .
findViewById(R.id.progressContainer) <- .
getListView() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- doPauseResume() <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanForward(repcnt,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanBackward(repcnt,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- seekMethod2(keyCode) <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- seekMethod1(keyCode) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- doPauseResume() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanForward(repcnt,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanBackward(repcnt,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- seekMethod2(keyCode) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- seekMethod1(keyCode) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
finish() <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
finish() <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
getListView() <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
------------------------------------
Lcom/android/music/QueryBrowserActivity$QueryListAdapter$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;.onResume()V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
------------------------------------
Lcom/android/music/TouchInterceptor;.onInterceptTouchEvent(Landroid/view/MotionEvent;)Z
CHAINS:
mDragView.setVisibility(GONE) <- stopDragging() <- startDragging(bitmap,x,y) <- .
mDragView.setVisibility(GONE) <- stopDragging() <- .
------------------------------------
Lcom/android/music/RenamePlaylist$5843;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/RenamePlaylist;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.create_playlist) <- .
mSaveButton.setEnabled(true) <- setSaveButton() <- .
mSaveButton.setEnabled(false) <- setSaveButton() <- .
((Button)findViewById(R.id.cancel)).setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    finish();
  }
}
) <- .
mSaveButton.setOnClickListener(mOpenClicked) <- .
mPlaylist.addTextChangedListener(mTextWatcher) <- .
finish() <- .
findViewById(R.id.cancel) <- .
findViewById(R.id.create) <- .
findViewById(R.id.playlist) <- .
findViewById(R.id.prompt) <- .
------------------------------------
Lcom/android/music/MusicUtils$46090;.onClick(Landroid/view/View;)V
CHAINS:
a.startActivity(intent) <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.startActivity(intent) <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.finish() <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.findViewById(R.id.buttonbar) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
------------------------------------
Lcom/android/music/DeleteItems$1656;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- init(mPlaylistCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- init(mPlaylistCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- init(mPlaylistCursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mPlaylistCursor) <- .
getListView() <- init(mPlaylistCursor) <- .
getListView() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$TrackListAdapter$TrackQueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- mActivity.init(cursor,cookie != null) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor,cookie != null) <- .
getListView() <- mActivity.init(cursor,cookie != null) <- .
------------------------------------
Lcom/android/music/DeleteItems$2020;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onStart()V
CHAINS:
mAlbum.setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
mAlbum.setVisibility(View.GONE) <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
finish() <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- .
((View)mAlbumName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
((View)mArtistName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- .
------------------------------------
Lcom/android/music/tests/functional/TestPlaylist;.testRenamePlaylist()V|Ljava/lang/Exception;
CHAINS:
getActivity().startActivity(intent) <- addNewPlaylist(MusicPlayerNames.ORIGINAL_PLAYLIST_NAME) <- .
trackBrowserActivity.finish() <- addNewPlaylist(MusicPlayerNames.ORIGINAL_PLAYLIST_NAME) <- .
------------------------------------
Lcom/android/music/AudioPreview$PreviewPlayer;.onPrepared(Landroid/media/MediaPlayer;)V
CHAINS:
findViewById(R.id.playpause) <- updatePlayPause() <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
findViewById(R.id.titleandbuttons) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
findViewById(R.id.spinner) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
mTextLine2.setVisibility(View.VISIBLE) <- setNames() <- mActivity.onPrepared(mp) <- .
mTextLine2.setVisibility(View.GONE) <- setNames() <- mActivity.onPrepared(mp) <- .
v.setVisibility(View.VISIBLE) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
mLoadingText.setVisibility(View.GONE) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
mSeekBar.setVisibility(View.VISIBLE) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
pb.setVisibility(View.GONE) <- showPostPrepareUI() <- mActivity.onPrepared(mp) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.audio_player) <- .
mRepeatButton.setOnClickListener(mRepeatListener) <- .
mShuffleButton.setOnClickListener(mShuffleListener) <- .
mQueueButton.setOnClickListener(mQueueListener) <- .
mNextButton.setOnClickListener(mNextListener) <- .
mPauseButton.setOnClickListener(mPauseListener) <- .
mPrevButton.setOnClickListener(mPrevListener) <- .
findViewById(R.id.repeat) <- .
findViewById(R.id.shuffle) <- .
findViewById(R.id.curplaylist) <- .
findViewById(R.id.next) <- .
findViewById(R.id.pause) <- .
findViewById(R.id.prev) <- .
findViewById(R.id.trackname) <- .
findViewById(R.id.albumname) <- .
findViewById(R.id.artistname) <- .
findViewById(R.id.album) <- .
findViewById(android.R.id.progress) <- .
findViewById(R.id.totaltime) <- .
findViewById(R.id.currenttime) <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- init(mAlbumCursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- init(mAlbumCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- init(mAlbumCursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- init(mAlbumCursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mAlbumCursor) <- .
getListView() <- init(mAlbumCursor) <- .
getListView() <- .
------------------------------------
Lcom/android/music/MusicPicker$TrackListAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
iv.setVisibility(View.GONE) <- .
iv.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$23417;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- .
finish() <- .
getListView() <- .
------------------------------------
Lcom/android/music/VideoBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity) <- init() <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init() <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init() <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init() <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init() <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init() <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init() <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init() <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init() <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init() <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init() <- .
------------------------------------
Lcom/android/music/MusicPicker;.onCompletion(Landroid/media/MediaPlayer;)V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(Intent.createChooser(i,title)) <- doSearch() <- .
startActivityForResult(intent,-1) <- .
startActivityForResult(intent,NEW_PLAYLIST) <- .
v.setVisibility(View.VISIBLE) <- removePlaylistItem(mSelectedPosition) <- .
v.setVisibility(View.GONE) <- removePlaylistItem(mSelectedPosition) <- .
------------------------------------
Lcom/android/music/MusicPicker;.onSaveInstanceState(Landroid/os/Bundle;)V
CHAINS:
getListView() <- .
getListView() <- .
------------------------------------
Lcom/android/music/AudioPreview;.onCompletion(Landroid/media/MediaPlayer;)V
CHAINS:
findViewById(R.id.playpause) <- updatePlayPause() <- .
------------------------------------
Lcom/android/music/WeekSelector;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.weekpicker) <- .
((Button)findViewById(R.id.cancel)).setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    setResult(RESULT_CANCELED);
    finish();
  }
}
) <- .
((Button)findViewById(R.id.set)).setOnClickListener(mListener) <- .
findViewById(R.id.cancel) <- .
findViewById(R.id.set) <- .
findViewById(R.id.weeks) <- .
------------------------------------
Lcom/android/music/MediaPickerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity) <- init() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(this) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(mTrackCursor,false) <- .
finish() <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
finish() <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(this) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(mTrackCursor,false) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(this) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(mTrackCursor,false) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(mTrackCursor,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mTrackCursor,false) <- .
getListView() <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
getListView() <- init(ret,false) <- getTrackCursor(mAdapter.getQueryHandler(),null,true) <- .
getListView() <- init(mTrackCursor,false) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$TrackListAdapter;.newView(Landroid/content/Context;Landroid/database/Cursor;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
iv.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/music/DeleteItems;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.confirm_delete) <- .
((Button)findViewById(R.id.cancel)).setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    finish();
  }
}
) <- .
mButton.setOnClickListener(mButtonClicked) <- .
findViewById(R.id.cancel) <- .
findViewById(R.id.delete) <- .
findViewById(R.id.prompt) <- .
------------------------------------
Lcom/android/music/WeekSelector$2349;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
CHAINS:
finish() <- removeItem() <- .
v.setVisibility(View.VISIBLE) <- removeItem() <- .
v.setVisibility(View.GONE) <- removeItem() <- .
getListView() <- moveItem(false) <- .
getListView() <- moveItem(true) <- .
------------------------------------
Lcom/android/music/CreatePlaylist$2758;.onTextChanged(Ljava/lang/CharSequence;III)V
CHAINS:
mSaveButton.setEnabled(true) <- .
mSaveButton.setEnabled(false) <- .
------------------------------------
Lcom/android/music/AudioPreview;.playPauseClicked(Landroid/view/View;)V
CHAINS:
findViewById(R.id.playpause) <- updatePlayPause() <- .
------------------------------------
Lcom/android/music/MediaPickerActivity$PickListAdapter;.newView(Landroid/content/Context;Landroid/database/Cursor;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
iv.setVisibility(View.GONE) <- .
iv.setVisibility(View.VISIBLE) <- .
tv.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/music/WeekSelector$1897;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/MusicUtils$45459;.onFocusChange(Landroid/view/View;Z)V
CHAINS:
a.startActivity(intent) <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.startActivity(intent) <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.finish() <- activateTab(a,id) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
a.findViewById(R.id.buttonbar) <- processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId()) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$15908;.onRepeat(Landroid/view/View;JI)V
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanBackward(repcnt,howlong) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanBackward(repcnt,howlong) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$13236;.onProgressChanged(Landroid/widget/SeekBar;IZ)V
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity$ArtistAlbumListAdapter$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- mActivity.init(cursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.artisttab) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
------------------------------------
Lcom/android/music/QueryBrowserActivity;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
startActivity(i) <- .
startActivity(i) <- .
setContentView(R.layout.query_activity) <- .
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
finish() <- .
finish() <- .
finish() <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(mQueryCursor) <- .
getListView() <- .
------------------------------------
Lcom/android/music/MusicBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
a.startActivity(intent) <- MusicUtils.activateTab(this,activeTab) <- .
a.startActivity(intent) <- MusicUtils.activateTab(this,activeTab) <- .
a.finish() <- MusicUtils.activateTab(this,activeTab) <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onServiceDisconnected(Landroid/content/ComponentName;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity$7068;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(AlbumBrowserActivity.this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(AlbumBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(AlbumBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(AlbumBrowserActivity.this) <- .
getListView() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$TrackListAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
iv.setVisibility(View.GONE) <- .
iv.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/music/MusicPicker$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
mListContainer.setVisibility(View.VISIBLE) <- makeListShown() <- mAdapter.changeCursor(cursor) <- .
mProgressContainer.setVisibility(View.GONE) <- makeListShown() <- mAdapter.changeCursor(cursor) <- .
getListView() <- .
getListView() <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity$PlaylistListAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
iv.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivityForResult(intent,SAVE_AS_PLAYLIST) <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;.onDestroy()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onDestroy()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/tests/stress/MusicPlaybackStress;.testPlayAllSongs()V
CHAINS:
mediaPlaybackActivity.finish() <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(Intent.createChooser(i,title)) <- doSearch() <- .
startActivityForResult(intent,-1) <- .
startActivityForResult(intent,NEW_PLAYLIST) <- .
------------------------------------
Lcom/android/music/RenamePlaylist$3302;.onTextChanged(Ljava/lang/CharSequence;III)V
CHAINS:
mSaveButton.setEnabled(true) <- setSaveButton() <- .
mSaveButton.setEnabled(false) <- setSaveButton() <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onDestroy()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onLongClick(Landroid/view/View;)Z
CHAINS:
startActivity(Intent.createChooser(i,title)) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$14983;.onClick(Landroid/view/View;)V
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- doPauseResume() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- doPauseResume() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$21537;.remove(I)V
CHAINS:
v.setVisibility(View.VISIBLE) <- removePlaylistItem(which) <- .
v.setVisibility(View.GONE) <- removePlaylistItem(which) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$38347;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
startActivity(intent) <- .
mAlbum.setVisibility(View.VISIBLE) <- updateTrackInfo() <- startPlayback() <- .
mAlbum.setVisibility(View.GONE) <- updateTrackInfo() <- startPlayback() <- .
mQueueButton.setVisibility(View.VISIBLE) <- .
mShuffleButton.setVisibility(View.VISIBLE) <- .
mRepeatButton.setVisibility(View.VISIBLE) <- .
finish() <- updateTrackInfo() <- startPlayback() <- .
finish() <- updateTrackInfo() <- startPlayback() <- .
finish() <- .
((View)mAlbumName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- startPlayback() <- .
((View)mArtistName.getParent()).setVisibility(View.VISIBLE) <- updateTrackInfo() <- startPlayback() <- .
((View)mAlbumName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- startPlayback() <- .
((View)mArtistName.getParent()).setVisibility(View.INVISIBLE) <- updateTrackInfo() <- startPlayback() <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- startPlayback() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- startPlayback() <- .
------------------------------------
Lcom/android/music/CreatePlaylist$6141;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- .
startActivityForResult(i,EFFECTS_PANEL) <- .
startActivityForResult(intent,-1) <- .
startActivityForResult(intent,NEW_PLAYLIST) <- .
finish() <- .
------------------------------------
Lcom/android/music/AudioPreview;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- .
findViewById(R.id.playpause) <- updatePlayPause() <- .
findViewById(R.id.playpause) <- updatePlayPause() <- .
findViewById(R.id.playpause) <- updatePlayPause() <- .
------------------------------------
Lcom/android/music/AudioPreview$9694;.onAudioFocusChange(I)V
CHAINS:
findViewById(R.id.playpause) <- updatePlayPause() <- .
------------------------------------
Lcom/android/music/TouchInterceptor;.onTouchEvent(Landroid/view/MotionEvent;)Z
CHAINS:
mDragView.setVisibility(GONE) <- stopDragging() <- .
vv.setVisibility(visibility) <- doExpansion() <- .
v.setVisibility(View.VISIBLE) <- unExpandViews(false) <- .
v.setVisibility(View.VISIBLE) <- unExpandViews(true) <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity$7580;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(ArtistAlbumBrowserActivity.this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(ArtistAlbumBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(ArtistAlbumBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(ArtistAlbumBrowserActivity.this) <- .
------------------------------------
Lcom/android/music/CreatePlaylist;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.create_playlist) <- .
((Button)findViewById(R.id.cancel)).setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    finish();
  }
}
) <- .
mSaveButton.setOnClickListener(mOpenClicked) <- .
mPlaylist.addTextChangedListener(mTextWatcher) <- .
finish() <- .
findViewById(R.id.cancel) <- .
findViewById(R.id.create) <- .
findViewById(R.id.playlist) <- .
findViewById(R.id.prompt) <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(Intent.createChooser(i,title)) <- doSearch() <- .
startActivityForResult(intent,-1) <- .
startActivityForResult(intent,NEW_PLAYLIST) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.media_picker_activity) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- .
getListView() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity;.onKeyUp(ILandroid/view/KeyEvent;)Z
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanForward(-1,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- scanBackward(-1,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanForward(-1,event.getEventTime() - event.getDownTime()) <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- scanBackward(-1,event.getEventTime() - event.getDownTime()) <- .
------------------------------------
Lcom/android/music/TouchInterceptor$3702;.onFling(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z
CHAINS:
mDragView.setVisibility(GONE) <- stopDragging() <- .
v.setVisibility(View.VISIBLE) <- unExpandViews(true) <- .
------------------------------------
Lcom/android/music/MusicPicker;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
finish() <- .
------------------------------------
Lcom/android/music/AudioPreview;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.audiopreview) <- .
finish() <- .
finish() <- .
finish() <- .
findViewById(R.id.playpause) <- updatePlayPause() <- showPostPrepareUI() <- .
findViewById(R.id.titleandbuttons) <- showPostPrepareUI() <- .
findViewById(R.id.spinner) <- showPostPrepareUI() <- .
findViewById(R.id.progress) <- .
findViewById(R.id.loading) <- .
findViewById(R.id.line2) <- .
findViewById(R.id.line1) <- .
mTextLine2.setVisibility(View.VISIBLE) <- setNames() <- .
mTextLine2.setVisibility(View.GONE) <- setNames() <- .
v.setVisibility(View.VISIBLE) <- showPostPrepareUI() <- .
mLoadingText.setVisibility(View.GONE) <- showPostPrepareUI() <- .
mLoadingText.setVisibility(View.GONE) <- .
mSeekBar.setVisibility(View.VISIBLE) <- showPostPrepareUI() <- .
pb.setVisibility(View.GONE) <- showPostPrepareUI() <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity$3454;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
finish() <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(PlaylistBrowserActivity.this) <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity$AlbumListAdapter$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- mActivity.init(cursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.albumtab) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
getListView() <- mActivity.init(cursor) <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(this) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$TrackListAdapter;.runQueryOnBackgroundThread(Ljava/lang/CharSequence;)Landroid/database/Cursor;
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
finish() <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.songtab) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
getListView() <- init(ret,false) <- mActivity.getTrackCursor(mQueryHandler,s,false) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$45384;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/QueryBrowserActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/music/ScanningProgress$1080;.handleMessage(Landroid/os/Message;)V
CHAINS:
finish() <- .
finish() <- .
------------------------------------
Lcom/android/music/CreatePlaylist$2062;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/tests/functional/TestPlaylist;.testDeletePlaylist()V|Ljava/lang/Exception;
CHAINS:
getActivity().startActivity(intent) <- addNewPlaylist(MusicPlayerNames.DELETE_PLAYLIST_NAME) <- .
trackBrowserActivity.finish() <- addNewPlaylist(MusicPlayerNames.DELETE_PLAYLIST_NAME) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onResume()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/PlaylistBrowserActivity$PlaylistListAdapter$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
a.startActivityForResult(intent,Defs.SCAN_DONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    processTabClick((Activity)ll.getContext(),v,ll.getChildAt(sActiveTabIndex).getId());
  }
}
) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.buttonbar) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(android.R.id.list) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_icon) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
a.findViewById(R.id.sd_message) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
ll.setVisibility(View.VISIBLE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- mActivity.init(cursor) <- .
ll.setVisibility(View.GONE) <- MusicUtils.updateButtonBar(this,R.id.playlisttab) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.hideDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.GONE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
v.setVisibility(View.VISIBLE) <- MusicUtils.displayDatabaseError(this) <- mActivity.init(cursor) <- .
getListView() <- mActivity.init(cursor) <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$23078;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(TrackBrowserActivity.this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(TrackBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(TrackBrowserActivity.this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(TrackBrowserActivity.this) <- .
getListView() <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$44380;.handleMessage(Landroid/os/Message;)V
CHAINS:
mCurrentTime.setVisibility(vis == View.INVISIBLE ? View.VISIBLE : View.INVISIBLE) <- refreshNow() <- .
mCurrentTime.setVisibility(View.VISIBLE) <- refreshNow() <- .
------------------------------------
Lcom/android/music/AlbumBrowserActivity;.onServiceConnected(Landroid/content/ComponentName;Landroid/os/IBinder;)V
CHAINS:
nowPlayingView.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    Context c=v.getContext();
    c.startActivity(new Intent(c,MediaPlaybackActivity.class));
  }
}
) <- MusicUtils.updateNowPlaying(this) <- .
a.findViewById(R.id.nowplaying) <- MusicUtils.updateNowPlaying(this) <- .
nowPlayingView.setVisibility(View.GONE) <- MusicUtils.updateNowPlaying(this) <- .
nowPlayingView.setVisibility(View.VISIBLE) <- MusicUtils.updateNowPlaying(this) <- .
------------------------------------
Lcom/android/music/MediaPlaybackActivity$14287;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(new Intent(Intent.ACTION_EDIT).setDataAndType(Uri.EMPTY,"vnd.android.cursor.dir/track").putExtra("playlist","nowplaying")) <- .
------------------------------------
Lcom/android/music/VideoBrowserActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity$20756;.drop(II)V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;.onServiceDisconnected(Landroid/content/ComponentName;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/AudioPreview;.onError(Landroid/media/MediaPlayer;II)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/music/TrackBrowserActivity;.onServiceDisconnected(Landroid/content/ComponentName;)V
CHAINS:
finish() <- .
------------------------------------
------------------------------------
Lcom/android/music/TrackBrowserActivity;
------------------------------------
Lcom/android/music/ScanningProgress;
------------------------------------
Lcom/android/music/AudioPreview;
------------------------------------
Lcom/android/music/PlaylistBrowserActivity;
------------------------------------
Lcom/android/music/CreatePlaylist;
------------------------------------
Lcom/android/music/RenamePlaylist;
------------------------------------
Lcom/android/music/VideoBrowserActivity;
------------------------------------
Lcom/android/music/DeleteItems;
------------------------------------
Lcom/android/music/AlbumBrowserActivity;
------------------------------------
Lcom/android/music/MediaPickerActivity;
------------------------------------
Lcom/android/music/MediaPlaybackActivity;
------------------------------------
Lcom/android/music/MusicBrowserActivity;
------------------------------------
Lcom/android/music/ArtistAlbumBrowserActivity;
------------------------------------
Lcom/android/music/QueryBrowserActivity;
------------------------------------
Lcom/android/music/MusicPicker;
------------------------------------
Lcom/android/music/WeekSelector;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/MusicFX
start doc
end doc
Lcom/android/musicfx/ActivityMusic$6345;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
findViewById(R.id.bBLayout) <- updateUIHeadset() <- .
findViewById(R.id.bBStrengthSeekBar) <- updateUIHeadset() <- .
findViewById(R.id.bBStrengthText) <- updateUIHeadset() <- .
findViewById(R.id.vILayout) <- updateUIHeadset() <- .
findViewById(R.id.vIStrengthSeekBar) <- updateUIHeadset() <- .
findViewById(R.id.vIStrengthText) <- updateUIHeadset() <- .
((TextView)findViewById(R.id.bBStrengthText)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- .
((TextView)findViewById(R.id.vIStrengthText)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- .
((SeekBar)findViewById(R.id.bBStrengthSeekBar)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- .
((SeekBar)findViewById(R.id.vIStrengthSeekBar)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- .
------------------------------------
Lcom/android/musicfx/ActivityMusic;.onStartTrackingTouch(Lcom/android/musicfx/seekbar/SeekBar;)V
CHAINS:
findViewById(R.id.eqSpinner) <- .
------------------------------------
Lcom/android/musicfx/ActivityMusic;.onCreate(Landroid/os/Bundle;)V
CHAINS:
eqcontainer.findViewById(EQViewElementIds[band][1]).setVisibility(View.GONE) <- equalizerBandsInit(findViewById(R.id.eqcontainer)) <- .
eqcontainer.findViewById(EQViewElementIds[band][0]).setVisibility(View.GONE) <- equalizerBandsInit(findViewById(R.id.eqcontainer)) <- .
((TextView)findViewById(R.id.noEffectsTextView)).setVisibility(View.VISIBLE) <- .
viewGroup.setVisibility(View.GONE) <- .
spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
  @Override public void onItemSelected(  AdapterView<?> parent,  View view,  int position,  long id){
    if (position != mEQPresetPrevious) {
      equalizerSetPreset(position);
    }
    mEQPresetPrevious=position;
  }
  @Override public void onNothingSelected(  AdapterView<?> parent){
  }
}
) <- equalizerSpinnerInit((Spinner)findViewById(R.id.eqSpinner)) <- .
spinner.setOnItemSelectedListener(new OnItemSelectedListener(){
  @Override public void onItemSelected(  AdapterView<?> parent,  View view,  int position,  long id){
    if (position != mPRPresetPrevious) {
      presetReverbSetPreset(position);
    }
    mPRPresetPrevious=position;
  }
  @Override public void onNothingSelected(  AdapterView<?> parent){
  }
}
) <- reverbSpinnerInit((Spinner)findViewById(R.id.prSpinner)) <- .
findViewById(R.id.minLevelText) <- equalizerBandsInit(findViewById(R.id.eqcontainer)) <- .
findViewById(R.id.centerLevelText) <- equalizerBandsInit(findViewById(R.id.eqcontainer)) <- .
findViewById(R.id.maxLevelText) <- equalizerBandsInit(findViewById(R.id.eqcontainer)) <- .
findViewById(R.id.noEffectsTextView) <- .
findViewById(R.id.prSpinner) <- .
findViewById(R.id.eqcontainer) <- .
findViewById(R.id.eqSpinner) <- .
findViewById(R.id.bBStrengthSeekBar) <- .
findViewById(R.id.bBLayout) <- .
findViewById(R.id.vIStrengthToggle) <- .
findViewById(R.id.vIStrengthSeekBar) <- .
findViewById(R.id.vILayout) <- .
findViewById(R.id.contentSoundEffects) <- .
setContentView(R.layout.music_main) <- .
finish() <- .
sw.setOnCheckedChangeListener(new OnCheckedChangeListener(){
  @Override public void onCheckedChanged(  final CompoundButton buttonView,  final boolean isChecked){
    ControlPanelEffect.setParameterBoolean(mContext,mCallingPackageName,mAudioSession,ControlPanelEffect.Key.virt_enabled,isChecked);
  }
}
) <- .
mToggleSwitch.setOnCheckedChangeListener(new OnCheckedChangeListener(){
  @Override public void onCheckedChanged(  final CompoundButton buttonView,  final boolean isChecked){
    ControlPanelEffect.setParameterBoolean(mContext,mCallingPackageName,mAudioSession,ControlPanelEffect.Key.global_enabled,isChecked);
    setEnabledAllChildren(viewGroup,isChecked);
    updateUIHeadset();
  }
}
) <- .
------------------------------------
Lcom/android/musicfx/ActivityMusic$11851;.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
CHAINS:
findViewById(R.id.bBLayout) <- updateUIHeadset() <- .
findViewById(R.id.bBStrengthSeekBar) <- updateUIHeadset() <- .
findViewById(R.id.bBStrengthText) <- updateUIHeadset() <- .
findViewById(R.id.vILayout) <- updateUIHeadset() <- .
findViewById(R.id.vIStrengthSeekBar) <- updateUIHeadset() <- .
findViewById(R.id.vIStrengthText) <- updateUIHeadset() <- .
((TextView)findViewById(R.id.bBStrengthText)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- .
((TextView)findViewById(R.id.vIStrengthText)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- .
((SeekBar)findViewById(R.id.bBStrengthSeekBar)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- .
((SeekBar)findViewById(R.id.vIStrengthSeekBar)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- .
view.setEnabled(enabled) <- setEnabledAllChildren(vg,enabled) <- setEnabledAllChildren(viewGroup,isChecked) <- .
view.setEnabled(enabled) <- setEnabledAllChildren(viewGroup,isChecked) <- .
------------------------------------
Lcom/android/musicfx/ActivityMusic;.onResume()V
CHAINS:
sw.setVisibility(View.GONE) <- updateUI() <- .
findViewById(R.id.bBLayout) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.bBStrengthSeekBar) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.bBStrengthText) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.vILayout) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.vIStrengthSeekBar) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.vIStrengthText) <- updateUIHeadset() <- updateUI() <- .
findViewById(R.id.prSpinner) <- updateUI() <- .
findViewById(R.id.bBStrengthSeekBar) <- updateUI() <- .
findViewById(R.id.vIStrengthToggle) <- updateUI() <- .
findViewById(R.id.vIStrengthSeekBar) <- updateUI() <- .
findViewById(R.id.contentSoundEffects) <- updateUI() <- .
((TextView)findViewById(R.id.bBStrengthText)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- updateUI() <- .
((TextView)findViewById(R.id.vIStrengthText)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- updateUI() <- .
((SeekBar)findViewById(R.id.bBStrengthSeekBar)).setEnabled(mIsHeadsetOn) <- updateUIHeadset() <- updateUI() <- .
((SeekBar)findViewById(R.id.vIStrengthSeekBar)).setEnabled(mIsHeadsetOn || !mVirtualizerIsHeadphoneOnly) <- updateUIHeadset() <- updateUI() <- .
view.setEnabled(enabled) <- setEnabledAllChildren((ViewGroup)findViewById(R.id.contentSoundEffects),isEnabled) <- updateUI() <- .
view.setEnabled(enabled) <- setEnabledAllChildren(vg,enabled) <- setEnabledAllChildren((ViewGroup)findViewById(R.id.contentSoundEffects),isEnabled) <- updateUI() <- .
------------------------------------
Lcom/android/musicfx/Compatibility$Redirector;.onCreate(Landroid/os/Bundle;)V
CHAINS:
startActivity(i) <- .
finish() <- .
------------------------------------
------------------------------------
Lcom/android/musicfx/ActivityMusic;
------------------------------------
Lcom/android/musicfx/Compatibility$Redirector;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/PackageInstaller
start doc
end doc
Lcom/android/packageinstaller/UninstallerActivity$3783;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$12837;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$11453;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$12282;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$14419;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/UninstallerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
activityText.setVisibility(View.VISIBLE) <- .
findViewById(R.id.cancel_button) <- .
findViewById(R.id.ok_button) <- .
findViewById(R.id.uninstall_activity_snippet) <- .
findViewById(R.id.activity_text) <- .
findViewById(R.id.uninstall_confirm) <- .
mCancel.setOnClickListener(this) <- .
mOk.setOnClickListener(this) <- .
setContentView(R.layout.uninstall_confirm) <- .
------------------------------------
Lcom/android/packageinstaller/UninstallAppProgress$2242;.handleMessage(Landroid/os/Message;)V
CHAINS:
mOkPanel.setVisibility(View.VISIBLE) <- .
mDeviceManagerButton.setVisibility(View.VISIBLE) <- .
mProgressBar.setVisibility(View.INVISIBLE) <- .
finish() <- setResultAndFinish(mResultCode) <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mInstallConfirm.setVisibility(View.INVISIBLE) <- .
mInstallConfirm.setVisibility(View.VISIBLE) <- startInstallConfirm() <- initiateInstall() <- .
tabHost.setVisibility(View.GONE) <- startInstallConfirm() <- initiateInstall() <- .
pContext.findViewById(snippetId) <- PackageUtil.initSnippetForNewApp(this,as,R.id.app_snippet) <- .
findViewById(R.id.install_confirm_panel) <- .
findViewById(R.id.cancel_button) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.ok_button) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.install_confirm_question) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.divider) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.filler) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.divider) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.tabscontainer) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(R.id.pager) <- startInstallConfirm() <- initiateInstall() <- .
findViewById(android.R.id.tabhost) <- startInstallConfirm() <- initiateInstall() <- .
mCancel.setOnClickListener(this) <- startInstallConfirm() <- initiateInstall() <- .
mOk.setOnClickListener(this) <- startInstallConfirm() <- initiateInstall() <- .
finish() <- .
setContentView(R.layout.install_start) <- .
------------------------------------
Lcom/android/packageinstaller/UninstallAppProgress$6187;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$14714;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mInstallConfirm.setVisibility(View.VISIBLE) <- startInstallConfirm() <- .
tabHost.setVisibility(View.GONE) <- startInstallConfirm() <- .
findViewById(R.id.cancel_button) <- startInstallConfirm() <- .
findViewById(R.id.ok_button) <- startInstallConfirm() <- .
findViewById(R.id.install_confirm_question) <- startInstallConfirm() <- .
findViewById(R.id.divider) <- startInstallConfirm() <- .
findViewById(R.id.filler) <- startInstallConfirm() <- .
findViewById(R.id.divider) <- startInstallConfirm() <- .
findViewById(R.id.tabscontainer) <- startInstallConfirm() <- .
findViewById(R.id.pager) <- startInstallConfirm() <- .
findViewById(android.R.id.tabhost) <- startInstallConfirm() <- .
mCancel.setOnClickListener(this) <- startInstallConfirm() <- .
mOk.setOnClickListener(this) <- startInstallConfirm() <- .
------------------------------------
Lcom/android/packageinstaller/UninstallAppProgress;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- setResultAndFinish(mResultCode) <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(mLaunchIntent) <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mOkPanel.setVisibility(View.INVISIBLE) <- initView() <- .
pContext.findViewById(snippetId) <- PackageUtil.initSnippetForNewApp(this,as,R.id.app_snippet) <- initView() <- .
findViewById(R.id.launch_button) <- initView() <- .
findViewById(R.id.done_button) <- initView() <- .
findViewById(R.id.buttons_panel) <- initView() <- .
findViewById(R.id.progress_bar) <- initView() <- .
findViewById(R.id.center_explanation) <- initView() <- .
findViewById(R.id.center_text) <- initView() <- .
setContentView(R.layout.op_progress) <- initView() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$10825;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivity(launchSettingsIntent) <- launchSettingsAppAndFinish() <- .
finish() <- launchSettingsAppAndFinish() <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress$8863;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity;.onCancel(Landroid/content/DialogInterface;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(newIntent) <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/UninstallerActivity;.onCancel(Landroid/content/DialogInterface;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress$9339;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$10467;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity$13660;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/GrantActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
pContext.findViewById(snippetId) <- PackageUtil.initSnippetForNewApp(this,as,R.id.app_snippet) <- .
findViewById(R.id.pager) <- .
findViewById(android.R.id.tabhost) <- .
findViewById(R.id.cancel_button) <- .
findViewById(R.id.ok_button) <- .
findViewById(R.id.install_confirm_question) <- .
mCancel.setOnClickListener(this) <- .
mOk.setOnClickListener(this) <- .
finish() <- .
finish() <- .
setContentView(R.layout.install_start) <- .
------------------------------------
Lcom/android/packageinstaller/UninstallAppProgress;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mOkPanel.setVisibility(View.INVISIBLE) <- initView() <- .
mDeviceManagerButton.setVisibility(View.GONE) <- initView() <- .
findViewById(R.id.ok_button) <- initView() <- .
findViewById(R.id.ok_panel) <- initView() <- .
findViewById(R.id.progress_bar) <- initView() <- .
findViewById(R.id.device_manager_button) <- initView() <- .
findViewById(R.id.center_text) <- initView() <- .
findViewById(R.id.app_snippet) <- initView() <- .
mOkButton.setOnClickListener(this) <- initView() <- .
mDeviceManagerButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    Intent intent=new Intent();
    intent.setClassName("com.android.settings","com.android.settings.Settings$DeviceAdminSettingsActivity");
    intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(intent);
    finish();
  }
}
) <- initView() <- .
setContentView(R.layout.uninstall_progress) <- initView() <- .
------------------------------------
Lcom/android/packageinstaller/UninstallerActivity$2793;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress;.onCancel(Landroid/content/DialogInterface;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/GrantActivity;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress$2984;.handleMessage(Landroid/os/Message;)V
CHAINS:
mOkPanel.setVisibility(View.VISIBLE) <- .
mExplanationTextView.setVisibility(View.GONE) <- .
mExplanationTextView.setVisibility(View.VISIBLE) <- .
mLaunchButton.setVisibility(View.INVISIBLE) <- .
mLaunchButton.setVisibility(View.VISIBLE) <- .
mProgressBar.setVisibility(View.INVISIBLE) <- .
mDoneButton.setOnClickListener(InstallAppProgress.this) <- .
mLaunchButton.setOnClickListener(InstallAppProgress.this) <- .
mLaunchButton.setEnabled(false) <- .
finish() <- .
------------------------------------
Lcom/android/packageinstaller/UninstallerActivity;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(newIntent) <- startUninstallProgress() <- .
finish() <- .
finish() <- startUninstallProgress() <- .
------------------------------------
------------------------------------
Lcom/android/packageinstaller/UninstallAppProgress;
------------------------------------
Lcom/android/packageinstaller/InstallAppProgress;
------------------------------------
Lcom/android/packageinstaller/PackageInstallerActivity;
------------------------------------
Lcom/android/packageinstaller/GrantActivity;
------------------------------------
Lcom/android/packageinstaller/UninstallerActivity;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Camera2
start doc
end doc
Lcom/android/camera/ui/ZoomView$DecodePartialBitmap;.onPostExecute(Landroid/graphics/Bitmap;)V
CHAINS:
setVisibility(View.GONE) <- showPartiallyDecodedImage(true) <- .
setVisibility(View.VISIBLE) <- showPartiallyDecodedImage(true) <- .
------------------------------------
Lcom/android/camera/CameraActivity$41292;.onPostExecute(Lcom/android/camera/data/MediaDetails;)V
CHAINS:
DetailsDialog.create(CameraActivity.this,mediaDetails).show() <- .
------------------------------------
Lcom/android/camera/functional/VideoCaptureIntentTest$7455;.run()V
CHAINS:
activity.findViewById(R.id.shutter_button) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.onLayout(ZIIII)V
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(true) <- resetZoomView() <- .
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(k) <- stepIfNeeded() <- layoutViewItems(changed) <- .
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(k) <- stepIfNeeded() <- layoutViewItems(changed) <- .
currView.setVisibility(INVISIBLE) <- layoutViewItems(changed) <- .
currView.setVisibility(VISIBLE) <- layoutViewItems(changed) <- .
currView.setVisibility(VISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(changed) <- .
currView.setVisibility(VISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(changed) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(changed) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(changed) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(changed) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(changed) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[k + 1].getId() - 1) <- stepIfNeeded() <- layoutViewItems(changed) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[k - 1].getId() + 1) <- stepIfNeeded() <- layoutViewItems(changed) <- .
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- mController.cancelLoadingZoomedImage() <- resetZoomView() <- .
mZoomView.setVisibility(GONE) <- resetZoomView() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onCaptureCancelled()V
CHAINS:
mActivity.finish() <- .
------------------------------------
Lcom/android/camera/VideoModule;.onReviewDoneClicked(Landroid/view/View;)V
CHAINS:
mActivity.finish() <- doReturnToCaller(true) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onShutterButtonClick()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.GONE) <- mUI.showSurfaceView() <- initializeRecorder() <- startVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mActivity.finish() <- doReturnToCaller(!recordFail) <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(true) <- startVideoRecording() <- .
mSurfaceView.setVisibility(View.VISIBLE) <- mUI.showSurfaceView() <- initializeRecorder() <- startVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(false) <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
------------------------------------
Lcom/android/camera/data/RotationTask;.onPreExecute()V
CHAINS:
mProgress.show() <- .
------------------------------------
Lcom/android/camera/VideoModule;.onInfo(Landroid/media/MediaRecorder;II)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mActivity.finish() <- doReturnToCaller(!recordFail) <- onStopVideoRecording() <- .
mActivity.finish() <- doReturnToCaller(!recordFail) <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
------------------------------------
Lcom/android/camera/CameraActivity$64334;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$82633;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
setVisibility(GONE) <- cancelPartialDecodingTask() <- startPartialDecodingTask(imageRect) <- mZoomView.loadBitmap(uri,orientation,viewRect) <- loadZoomedImage() <- .
------------------------------------
Lcom/android/camera/CameraActivity$33178;.run()V
CHAINS:
mPanoStitchingPanel.setVisibility(View.GONE) <- hidePanoStitchingProgress() <- .
------------------------------------
Lcom/android/camera/functional/CameraTest;.testVideoCaptureIntentFdLeak()V|Ljava/lang/Exception;
CHAINS:
getInstrumentation().startActivitySync(intent).finish() <- .
------------------------------------
Lcom/android/camera/VideoUI;.onSurfaceTextureUpdated(Landroid/graphics/SurfaceTexture;)V
CHAINS:
mPreviewCover.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.enableRecordingLocation(Z)V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(mUpdateSet) <- setCameraParametersWhenIdle(UPDATE_PARAM_PREFERENCE) <- onSharedPreferenceChanged() <- setLocationPreference(enable ? RecordLocationPreference.VALUE_ON : RecordLocationPreference.VALUE_OFF) <- .
------------------------------------
Lcom/android/camera/ui/MoreSettingPopup$MoreSettingAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
view.setEnabled(mEnabled[position]) <- .
------------------------------------
Lcom/android/camera/functional/VideoCaptureIntentTest$8282;.run()V
CHAINS:
getActivity().findViewById(R.id.btn_cancel) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onKeyUp(ILandroid/view/KeyEvent;)Z
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(false) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- mCountDownView.cancelCountDown() <- mUI.cancelCountDown() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- remainingSecondsChanged(sec) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(false) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
------------------------------------
Lcom/android/camera/ui/FilmstripBottomControls;.onActionBarVisibilityChanged(Z)V
CHAINS:
setVisibility(isVisible ? VISIBLE : INVISIBLE) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher$6487;.onClick(Landroid/view/View;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- onModuleSelected(index) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- onModuleSelected(index) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.capture()Z
CHAINS:
mShutterButton.setEnabled(enabled) <- mUI.enableShutter(false) <- .
------------------------------------
Lcom/android/camera/VideoModule$6326;.onMediaSaved(Landroid/net/Uri;)V
CHAINS:
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onVideoSaved() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onVideoSaved() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onVideoSaved() <- .
------------------------------------
Lcom/android/camera/AnimationManager$5396;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
flashOverlay.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.(Landroid/content/Context;)V
CHAINS:
mZoomView.setVisibility(GONE) <- init((CameraActivity)context) <- .
------------------------------------
Lcom/android/camera/ui/InLineSettingCheckBox;.updateView()V
CHAINS:
mCheckBox.setOnCheckedChangeListener(mCheckedChangeListener) <- .
mCheckBox.setOnCheckedChangeListener(null) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyGestureReceiver;.onScaleEnd()V
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(true) <- .
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(true) <- resetZoomView() <- .
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- mController.cancelLoadingZoomedImage() <- resetZoomView() <- .
mZoomView.setVisibility(GONE) <- resetZoomView() <- .
------------------------------------
Lcom/android/camera/ui/ListPrefSettingPopup$ListPrefSettingAdapter;.setViewImage(Landroid/widget/ImageView;Ljava/lang/String;)V
CHAINS:
v.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.(Landroid/content/Context;Landroid/util/AttributeSet;I)V
CHAINS:
mZoomView.setVisibility(GONE) <- init((CameraActivity)context) <- .
------------------------------------
Lcom/android/camera/util/CameraUtil$13552;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
activity.finish() <- .
------------------------------------
Lcom/android/camera/CameraActivity$10712;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher;.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- closePopup() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- closePopup() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$76081;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- setSurroundingViewsVisible(true) <- .
setVisibility(GONE) <- cancelPartialDecodingTask() <- startPartialDecodingTask(imageRect) <- mZoomView.loadBitmap(uri,orientation,viewRect) <- mController.loadZoomedImage() <- .
mZoomView.setVisibility(GONE) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.(Landroid/content/Context;Landroid/util/AttributeSet;)V
CHAINS:
mZoomView.setVisibility(GONE) <- init((CameraActivity)context) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaUI;.(Lcom/android/camera/CameraActivity;Lcom/android/camera/WideAnglePanoramaController;Landroid/view/ViewGroup;)V
CHAINS:
cancelButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View arg0){
    mController.cancelHighResStitching();
  }
}
) <- setViews(appRes) <- createContentView() <- .
mRightIndicator.setEnabled(false) <- createContentView() <- .
mLeftIndicator.setEnabled(false) <- createContentView() <- .
------------------------------------
Lcom/android/camera/ui/TimeIntervalPopup$4274;.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
CHAINS:
mTimePicker.setVisibility(enabled ? VISIBLE : GONE) <- setTimeSelectionEnabled(isChecked) <- .
mHelpText.setVisibility(enabled ? GONE : VISIBLE) <- setTimeSelectionEnabled(isChecked) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onResumeAfterSuper()V
CHAINS:
mShutterButton.setEnabled(enable) <- mUI.enableShutter(!enabled) <- showVideoSnapshotUI(false) <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(false) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onCameraPickerClicked(I)V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- switchCamera() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- switchCamera() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- switchCamera() <- .
------------------------------------
Lcom/android/camera/CameraActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivityForResult(Intent.createChooser(intent,null),REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- launchEditor(localData) <- .
startActivityForResult(intent,REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- launchEditor(localData) <- .
startActivityForResult(Intent.createChooser(intent,getString(R.string.set_as)),REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- .
startActivityForResult(intent,REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- .
startActivityForResult(intent,REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- .
activity.startActivityForResult(mapsIntent,CameraActivity.REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- CameraUtil.showOnMap(this,latLong) <- .
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- showUndoDeletionBar() <- removeData(currentDataId) <- .
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- removeData(currentDataId) <- .
mUndoDeletionBar.setVisibility(View.VISIBLE) <- showUndoDeletionBar() <- removeData(currentDataId) <- .
startActivity(IntentHelper.getGalleryIntent(this)) <- .
activity.startActivity(mapsIntent) <- CameraUtil.showOnMap(this,latLong) <- .
finish() <- .
button.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    mDataAdapter.undoDataRemoval();
    hideUndoDeletionBar(true);
  }
}
) <- showUndoDeletionBar() <- removeData(currentDataId) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$58450;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,removedView) <- .
------------------------------------
Lcom/android/camera/PhotoMenu$5013;.onClick(Lcom/android/camera/ui/PieItem;)V
CHAINS:
popup.setVisibility(View.VISIBLE) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
mConfirmButton.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    updateInputState();
  }
}
) <- timerPopup.initialize(ctpref,beeppref) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
------------------------------------
Lcom/android/camera/data/LocalMediaData$29675;.onClick(Landroid/view/View;)V
CHAINS:
activity.startActivityForResult(intent,CameraActivity.REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- CameraUtil.playVideo(activity,getContentUri(),mTitle) <- .
activity.finish() <- CameraUtil.playVideo(activity,getContentUri(),mTitle) <- .
------------------------------------
Lcom/android/camera/CameraActivity;.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(true) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(true) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- mCountDownView.cancelCountDown() <- mUI.cancelCountDown() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- remainingSecondsChanged(sec) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(true) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonFocus(true) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
------------------------------------
Lcom/android/camera/AnimationManager$3767;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
view.setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/camera/ui/FilmstripBottomControls;.onFinishInflate()V
CHAINS:
mTinyPlanetButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View view){
    if (mListener != null) {
      mListener.onTinyPlanet();
    }
  }
}
) <- .
mViewPhotoSphereButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View view){
    if (mListener != null) {
      mListener.onViewPhotoSphere();
    }
  }
}
) <- .
mEditButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View view){
    if (mListener != null) {
      mListener.onEdit();
    }
  }
}
) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$19467;.onProgress(ZFFFF)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
mPreviewBorder.setVisibility(View.INVISIBLE) <- hideTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mPreviewBorder.setVisibility(View.INVISIBLE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mTooFastPrompt.setVisibility(View.GONE) <- hideTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mTooFastPrompt.setVisibility(View.GONE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mPreviewBorder.setVisibility(View.VISIBLE) <- showTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mTooFastPrompt.setVisibility(View.VISIBLE) <- showTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mRightIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(false) <- .
mLeftIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(false) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- mUI.hideUI() <- stopCapture(false) <- .
mCaptureIndicator.setVisibility(View.INVISIBLE) <- mUI.onStopCapture() <- stopCapture(false) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
ProgressDialog.show(mActivity,null,message,true,false) <- mDialogHelper.showWaitingDialog(title) <- mUI.showWaitingDialog(mPreparePreviewString) <- stopCapture(false) <- .
mRightIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mRightIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mLeftIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mLeftIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mRightIndicator.setEnabled(true) <- showTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
mLeftIndicator.setEnabled(true) <- showTooFastIndication() <- mUI.updateCaptureProgress(panningRateXInDegree,panningRateYInDegree,accumulatedHorizontalAngle,accumulatedVerticalAngle,PANNING_SPEED_THRESHOLD) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onResumeAfterSuper()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_ALL) <- startPreview() <- prepareCamera() <- onResumeTasks() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_ALL) <- prepareCamera() <- onResumeTasks() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- prepareCamera() <- onResumeTasks() <- .
mMenuButton.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewRetakeButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewDoneButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mShutterButton.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mReviewImage.setVisibility(View.GONE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewRetakeButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewDoneButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$62723;.onDataUpdated(Lcom/android/camera/ui/FilmStripView$DataAdapter$UpdateReporter;)V
CHAINS:
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[i - 1].getId() + 1) <- reload() <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[i - 1].getId() + 1) <- reload() <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(0) <- reload() <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(0) <- reload() <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(prev.getId() + 1) <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(next.getId() - 1) <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(item.getId()) <- updateViewItem(i) <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(item.getId()) <- updateViewItem(i) <- update(reporter) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(item.getId()) <- updateViewItem(mCurrentItem) <- update(reporter) <- .
------------------------------------
Lcom/android/camera/ui/RotateImageView;.setBitmap(Landroid/graphics/Bitmap;)V
CHAINS:
setVisibility(VISIBLE) <- .
setVisibility(GONE) <- .
------------------------------------
Lcom/android/camera/VideoMenu;.onListPrefChanged(Lcom/android/camera/ListPreference;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.onDraw(Landroid/graphics/Canvas;)V
CHAINS:
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(k) <- stepIfNeeded() <- layoutViewItems(false) <- .
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(k) <- stepIfNeeded() <- layoutViewItems(false) <- .
currView.setVisibility(INVISIBLE) <- layoutViewItems(false) <- .
currView.setVisibility(VISIBLE) <- layoutViewItems(false) <- .
currView.setVisibility(VISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(false) <- .
currView.setVisibility(VISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(false) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(false) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(false) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(itemID) <- layoutViewItems(false) <- .
currView.setVisibility(INVISIBLE) <- fadeAndScaleRightViewItem(mCurrentItem) <- layoutViewItems(false) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[k + 1].getId() - 1) <- stepIfNeeded() <- layoutViewItems(false) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[k - 1].getId() + 1) <- stepIfNeeded() <- layoutViewItems(false) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onPauseBeforeSuper()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- releasePreviewResources() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mPreviewCover.setVisibility(View.VISIBLE) <- mUI.showPreviewCover() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mActivity.finish() <- doReturnToCaller(!recordFail) <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- releasePreviewResources() <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$8064;.run()V
CHAINS:
mRootView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/VideoModule$JpegPictureCallback;.onPictureTaken([BLcom/android/camera/CameraManager$CameraProxy;)V
CHAINS:
mShutterButton.setEnabled(enable) <- mUI.enableShutter(!enabled) <- showVideoSnapshotUI(false) <- .
------------------------------------
Lcom/android/camera/stress/SwitchPreview;.testSwitchMode()V
CHAINS:
getActivity().startActivity(intent) <- .
getActivity().startActivity(intent) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$62723;.onDataInserted(ILcom/android/camera/ui/FilmStripView$ImageData;)V
CHAINS:
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(0) <- updateInsertion(dataID) <- .
v.setVisibility(View.INVISIBLE) <- checkForRemoval(data,mViewItem[itemID].getView()) <- removeItem(BUFFER_SIZE - 1) <- updateInsertion(dataID) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[i - 1].getId() + 1) <- reload() <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(0) <- reload() <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(dataID) <- updateInsertion(dataID) <- .
------------------------------------
Lcom/android/camera/ProxyLauncher;.onCreate(Landroid/os/Bundle;)V
CHAINS:
startActivityForResult(intent,0) <- .
------------------------------------
Lcom/android/camera/functional/CameraTest;.testActivityLeak()V|Ljava/lang/Exception;
CHAINS:
activity.finish() <- checkActivityLeak(MediaStore.INTENT_ACTION_VIDEO_CAMERA) <- .
activity.finish() <- checkActivityLeak(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onOrientationChanged(I)V
CHAINS:
mToast.setVisibility(View.VISIBLE) <- new RotateTextToast(mActivity,R.string.video_snapshot_hint,0).show() <- showTapToSnapshotToast() <- .
------------------------------------
Lcom/android/camera/CameraActivity$12303;.onDataDemoted(I)V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- showUndoDeletionBar() <- removeData(dataID) <- .
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- removeData(dataID) <- .
mUndoDeletionBar.setVisibility(View.VISIBLE) <- showUndoDeletionBar() <- removeData(dataID) <- .
button.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    mDataAdapter.undoDataRemoval();
    hideUndoDeletionBar(true);
  }
}
) <- showUndoDeletionBar() <- removeData(dataID) <- .
------------------------------------
Lcom/android/camera/VideoUI;.hideReviewUI()V
CHAINS:
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.VISIBLE) <- .
mMenuButton.setVisibility(View.VISIBLE) <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewPlayButton) <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewDoneButton) <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mShutterButton) <- .
mReviewImage.setVisibility(View.GONE) <- .
mShutterButton.setEnabled(true) <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewPlayButton) <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewDoneButton) <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mShutterButton) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher$11945;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/camera/PhotoModule$MainHandler;.handleMessage(Landroid/os/Message;)V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(mUpdateSet) <- setCameraParametersWhenIdle(0) <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- switchCamera() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- switchCamera() <- .
mToast.setVisibility(View.VISIBLE) <- new RotateTextToast(mActivity,R.string.tap_to_focus,0).show() <- showTapToFocusToast() <- .
mShutterButton.setVisibility(View.VISIBLE) <- mUI.initializeFirstTime() <- initializeFirstTime() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- switchCamera() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onPauseAfterSuper()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(true) <- .
mPreviewCover.setVisibility(View.VISIBLE) <- mUI.showPreviewCover() <- .
mPreviewBorder.setVisibility(View.INVISIBLE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(true) <- .
mTooFastPrompt.setVisibility(View.GONE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(true) <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- .
mRightIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(true) <- .
mLeftIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- mUI.hideUI() <- stopCapture(true) <- .
mCaptureIndicator.setVisibility(View.INVISIBLE) <- mUI.onStopCapture() <- stopCapture(true) <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(true) <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.hideUI() <- stopCapture(true) <- .
ProgressDialog.show(mActivity,null,message,true,false) <- mDialogHelper.showWaitingDialog(title) <- mUI.showWaitingDialog(mPreparePreviewString) <- stopCapture(true) <- .
mRightIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(true) <- .
mLeftIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(true) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onError(Landroid/media/MediaRecorder;II)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onPauseAfterSuper()V
CHAINS:
mPreviewCover.setVisibility(View.VISIBLE) <- mUI.showPreviewCover() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- collapseCameraControls() <- mUI.onPause() <- .
setVisibility(View.INVISIBLE) <- mCountDownView.cancelCountDown() <- cancelCountDown() <- mUI.onPause() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- collapseCameraControls() <- mUI.onPause() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaUI;.onSurfaceTextureUpdated(Landroid/graphics/SurfaceTexture;)V
CHAINS:
mPreviewCover.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$WaitProcessorTask;.onPostExecute(Ljava/lang/Void;)V
CHAINS:
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
------------------------------------
Lcom/android/camera/ProxyLauncher;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/camera/VideoModule;.onSharedPreferenceChanged()V
CHAINS:
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(mCaptureTimeLapse) <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- .
------------------------------------
Lcom/android/camera/VideoUI;.(Lcom/android/camera/CameraActivity;Lcom/android/camera/VideoController;Landroid/view/View;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- initializeControlByIntent() <- .
mReviewCancelButton.setVisibility(View.VISIBLE) <- initializeControlByIntent() <- .
mPreviewThumb.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (!mRecordingStarted) {
      mActivity.gotoGallery();
    }
  }
}
) <- initializeOverlay() <- .
mReviewPlayButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onReviewPlayClicked(v);
  }
}
) <- initializeControlByIntent() <- .
mReviewCancelButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onReviewCancelClicked(v);
  }
}
) <- initializeControlByIntent() <- .
mReviewDoneButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onReviewDoneClicked(v);
  }
}
) <- initializeControlByIntent() <- .
mMenuButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (mPieRenderer != null) {
      mPieRenderer.showInCenter();
    }
  }
}
) <- initializeControlByIntent() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- initializeControlByIntent() <- .
mShutterButton.setVisibility(View.VISIBLE) <- initializeMiscControls() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- initializeControlByIntent() <- .
------------------------------------
Lcom/android/camera/stress/ImageCapture;.testBackImageCapture()V|Ljava/lang/Exception;
CHAINS:
act.finish() <- .
------------------------------------
Lcom/android/camera/CameraActivity;.onPause()V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- .
------------------------------------
Lcom/android/camera/ui/FilmstripBottomControls$4171;.run()V
CHAINS:
view.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
------------------------------------
Lcom/android/camera/functional/VideoCaptureIntentTest$8028;.run()V
CHAINS:
getActivity().findViewById(R.id.btn_done) <- .
------------------------------------
Lcom/android/camera/stress/CameraStartUp;.testLaunchVideo()V|Ljava/lang/Exception;
CHAINS:
recorderActivity.finish() <- launchVideo() <- .
recorderActivity.finish() <- launchVideo() <- .
------------------------------------
Lcom/android/camera/crop/CropActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
findViewById(R.id.loading) <- startLoadBitmap(mSourceUri) <- .
loading.setVisibility(View.VISIBLE) <- startLoadBitmap(mSourceUri) <- .
finish() <- done() <- startLoadBitmap(mSourceUri) <- .
mSaveButton.setEnabled(enable) <- enableSave(false) <- startLoadBitmap(mSourceUri) <- .
------------------------------------
Lcom/android/camera/AnimationManager$3767;.onAnimationCancel(Landroid/animation/Animator;)V
CHAINS:
view.setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/camera/stress/VideoCapture;.testBackVideoCapture()V|Ljava/lang/Exception;
CHAINS:
act.finish() <- .
------------------------------------
Lcom/android/camera/VideoModule;.onReviewCancelClicked(Landroid/view/View;)V
CHAINS:
mActivity.finish() <- doReturnToCaller(false) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher;.(Landroid/content/Context;)V
CHAINS:
setOnClickListener(this) <- init(context) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onPreviewFocusChanged(Z)V
CHAINS:
mMenuButton.setVisibility(show ? View.VISIBLE : View.GONE) <- setShowMenu(previewFocused) <- mUI.onPreviewFocusChanged(previewFocused) <- .
mRenderOverlay.setVisibility(previewFocused ? View.VISIBLE : View.GONE) <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(show ? View.VISIBLE : View.GONE) <- setShowMenu(previewFocused) <- mUI.onPreviewFocusChanged(previewFocused) <- .
setVisibility(View.INVISIBLE) <- mCountDownView.cancelCountDown() <- mUI.onPreviewFocusChanged(previewFocused) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onPreviewFocusChanged(Z)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(show ? View.VISIBLE : View.GONE) <- setShowMenu(previewFocused) <- mUI.onPreviewFocusChanged(previewFocused) <- .
mRenderOverlay.setVisibility(previewFocused ? View.VISIBLE : View.GONE) <- mUI.onPreviewFocusChanged(previewFocused) <- .
mMenuButton.setVisibility(show ? View.VISIBLE : View.GONE) <- setShowMenu(previewFocused) <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onCameraPickerClicked(I)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- switchCamera() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- switchCamera() <- .
------------------------------------
Lcom/android/camera/AnimationManager$3767;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
view.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onBackPressed()Z
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- onStopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mActivity.finish() <- doReturnToCaller(!recordFail) <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- onStopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- onStopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- onStopVideoRecording() <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(true) <- mUI.removeTopLevelPopup() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- onStopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- onStopVideoRecording() <- .
------------------------------------
Lcom/android/camera/PhotoModule$JpegPictureCallback;.onPictureTaken([BLcom/android/camera/CameraManager$CameraProxy;)V
CHAINS:
mActivity.startActivityForResult(cropIntent,REQUEST_CROP) <- onCaptureDone() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewRetakeButton) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
mActivity.finish() <- onCaptureDone() <- .
mActivity.finish() <- onCaptureDone() <- .
mActivity.finish() <- onCaptureDone() <- .
mActivity.finish() <- onCaptureDone() <- .
mShutterButton.setVisibility(View.INVISIBLE) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- .
mShutterButton.setEnabled(enabled) <- mUI.enableShutter(true) <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewRetakeButton) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showCapturedImageForReview(jpegData,orientation,mMirror) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onPreviewUILayoutChange(IIII)V
CHAINS:
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
mReviewLayout.setVisibility(View.VISIBLE) <- mUI.onConfigurationChanged(newConfig,mThreadRunning) <- .
mCaptureLayout.setVisibility(View.GONE) <- mUI.onConfigurationChanged(newConfig,mThreadRunning) <- .
cancelButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View arg0){
    mController.cancelHighResStitching();
  }
}
) <- setViews(mActivity.getResources()) <- mUI.onConfigurationChanged(newConfig,mThreadRunning) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onPreviewFocusChanged(Z)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- hideUI() <- mUI.onPreviewFocusChanged(previewFocused) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onCaptureRetake()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- .
mMenuButton.setVisibility(View.VISIBLE) <- mUI.hidePostCaptureAlert() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.VISIBLE) <- mUI.hidePostCaptureAlert() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewRetakeButton) <- mUI.hidePostCaptureAlert() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewDoneButton) <- mUI.hidePostCaptureAlert() <- .
mShutterButton.setVisibility(View.VISIBLE) <- mUI.hidePostCaptureAlert() <- .
mReviewImage.setVisibility(View.GONE) <- mUI.hidePostCaptureAlert() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewRetakeButton) <- mUI.hidePostCaptureAlert() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewDoneButton) <- mUI.hidePostCaptureAlert() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$76081;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- setSurroundingViewsVisible(false) <- .
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- cancelLoadingZoomedImage() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.onTinyPlanet()V
CHAINS:
fragment.show(getFragmentManager(),"tiny_planet") <- mActivity.launchTinyPlanetEditor((LocalData)data) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher;.onClick(Landroid/view/View;)V
CHAINS:
mPopup.setVisibility(View.VISIBLE) <- showSwitcher() <- .
mPopup.setVisibility(View.INVISIBLE) <- initPopup() <- showSwitcher() <- .
item.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (showsPopup()) {
      onModuleSelected(index);
    }
  }
}
) <- initPopup() <- showSwitcher() <- .
setVisibility(View.INVISIBLE) <- showSwitcher() <- .
------------------------------------
Lcom/android/camera/CameraActivity$62673;.onClick(Landroid/view/View;)V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(true) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyGestureReceiver;.onScaleBegin(FF)Z
CHAINS:
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- mController.cancelLoadingZoomedImage() <- hideZoomView() <- .
mZoomView.setVisibility(GONE) <- hideZoomView() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyController;.goToFirstItem()V
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(true) <- resetZoomView() <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[i - 1].getId() + 1) <- reload() <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(0) <- reload() <- .
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- mController.cancelLoadingZoomedImage() <- resetZoomView() <- .
mZoomView.setVisibility(GONE) <- resetZoomView() <- .
------------------------------------
Lcom/android/camera/VideoMenu$2649;.onClick(Lcom/android/camera/ui/PieItem;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.cancelAutoFocus()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_PREFERENCE) <- .
------------------------------------
Lcom/android/camera/PhotoUI;.onPieOpened(II)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$62723;.onDataLoaded()V
CHAINS:
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[i - 1].getId() + 1) <- reload() <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(0) <- reload() <- .
------------------------------------
Lcom/android/camera/data/LocalMediaData$VideoData;.getView(Landroid/app/Activity;IILandroid/graphics/drawable/Drawable;Lcom/android/camera/data/LocalDataAdapter;)Landroid/view/View;
CHAINS:
icon.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    CameraUtil.playVideo(activity,getContentUri(),mTitle);
  }
}
) <- .
------------------------------------
Lcom/android/camera/VideoUI$SettingsPopup;.(Lcom/android/camera/VideoUI;Landroid/view/View;)V
CHAINS:
popup.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/ui/RotateTextToast$1685;.run()V
CHAINS:
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mToast) <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mToast) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onPreviewUIReady()V
CHAINS:
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyGestureReceiver;.onScale(FFF)Z
CHAINS:
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(false) <- .
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(true) <- .
mViewItem[i].getView().setVisibility(visible ? VISIBLE : INVISIBLE) <- mController.setSurroundingViewsVisible(false) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher$13051;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/camera/functional/ImageCaptureIntentTest$4427;.run()V
CHAINS:
getActivity().findViewById(R.id.btn_cancel) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyGestureReceiver;.onUp(FF)Z
CHAINS:
setVisibility(GONE) <- cancelPartialDecodingTask() <- startPartialDecodingTask(imageRect) <- mZoomView.loadBitmap(uri,orientation,viewRect) <- mController.loadZoomedImage() <- .
------------------------------------
Lcom/android/camera/VideoUI;.onPieOpened(II)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- .
------------------------------------
Lcom/android/camera/stress/VideoCapture;.testFrontVideoCapture()V|Ljava/lang/Exception;
CHAINS:
act.finish() <- .
------------------------------------
Lcom/android/camera/VideoModule$MainHandler;.handleMessage(Landroid/os/Message;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mToast.setVisibility(View.VISIBLE) <- new RotateTextToast(mActivity,R.string.video_snapshot_hint,0).show() <- showTapToSnapshotToast() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- dismissPopup(false) <- mUI.collapseCameraControls() <- switchCamera() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- switchCamera() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- switchCamera() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onSingleTapUp(Landroid/view/View;II)V
CHAINS:
mShutterButton.setEnabled(enable) <- mUI.enableShutter(!enabled) <- showVideoSnapshotUI(true) <- takeASnapshot() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView;.onEdit()V
CHAINS:
startActivityForResult(Intent.createChooser(intent,null),REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- mActivity.launchEditor((LocalData)data) <- .
startActivityForResult(intent,REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- mActivity.launchEditor((LocalData)data) <- .
------------------------------------
Lcom/android/camera/crop/CropActivity$LoadBitmapTask;.onPostExecute(Landroid/graphics/Bitmap;)V
CHAINS:
findViewById(R.id.loading) <- doneLoadBitmap(result,new RectF(mOriginalBounds),mOrientation) <- .
loading.setVisibility(View.GONE) <- doneLoadBitmap(result,new RectF(mOriginalBounds),mOrientation) <- .
finish() <- done() <- doneLoadBitmap(result,new RectF(mOriginalBounds),mOrientation) <- .
mSaveButton.setEnabled(enable) <- enableSave(true) <- doneLoadBitmap(result,new RectF(mOriginalBounds),mOrientation) <- .
------------------------------------
Lcom/android/camera/CameraActivity$48946;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(IntentHelper.getGalleryIntent(CameraActivity.this)) <- .
finish() <- .
------------------------------------
Lcom/android/camera/PhotoModule$44381;.run()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_ALL) <- startPreview() <- prepareCamera() <- onResumeTasks() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_ALL) <- prepareCamera() <- onResumeTasks() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- prepareCamera() <- onResumeTasks() <- .
mMenuButton.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewRetakeButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mReviewDoneButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mShutterButton.setVisibility(View.VISIBLE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
mReviewImage.setVisibility(View.GONE) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewRetakeButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mReviewDoneButton) <- hidePostCaptureAlert() <- mUI.initializeSecondTime(mParameters) <- initializeSecondTime() <- onResumeTasks() <- .
------------------------------------
Lcom/android/camera/VideoMenu;.onPreferenceClicked(Lcom/android/camera/ListPreference;)V
CHAINS:
mTimeLapseSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
  public void onCheckedChanged(  CompoundButton buttonView,  boolean isChecked){
    setTimeSelectionEnabled(isChecked);
  }
}
) <- timeInterval.initialize((IconListPreference)pref) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
mConfirmButton.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    updateInputState();
  }
}
) <- timeInterval.initialize((IconListPreference)pref) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- mPopup.dismiss(topLevelOnly) <- mUI.dismissPopup(true) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- basic.initialize(pref) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onShutterButtonClick()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.onStartCapture() <- startCapture() <- .
mPreviewBorder.setVisibility(View.INVISIBLE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mTooFastPrompt.setVisibility(View.GONE) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mRightIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(false) <- .
mLeftIndicator.setVisibility(View.INVISIBLE) <- hideDirectionIndicators() <- mUI.onStopCapture() <- stopCapture(false) <- .
mRightIndicator.setVisibility(View.VISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mLeftIndicator.setVisibility(View.INVISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mRightIndicator.setVisibility(View.INVISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mLeftIndicator.setVisibility(View.VISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mRightIndicator.setVisibility(View.VISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mLeftIndicator.setVisibility(View.VISIBLE) <- showDirectionIndicators(PanoProgressBar.DIRECTION_NONE) <- mUI.onStartCapture() <- startCapture() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- mUI.hideUI() <- stopCapture(false) <- .
mCaptureIndicator.setVisibility(View.INVISIBLE) <- mUI.onStopCapture() <- stopCapture(false) <- .
mCaptureIndicator.setVisibility(View.VISIBLE) <- mUI.onStartCapture() <- startCapture() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.onStartCapture() <- startCapture() <- .
mCaptureProgressBar.setVisibility(View.VISIBLE) <- mUI.showCaptureProgress() <- startCapture() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.hideUI() <- stopCapture(false) <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.onStartCapture() <- startCapture() <- .
ProgressDialog.show(mActivity,null,message,true,false) <- mDialogHelper.showWaitingDialog(title) <- mUI.showWaitingDialog(mPreparePreviewString) <- stopCapture(false) <- .
mRightIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
mLeftIndicator.setEnabled(false) <- hideTooFastIndication() <- mUI.onStopCapture() <- stopCapture(false) <- .
------------------------------------
Lcom/android/camera/crop/CropActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.loading) <- startLoadBitmap(mSourceUri) <- .
findViewById(R.id.cropView) <- .
startActivityForResult(Intent.createChooser(intent,getString(R.string.select_image)),SELECT_PICTURE) <- pickImage() <- .
setContentView(R.layout.crop_activity) <- .
loading.setVisibility(View.VISIBLE) <- startLoadBitmap(mSourceUri) <- .
finish() <- done() <- startLoadBitmap(mSourceUri) <- .
mSaveButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View view){
    startFinishOutput();
  }
}
) <- .
mSaveButton.setEnabled(enable) <- enableSave(false) <- startLoadBitmap(mSourceUri) <- .
------------------------------------
Lcom/android/camera/PhotoUI;.onSurfaceTextureUpdated(Landroid/graphics/SurfaceTexture;)V
CHAINS:
mPreviewCover.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
mActivity.finish() <- .
------------------------------------
Lcom/android/camera/CameraActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.filmstrip_view) <- .
findViewById(R.id.pano_stitching_progress_bar) <- .
findViewById(R.id.pano_stitching_progress_panel) <- .
findViewById(R.id.camera_above_filmstrip_layout) <- .
setContentView(R.layout.camera_filmstrip) <- .
v.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    try {
      UsageStatistics.onEvent(UsageStatistics.COMPONENT_CAMERA,UsageStatistics.ACTION_GALLERY,null);
      startActivity(IntentHelper.getGalleryIntent(CameraActivity.this));
    }
 catch (    ActivityNotFoundException e) {
      Log.w(TAG,"Failed to launch gallery activity, closing");
    }
    finish();
  }
}
) <- .
------------------------------------
Lcom/android/camera/ui/InLineSettingCheckBox;.onFinishInflate()V
CHAINS:
mCheckBox.setOnCheckedChangeListener(mCheckedChangeListener) <- .
------------------------------------
Lcom/android/camera/ui/CountdownTimerPopup$2825;.onValueChange(Landroid/widget/NumberPicker;II)V
CHAINS:
mPickerTitle.setVisibility(enabled ? VISIBLE : INVISIBLE) <- setTimeSelectionEnabled(newValue != 0) <- .
mTimerSound.setEnabled(enabled) <- setTimeSelectionEnabled(newValue != 0) <- .
mSoundTitle.setEnabled(enabled) <- setTimeSelectionEnabled(newValue != 0) <- .
------------------------------------
Lcom/android/camera/VideoUI;.overrideSettings([Ljava/lang/String;)V
CHAINS:
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.overrideSettings(keyvalues) <- .
mSettingList.getChildAt(j).setEnabled(enable) <- ((MoreSettingPopup)mPopup).overrideSettings(keyvalues) <- mVideoMenu.overrideSettings(keyvalues) <- .
------------------------------------
Lcom/android/camera/VideoModule$MyBroadcastReceiver;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mOnScreenIndicators.setVisibility(visibility) <- mOnScreenIndicators.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mMenuButton.setVisibility(View.GONE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.GONE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mRecordingTimeView.setVisibility(View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mMenuButton.setVisibility(recording ? View.GONE : View.VISIBLE) <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(false) <- showCaptureResult() <- stopVideoRecording() <- .
mTextureView.setVisibility(View.VISIBLE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- .
view.setVisibility(View.GONE) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setVisibility(View.VISIBLE) <- fadeIn(view,0F,1F,400) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
mReviewImage.setVisibility(View.VISIBLE) <- mUI.showReviewImage(bitmap) <- showCaptureResult() <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.VISIBLE) <- mUI.showSwitcher() <- stopVideoRecording() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.showRecordingUI(false) <- stopVideoRecording() <- .
mSurfaceView.setVisibility(View.GONE) <- mUI.hideSurfaceView() <- stopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- stopVideoRecording() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- stopVideoRecording() <- .
view.setEnabled(false) <- CameraUtil.fadeOut(mShutterButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewPlayButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
view.setEnabled(true) <- CameraUtil.fadeIn(mReviewDoneButton) <- mUI.showReviewControls() <- showCaptureResult() <- stopVideoRecording() <- .
------------------------------------
Lcom/android/camera/crop/CropActivity$BitmapIOTask;.onPostExecute(Ljava/lang/Boolean;)V
CHAINS:
findViewById(R.id.loading) <- doneBitmapIO(result.booleanValue(),mResultIntent) <- .
loading.setVisibility(View.GONE) <- doneBitmapIO(result.booleanValue(),mResultIntent) <- .
finish() <- done() <- doneBitmapIO(result.booleanValue(),mResultIntent) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$10177;.handleMessage(Landroid/os/Message;)V
CHAINS:
mReviewLayout.setVisibility(View.VISIBLE) <- mUI.showFinalMosaic(bitmap,getCaptureOrientation()) <- showFinalMosaic((Bitmap)msg.obj) <- .
mCaptureLayout.setVisibility(View.GONE) <- mUI.showFinalMosaic(bitmap,getCaptureOrientation()) <- showFinalMosaic((Bitmap)msg.obj) <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
------------------------------------
Lcom/android/camera/crop/CropActivity$4072;.onClick(Landroid/view/View;)V
CHAINS:
findViewById(R.id.loading) <- startBitmapIO(flags,mOriginalBitmap,mSourceUri,destinationUri,crop,photo,mOriginalBounds,(mCropExtras == null) ? null : mCropExtras.getOutputFormat(),mOriginalRotation) <- startFinishOutput() <- .
loading.setVisibility(View.VISIBLE) <- startBitmapIO(flags,mOriginalBitmap,mSourceUri,destinationUri,crop,photo,mOriginalBounds,(mCropExtras == null) ? null : mCropExtras.getOutputFormat(),mOriginalRotation) <- startFinishOutput() <- .
finish() <- done() <- startFinishOutput() <- .
mSaveButton.setEnabled(enable) <- enableSave(false) <- startFinishOutput() <- .
------------------------------------
Lcom/android/camera/tinyplanet/TinyPlanetFragment$10680;.onPreExecute()V
CHAINS:
ProgressDialog.show(getActivity(),null,savingTinyPlanet,true,false) <- .
------------------------------------
Lcom/android/camera/PhotoModule;.setFocusParameters()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_PREFERENCE) <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$7581;.onDirectionChange(I)V
CHAINS:
mRightIndicator.setVisibility(View.VISIBLE) <- mUI.showDirectionIndicators(direction) <- .
mLeftIndicator.setVisibility(View.INVISIBLE) <- mUI.showDirectionIndicators(direction) <- .
mRightIndicator.setVisibility(View.INVISIBLE) <- mUI.showDirectionIndicators(direction) <- .
mLeftIndicator.setVisibility(View.VISIBLE) <- mUI.showDirectionIndicators(direction) <- .
mRightIndicator.setVisibility(View.VISIBLE) <- mUI.showDirectionIndicators(direction) <- .
mLeftIndicator.setVisibility(View.VISIBLE) <- mUI.showDirectionIndicators(direction) <- .
------------------------------------
Lcom/android/camera/stress/SwitchPreview;.tearDown()V|Ljava/lang/Exception;
CHAINS:
getActivity().finish() <- .
------------------------------------
Lcom/android/camera/VideoUI$SettingsPopup;.dismiss()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- dismiss(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mPopup.dismiss(false) <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- dismiss(true) <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- dismiss(true) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- dismiss(true) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- mVideoMenu.popupDismissed(topLevelOnly) <- dismiss(true) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(mPreferenceGroup,mOtherKeys) <- initializePopup() <- mVideoMenu.popupDismissed(topLevelOnly) <- dismiss(true) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher;.(Landroid/content/Context;Landroid/util/AttributeSet;)V
CHAINS:
setOnClickListener(this) <- init(context) <- .
------------------------------------
Lcom/android/camera/AnimationManager$5396;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
flashOverlay.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/VideoModule;.init(Lcom/android/camera/CameraActivity;Landroid/view/View;)V
CHAINS:
mTimeLapseLabel.setVisibility(enable ? View.VISIBLE : View.GONE) <- mUI.showTimeLapseUI(mCaptureTimeLapse) <- .
------------------------------------
Lcom/android/camera/functional/ImageCaptureIntentTest$4173;.run()V
CHAINS:
getActivity().findViewById(R.id.btn_done) <- .
------------------------------------
Lcom/android/camera/tinyplanet/TinyPlanetFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
createButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    onCreateTinyPlanet();
  }
}
) <- .
------------------------------------
Lcom/android/camera/ui/ModuleSwitcher;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
mPopup.setVisibility(View.VISIBLE) <- .
mPopup.setVisibility(View.INVISIBLE) <- initPopup() <- .
item.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (showsPopup()) {
      onModuleSelected(index);
    }
  }
}
) <- initPopup() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onPreviewUIReady()V
CHAINS:
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- setupPreview() <- updateCameraParametersPreference() <- setCameraParameters(UPDATE_PARAM_ALL) <- startPreview() <- .
mFaceView.setVisibility(View.VISIBLE) <- mUI.onStartFaceDetection(mDisplayOrientation,(info.facing == CameraInfo.CAMERA_FACING_FRONT)) <- startFaceDetection() <- onPreviewStarted() <- startPreview() <- .
------------------------------------
Lcom/android/camera/PhotoModule$6332;.run()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- mCountDownView.cancelCountDown() <- mUI.cancelCountDown() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
setVisibility(View.INVISIBLE) <- remainingSecondsChanged(sec) <- mCountDownView.startCountDown(sec,playSound) <- mUI.startCountDown(seconds,playSound) <- onShutterButtonClick() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.collapseCameraControls() <- onShutterButtonClick() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- mUI.hideSwitcher() <- onShutterButtonClick() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onOrientationChanged(I)V
CHAINS:
mToast.setVisibility(View.VISIBLE) <- new RotateTextToast(mActivity,R.string.tap_to_focus,0).show() <- showTapToFocusToast() <- .
------------------------------------
Lcom/android/camera/stress/ImageCapture;.testFrontImageCapture()V|Ljava/lang/Exception;
CHAINS:
act.finish() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule;.onResumeAfterSuper()V
CHAINS:
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- .
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mCameraControls.setVisibility(View.INVISIBLE) <- mUI.hideUI() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.hideUI() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- configMosaicPreview() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.hideUI() <- .
ProgressDialog.show(mActivity,null,message,true,false) <- mDialogHelper.showWaitingDialog(title) <- mUI.showWaitingDialog(mDialogWaitingPreviousString) <- .
------------------------------------
Lcom/android/camera/PhotoUI$22968;.onDismiss()V
CHAINS:
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.init(Lcom/android/camera/CameraActivity;Landroid/view/View;)V
CHAINS:
mReviewCancelButton.setVisibility(View.VISIBLE) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mReviewRetakeButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onCaptureRetake();
  }
}
) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mReviewCancelButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onCaptureCancelled();
  }
}
) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mReviewDoneButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mController.onCaptureDone();
  }
}
) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mMenuButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    openMenu();
  }
}
) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mPreviewThumb.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mActivity.gotoGallery();
  }
}
) <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
mSwitcher.setVisibility(View.INVISIBLE) <- hideSwitcher() <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideSwitcher() <- mUI.initializeControlByIntent() <- initializeControlByIntent() <- .
------------------------------------
Lcom/android/camera/WideAnglePanoramaModule$10971;.run()V
CHAINS:
mReviewLayout.setVisibility(View.GONE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mCameraControls.setVisibility(View.VISIBLE) <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureLayout.setVisibility(View.VISIBLE) <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
mCaptureProgressBar.setVisibility(View.INVISIBLE) <- mUI.reset() <- reset() <- resetToPreviewIfPossible() <- .
mSwitcher.setVisibility(View.VISIBLE) <- showSwitcher() <- showUI() <- mUI.showPreviewUI() <- reset() <- resetToPreviewIfPossible() <- .
------------------------------------
Lcom/android/camera/PhotoUI$DecodeImageForReview;.onPostExecute(Landroid/graphics/Bitmap;)V
CHAINS:
mReviewImage.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$MyGestureReceiver;.onScroll(FFFF)Z
CHAINS:
setVisibility(GONE) <- mZoomView.cancelPartialDecodingTask() <- mController.cancelLoadingZoomedImage() <- hideZoomView() <- .
mZoomView.setVisibility(GONE) <- hideZoomView() <- .
------------------------------------
Lcom/android/camera/VideoModule;.onPreviewUIReady()V
CHAINS:
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- .
mShutterButton.setEnabled(enable) <- mUI.enableShutter(true) <- onPreviewStarted() <- startPreview() <- setCameraParameters() <- startPreview() <- .
------------------------------------
Lcom/android/camera/PhotoModule;.onQueueStatus(Z)V
CHAINS:
mShutterButton.setEnabled(enabled) <- mUI.enableShutter(!full) <- .
------------------------------------
Lcom/android/camera/stress/CameraStartUp;.testLaunchCamera()V|Ljava/lang/Exception;
CHAINS:
cameraActivity.finish() <- launchCamera() <- .
cameraActivity.finish() <- launchCamera() <- .
------------------------------------
Lcom/android/camera/ui/CountDownView$MainHandler;.handleMessage(Landroid/os/Message;)V
CHAINS:
setVisibility(View.INVISIBLE) <- remainingSecondsChanged(mRemainingSecs - 1) <- .
------------------------------------
Lcom/android/camera/CameraActivity$12303;.onDataPromoted(I)V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- showUndoDeletionBar() <- removeData(dataID) <- .
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- removeData(dataID) <- .
mUndoDeletionBar.setVisibility(View.VISIBLE) <- showUndoDeletionBar() <- removeData(dataID) <- .
button.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    mDataAdapter.undoDataRemoval();
    hideUndoDeletionBar(true);
  }
}
) <- showUndoDeletionBar() <- removeData(dataID) <- .
------------------------------------
Lcom/android/camera/PhotoMenu$5880;.onClick(Lcom/android/camera/ui/PieItem;)V
CHAINS:
popup.setVisibility(View.VISIBLE) <- mUI.showPopup(mPopup) <- .
mCameraControls.setVisibility(View.INVISIBLE) <- hideUI() <- mUI.showPopup(mPopup) <- .
mPopup.setVisibility(View.INVISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
setVisibility(View.VISIBLE) <- hidePopup() <- mSwitcher.closePopup() <- hideUI() <- mUI.showPopup(mPopup) <- .
((ListView)mSettingList).setOnItemClickListener(this) <- popup.initialize(sizePref) <- .
------------------------------------
Lcom/android/camera/VideoModule;.onReviewPlayClicked(Landroid/view/View;)V
CHAINS:
mActivity.startActivityForResult(intent,CameraActivity.REQ_CODE_DONT_SWITCH_TO_PREVIEW) <- startPlayVideoActivity() <- .
------------------------------------
Lcom/android/camera/ui/FilmStripView$62723;.onDataRemoved(ILcom/android/camera/ui/FilmStripView$ImageData;)V
CHAINS:
nextItem.getView().setVisibility(INVISIBLE) <- animateItemRemoval(dataID,data) <- .
mViewItem[mCurrentItem].getView().setVisibility(VISIBLE) <- animateItemRemoval(dataID,data) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[next].getId() - 1) <- animateItemRemoval(dataID,data) <- .
v.setVisibility(View.VISIBLE) <- buildItemFromData(mViewItem[prev].getId() + 1) <- animateItemRemoval(dataID,data) <- .
------------------------------------
Lcom/android/camera/CameraActivity$16578;.run()V
CHAINS:
mUndoDeletionBar.setVisibility(View.GONE) <- hideUndoDeletionBar(false) <- performDeletion() <- .
mPanoStitchingPanel.setVisibility(View.VISIBLE) <- showPanoStitchingProgress() <- .
mPanoStitchingPanel.setVisibility(View.GONE) <- hidePanoStitchingProgress() <- .
mPanoStitchingPanel.setVisibility(View.GONE) <- hidePanoStitchingProgress() <- .
mPanoStitchingPanel.setVisibility(View.GONE) <- hidePanoStitchingProgress() <- .
mPanoStitchingPanel.setVisibility(View.GONE) <- hidePanoStitchingProgress() <- .
------------------------------------
------------------------------------
Lcom/android/camera/crop/CropActivity;
------------------------------------
Lcom/android/camera/ProxyLauncher;
------------------------------------
Lcom/android/camera/ui/DetailsDialog$DetailsAdapter;
------------------------------------
Lcom/android/camera/ui/MoreSettingPopup$MoreSettingAdapter;
------------------------------------
Lcom/android/camera/CameraActivity;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/DeskClock
start doc
end doc
Lcom/android/deskclock/AlarmClockFragment$11303;.onChanged()V
CHAINS:
mUndoFrame.setVisibility(View.VISIBLE) <- showUndoBar() <- .
mEmptyView.setVisibility(View.GONE) <- .
mEmptyView.setVisibility(View.GONE) <- .
mTimelineLayout.setVisibility(View.VISIBLE) <- .
mTimelineLayout.setVisibility(View.VISIBLE) <- .
mEmptyView.setVisibility(View.VISIBLE) <- .
mEmptyView.setVisibility(View.VISIBLE) <- .
mTimelineLayout.setVisibility(View.GONE) <- .
mTimelineLayout.setVisibility(View.VISIBLE) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mActionDescriptionIcon.setVisibility(VISIBLE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mActionDescriptionIcon.setVisibility(GONE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (listener != null) {
      listener.onActionClicked();
    }
    hide(true);
  }
}
) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment;.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
CHAINS:
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.endFastChildLayout()V
CHAINS:
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- populate() <- .
------------------------------------
Lcom/android/deskclock/Screensaver;.onAttachedToWindow()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- layoutClockSaver() <- .
analogClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
analogClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$10160;.processClick(Landroid/view/View;)V
CHAINS:
newFragment.show(ft,"label_dialog") <- onLabelPressed(o) <- .
------------------------------------
Lcom/android/deskclock/Screensaver;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- layoutClockSaver() <- .
analogClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
analogClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,ScreensaverSettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
------------------------------------
Lcom/android/deskclock/Screensaver$1679;.onChange(Z)V
CHAINS:
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$77328;.onPreExecute()V
CHAINS:
mAlarmsList.setEnabled(false) <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment$10532;.onClick(Landroid/view/View;)V
CHAINS:
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- doReset() <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- doLap() <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- doReset() <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- doLap() <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- doLap() <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- doLap() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doLap() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment;.onTouch(Landroid/view/View;Landroid/view/MotionEvent;)Z
CHAINS:
mUndoFrame.setVisibility(View.GONE) <- hideUndoBar(true,event) <- .
setVisibility(View.GONE) <- mUndoBar.hide(animate) <- hideUndoBar(true,event) <- .
mActionButton.setOnClickListener(null) <- mUndoBar.hide(animate) <- hideUndoBar(true,event) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$8047;.run()V
CHAINS:
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(canAddMinute(t)) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setEnabled(canAddMinute(t)) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).done() <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).pause() <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
delete.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
delete.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o)) <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment$12741;.run()V
CHAINS:
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(time) <- rightButtonAction() <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- rightButtonAction() <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.setMinColumnWidth(I)V
CHAINS:
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- populate() <- setColumnCount(COLUMN_COUNT_AUTO) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.onLayout(ZIIII)V
CHAINS:
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- populate() <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- layoutClockSaver() <- .
analogClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
analogClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
setContentView(R.layout.desk_clock_saver) <- layoutClockSaver() <- .
findViewById(R.id.analog_clock) <- layoutClockSaver() <- .
findViewById(R.id.digital_clock) <- layoutClockSaver() <- .
findViewById(R.id.main_clock) <- setClockStyle() <- layoutClockSaver() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$75422;.onPreExecute()V
CHAINS:
mAlarmsList.setEnabled(false) <- .
------------------------------------
Lcom/android/deskclock/ClockFragment$2253;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mClockFrame) <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(getActivity(),mClockFrame) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(getActivity(),mClockFrame) <- .
------------------------------------
Lcom/android/deskclock/tests/TestAddAlarm;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
startActivity(i) <- .
startActivity(i) <- .
startActivity(i) <- .
startActivity(i) <- .
startActivity(i) <- .
------------------------------------
Lcom/android/deskclock/ClockFragment$4212;.onChange(Z)V
CHAINS:
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(ClockFragment.this.getActivity(),mClockFrame) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(ClockFragment.this.getActivity(),mClockFrame) <- .
------------------------------------
Lcom/android/deskclock/alarms/AlarmActivity;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
setContentView(view) <- updateLayout() <- .
findViewById(R.id.glow_pad_view) <- updateLayout() <- .
findViewById(R.id.alertTitle) <- updateTitle() <- updateLayout() <- .
------------------------------------
Lcom/android/deskclock/timer/TimerAlertFullScreen;.onEmptyList()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment;.onPause()V
CHAINS:
v.setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$7232;.onClick(Landroid/view/View;)V
CHAINS:
mUndoFrame.setVisibility(View.GONE) <- hideUndoBar(true,null) <- .
setVisibility(View.GONE) <- mUndoBar.hide(animate) <- hideUndoBar(true,null) <- .
mActionButton.setOnClickListener(null) <- mUndoBar.hide(animate) <- hideUndoBar(true,null) <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity$3596;.run()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- .
------------------------------------
Lcom/android/deskclock/widget/ActionableToastBar$6293;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$38614;.run()V
CHAINS:
list.setEnabled(true) <- .
------------------------------------
Lcom/android/deskclock/ClockFragment;.onResume()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mClockFrame) <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(activity,mClockFrame) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(activity,mClockFrame) <- .
analogClock.setVisibility(View.GONE) <- Utils.setClockStyle(activity,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- .
digitalClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(activity,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- .
analogClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(activity,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- .
digitalClock.setVisibility(View.GONE) <- Utils.setClockStyle(activity,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- .
mList.setVisibility(View.VISIBLE) <- .
mList.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$35821;.onPreDraw()Z
CHAINS:
list.setEnabled(true) <- .
------------------------------------
Lcom/android/deskclock/ClockFragment$4529;.run()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mClockFrame) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$48507;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.expandArea.setVisibility(View.VISIBLE) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.INVISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.GONE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.ringtone.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    launchRingTonePicker(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    final boolean checked=((CheckBox)v).isChecked();
    if (checked) {
      itemHolder.vibrate.setTextColor(mColorLit);
    }
 else {
      itemHolder.vibrate.setTextColor(mColorDim);
    }
    alarm.vibrate=checked;
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.dayButtonParents[i].setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    itemHolder.dayButtons[buttonIndex].toggle();
    final boolean checked=itemHolder.dayButtons[buttonIndex].isChecked();
    int day=DAY_ORDER[buttonIndex];
    alarm.daysOfWeek.setDaysOfWeek(checked,day);
    if (checked) {
      turnOnDayOfWeek(itemHolder,buttonIndex);
    }
 else {
      turnOffDayOfWeek(itemHolder,buttonIndex);
      if (!alarm.daysOfWeek.isRepeating()) {
        itemHolder.repeatDays.setVisibility(View.GONE);
        itemHolder.repeat.setTextColor(mColorDim);
        mRepeatChecked.remove(alarm.id);
        mPreviousDaysOfWeekMap.putInt("" + alarm.id,DaysOfWeek.NO_DAYS_SET);
      }
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeat.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    final boolean checked=((CheckBox)view).isChecked();
    if (checked) {
      itemHolder.repeatDays.setVisibility(View.VISIBLE);
      mRepeatChecked.add(alarm.id);
      final int bitSet=mPreviousDaysOfWeekMap.getInt("" + alarm.id);
      alarm.daysOfWeek.setBitSet(bitSet);
      if (!alarm.daysOfWeek.isRepeating()) {
        alarm.daysOfWeek.setDaysOfWeek(true,DAY_ORDER);
      }
      updateDaysOfWeekButtons(itemHolder,alarm.daysOfWeek);
    }
 else {
      itemHolder.repeatDays.setVisibility(View.GONE);
      mRepeatChecked.remove(alarm.id);
      final int bitSet=alarm.daysOfWeek.getBitSet();
      mPreviousDaysOfWeekMap.putInt("" + alarm.id,bitSet);
      alarm.daysOfWeek.clearAllDays();
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.clickableLabel.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    showLabelDialog(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
------------------------------------
Lcom/android/deskclock/worldclock/CitiesActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.cities_activity) <- updateLayout() <- .
findViewById(R.id.cities_list) <- updateLayout() <- .
------------------------------------
Lcom/android/deskclock/LabelDialogFragment$3106;.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$19410;.onClick(Landroid/view/View;)V
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$65695;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
itemHolder.summary.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/TimerSetupView;.onLongClick(Landroid/view/View;)Z
CHAINS:
mDelete.setEnabled(enabled) <- updateDeleteButton() <- .
mStart.setEnabled(enabled) <- updateStartButton() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$40722;.run()V
CHAINS:
list.setEnabled(true) <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment;.onStart()V
CHAINS:
mEndSpace.setVisibility(spacersVisibility) <- .
mStartSpace.setVisibility(spacersVisibility) <- .
mLapsList.setVisibility(lapsVisible ? View.VISIBLE : View.GONE) <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment;.onResume()V
CHAINS:
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(mState) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(mState) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setEnabled(enabled) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(mState) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(true) <- setButtons(mState) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(mState) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setEnabled(show) <- showShareButton(false) <- setButtons(mState) <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- .
mLapsList.setVisibility(View.GONE) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- .
mLapsList.setVisibility(View.VISIBLE) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- .
mEndSpace.setVisibility(spacersVisibility) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- doReset() <- readFromSharedPref(prefs) <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- .
mStartSpace.setVisibility(spacersVisibility) <- showLaps() <- mLapsAdapter.setLapTimes(laps) <- readFromSharedPref(prefs) <- .
v.setVisibility(View.VISIBLE) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_reset_button,R.drawable.ic_reset,true,View.VISIBLE) <- setButtons(mState) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,!reachedMaxLaps(),View.VISIBLE) <- setButtons(mState) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
b.setVisibility(visibility) <- setButton(mLeftButton,R.string.sw_lap_button,R.drawable.ic_lap,false,View.INVISIBLE) <- setButtons(mState) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(true) <- setButtons(mState) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(mState) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RESET) <- doReset() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_RUNNING) <- doStart(mStartTime) <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(Stopwatches.STOPWATCH_STOPPED) <- doStop() <- readFromSharedPref(prefs) <- .
mShareButton.setVisibility(show ? View.VISIBLE : View.INVISIBLE) <- showShareButton(false) <- setButtons(mState) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.dispatchDragEvent(Landroid/view/DragEvent;)Z
CHAINS:
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- handleDrop((int)event.getX(),(int)event.getY()) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_RELEASED_REORDER) <- handleDrop((int)event.getX(),(int)event.getY()) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- handleDrop((int)event.getX(),(int)event.getY()) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_DRAGGING) <- startDragging(child,mTouchDownForDragStartX,mTouchDownForDragStartY) <- .
------------------------------------
Lcom/android/deskclock/DeskClock;.clockButtonsOnClick(Landroid/view/View;)V
CHAINS:
startActivity(new Intent(this,CitiesActivity.class)) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$51208;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.repeatDays.setVisibility(View.GONE) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity;.onUserInteraction()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/deskclock/LabelDialogFragment$3846;.onClick(Landroid/view/View;)V
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(timer,Timers.TIMER_UPDATE) <- ((TimerFragment)frag).setLabel(timer,label) <- ((DeskClock)getActivity()).onDialogLabelSet(timer,label,tag) <- set(timer,tag,label) <- set(alarm,timer,tag) <- .
------------------------------------
Lcom/android/deskclock/Screensaver$2324;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(Screensaver.this,mContentView) <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity$3296;.onChange(Z)V
CHAINS:
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$9580;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
mEmptyView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity;.onPause()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$8794;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
mEmptyView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$68788;.onPreDraw()Z
CHAINS:
itemHolder.summary.setVisibility(View.VISIBLE) <- .
itemHolder.expandArea.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mTimerFooter.setVisibility(mOnEmptyListListener == null ? View.VISIBLE : View.GONE) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- populate() <- mTimersList.setColumnCount(mColumnCount) <- .
mAddTimer.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mTimerSetup.reset();
    gotoSetupView();
  }
}
) <- .
mStart.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    int timerLength=mTimerSetup.getTime();
    if (timerLength == 0) {
      return;
    }
    TimerObj t=new TimerObj(timerLength * 1000);
    t.mState=TimerObj.STATE_RUNNING;
    mAdapter.addTimer(t);
    updateTimersState(t,Timers.START_TIMER);
    gotoTimersView();
    mTimerSetup.reset();
    mTimersList.setFirstPositionAndOffsets(mAdapter.findTimerPositionById(t.mTimerId),0);
  }
}
) <- .
mCancel.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (mAdapter.getCount() != 0) {
      gotoTimersView();
    }
  }
}
) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$45528;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.expandArea.setVisibility(View.VISIBLE) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.INVISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.GONE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.ringtone.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    launchRingTonePicker(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    final boolean checked=((CheckBox)v).isChecked();
    if (checked) {
      itemHolder.vibrate.setTextColor(mColorLit);
    }
 else {
      itemHolder.vibrate.setTextColor(mColorDim);
    }
    alarm.vibrate=checked;
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.dayButtonParents[i].setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    itemHolder.dayButtons[buttonIndex].toggle();
    final boolean checked=itemHolder.dayButtons[buttonIndex].isChecked();
    int day=DAY_ORDER[buttonIndex];
    alarm.daysOfWeek.setDaysOfWeek(checked,day);
    if (checked) {
      turnOnDayOfWeek(itemHolder,buttonIndex);
    }
 else {
      turnOffDayOfWeek(itemHolder,buttonIndex);
      if (!alarm.daysOfWeek.isRepeating()) {
        itemHolder.repeatDays.setVisibility(View.GONE);
        itemHolder.repeat.setTextColor(mColorDim);
        mRepeatChecked.remove(alarm.id);
        mPreviousDaysOfWeekMap.putInt("" + alarm.id,DaysOfWeek.NO_DAYS_SET);
      }
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeat.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    final boolean checked=((CheckBox)view).isChecked();
    if (checked) {
      itemHolder.repeatDays.setVisibility(View.VISIBLE);
      mRepeatChecked.add(alarm.id);
      final int bitSet=mPreviousDaysOfWeekMap.getInt("" + alarm.id);
      alarm.daysOfWeek.setBitSet(bitSet);
      if (!alarm.daysOfWeek.isRepeating()) {
        alarm.daysOfWeek.setDaysOfWeek(true,DAY_ORDER);
      }
      updateDaysOfWeekButtons(itemHolder,alarm.daysOfWeek);
    }
 else {
      itemHolder.repeatDays.setVisibility(View.GONE);
      mRepeatChecked.remove(alarm.id);
      final int bitSet=alarm.daysOfWeek.getBitSet();
      mPreviousDaysOfWeekMap.putInt("" + alarm.id,bitSet);
      alarm.daysOfWeek.clearAllDays();
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.clickableLabel.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    showLabelDialog(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$71316;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
itemHolder.expandArea.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/ClockFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
menuButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    fakeOverflow.show();
  }
}
) <- setupFakeOverflowMenuButton(menuButton) <- .
------------------------------------
Lcom/android/deskclock/DeskClock;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(new Intent(DeskClock.this,ScreensaverActivity.class)) <- processMenuClick(item) <- .
startActivity(i) <- processMenuClick(item) <- .
startActivity(new Intent(DeskClock.this,SettingsActivity.class)) <- processMenuClick(item) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mUndoFrame.setVisibility(View.VISIBLE) <- showUndoBar() <- .
menuButton.setVisibility(View.VISIBLE) <- .
menuButton.setVisibility(View.GONE) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mActionDescriptionIcon.setVisibility(VISIBLE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mActionDescriptionIcon.setVisibility(GONE) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
mEmptyView.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    startCreatingAlarm();
  }
}
) <- .
mAddAlarmButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    hideUndoBar(true,null);
    startCreatingAlarm();
  }
}
) <- .
menuButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    fakeOverflow.show();
  }
}
) <- setupFakeOverflowMenuButton(menuButton) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (listener != null) {
      listener.onActionClicked();
    }
    hide(true);
  }
}
) <- mUndoBar.show(new ActionableToastBar.ActionClickedListener(){
  @Override public void onActionClicked(){
    asyncAddAlarm(mDeletedAlarm);
    mDeletedAlarm=null;
    mUndoShowing=false;
  }
}
,0,getResources().getString(R.string.alarm_deleted),true,R.string.alarm_undo,true) <- showUndoBar() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$AlarmItemAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
itemHolder.expandArea.setVisibility(View.GONE) <- collapseAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.expandArea.setVisibility(View.VISIBLE) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.vibrate.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.vibrate.setVisibility(View.INVISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.repeatDays.setVisibility(View.GONE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.label.setVisibility(View.GONE) <- bindView(v,mContext,getCursor()) <- .
itemHolder.label.setVisibility(View.VISIBLE) <- bindView(v,mContext,getCursor()) <- .
itemHolder.daysOfWeek.setVisibility(View.GONE) <- bindView(v,mContext,getCursor()) <- .
itemHolder.daysOfWeek.setVisibility(View.VISIBLE) <- bindView(v,mContext,getCursor()) <- .
itemHolder.summary.setVisibility(expanded ? View.GONE : View.VISIBLE) <- bindView(v,mContext,getCursor()) <- .
itemHolder.expandArea.setVisibility(expanded ? View.VISIBLE : View.GONE) <- bindView(v,mContext,getCursor()) <- .
holder.footerFiller.setVisibility(position < getCount() - 1 ? View.GONE : View.VISIBLE) <- .
itemHolder.onoff.setOnCheckedChangeListener(onOffListener) <- bindView(v,mContext,getCursor()) <- .
itemHolder.onoff.setOnCheckedChangeListener(null) <- bindView(v,mContext,getCursor()) <- .
itemHolder.ringtone.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    launchRingTonePicker(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.vibrate.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    final boolean checked=((CheckBox)v).isChecked();
    if (checked) {
      itemHolder.vibrate.setTextColor(mColorLit);
    }
 else {
      itemHolder.vibrate.setTextColor(mColorDim);
    }
    alarm.vibrate=checked;
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.dayButtonParents[i].setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    itemHolder.dayButtons[buttonIndex].toggle();
    final boolean checked=itemHolder.dayButtons[buttonIndex].isChecked();
    int day=DAY_ORDER[buttonIndex];
    alarm.daysOfWeek.setDaysOfWeek(checked,day);
    if (checked) {
      turnOnDayOfWeek(itemHolder,buttonIndex);
    }
 else {
      turnOffDayOfWeek(itemHolder,buttonIndex);
      if (!alarm.daysOfWeek.isRepeating()) {
        itemHolder.repeatDays.setVisibility(View.GONE);
        itemHolder.repeat.setTextColor(mColorDim);
        mRepeatChecked.remove(alarm.id);
        mPreviousDaysOfWeekMap.putInt("" + alarm.id,DaysOfWeek.NO_DAYS_SET);
      }
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.repeat.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    final boolean checked=((CheckBox)view).isChecked();
    if (checked) {
      itemHolder.repeatDays.setVisibility(View.VISIBLE);
      mRepeatChecked.add(alarm.id);
      final int bitSet=mPreviousDaysOfWeekMap.getInt("" + alarm.id);
      alarm.daysOfWeek.setBitSet(bitSet);
      if (!alarm.daysOfWeek.isRepeating()) {
        alarm.daysOfWeek.setDaysOfWeek(true,DAY_ORDER);
      }
      updateDaysOfWeekButtons(itemHolder,alarm.daysOfWeek);
    }
 else {
      itemHolder.repeatDays.setVisibility(View.GONE);
      mRepeatChecked.remove(alarm.id);
      final int bitSet=alarm.daysOfWeek.getBitSet();
      mPreviousDaysOfWeekMap.putInt("" + alarm.id,bitSet);
      alarm.daysOfWeek.clearAllDays();
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.clickableLabel.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    showLabelDialog(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,false) <- bindView(v,mContext,getCursor()) <- .
itemHolder.alarmItem.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    if (isAlarmExpanded(alarm)) {
      collapseAlarm(itemHolder,true);
    }
 else {
      expandAlarm(itemHolder,true);
    }
  }
}
) <- bindView(v,mContext,getCursor()) <- .
itemHolder.delete.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    mDeletedAlarm=alarm;
    view.animate().setDuration(ANIMATION_DURATION).alpha(0).translationY(-1).withEndAction(new Runnable(){
      @Override public void run(){
        asyncDeleteAlarm(mDeletedAlarm,view);
      }
    }
);
  }
}
) <- bindView(v,mContext,getCursor()) <- .
itemHolder.label.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    expandAlarm(itemHolder,true);
    itemHolder.alarmItem.post(mScrollRunnable);
  }
}
) <- bindView(v,mContext,getCursor()) <- .
itemHolder.daysOfWeek.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    expandAlarm(itemHolder,true);
    itemHolder.alarmItem.post(mScrollRunnable);
  }
}
) <- bindView(v,mContext,getCursor()) <- .
itemHolder.clock.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    mSelectedAlarm=itemHolder.alarm;
    AlarmUtils.showTimeEditDialog(getChildFragmentManager(),alarm,AlarmClockFragment.this,DateFormat.is24HourFormat(getActivity()));
    expandAlarm(itemHolder,true);
    itemHolder.alarmItem.post(mScrollRunnable);
  }
}
) <- bindView(v,mContext,getCursor()) <- .
holder.footerFiller.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
  }
}
) <- setNewHolder(view) <- bindView(v,mContext,getCursor()) <- .
holder.footerFiller.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
  }
}
) <- setNewHolder(view) <- newView(mContext,getCursor(),parent) <- .
holder.footerFiller.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
  }
}
) <- setNewHolder(view) <- newView(mContext,getCursor(),parent) <- .
itemHolder.onoff.setEnabled(true) <- bindView(v,mContext,getCursor()) <- .
itemHolder.onoff.setEnabled(false) <- bindView(v,mContext,getCursor()) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerAlertFullScreen;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
findViewById(R.id.fragment_container) <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity;.onResume()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- layoutClockSaver() <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- layoutClockSaver() <- .
analogClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
analogClock.setVisibility(View.VISIBLE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
digitalClock.setVisibility(View.GONE) <- Utils.setClockStyle(this,mDigitalClock,mAnalogClock,SettingsActivity.KEY_CLOCK_STYLE) <- setClockStyle() <- layoutClockSaver() <- .
setContentView(R.layout.desk_clock_saver) <- layoutClockSaver() <- .
findViewById(R.id.analog_clock) <- layoutClockSaver() <- .
findViewById(R.id.digital_clock) <- layoutClockSaver() <- .
findViewById(R.id.main_clock) <- setClockStyle() <- layoutClockSaver() <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment;.onPause()V
CHAINS:
v.setVisibility(View.INVISIBLE) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$14140;.run()V
CHAINS:
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setEnabled(canAddMinute(t)) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setEnabled(canAddMinute(t)) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
stop.setVisibility(View.INVISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
mCircleView.setVisibility(blink ? INVISIBLE : VISIBLE) <- ((TimerListItem)(t.mView)).setCircleBlink(mVisible) <- .
leftButton.setVisibility(View.INVISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
delete.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(t) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$18359;.onClick(Landroid/view/View;)V
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mTimersListPage.setVisibility(View.VISIBLE) <- gotoTimersView() <- .
mTimerSetup.setVisibility(View.GONE) <- gotoTimersView() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment;.onResume()V
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- processIntent(newIntent) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- setPage() <- .
mTimersListPage.setVisibility(View.VISIBLE) <- gotoTimersView() <- setPage() <- .
mTimerSetup.setVisibility(View.GONE) <- gotoTimersView() <- setPage() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- processIntent(newIntent) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- setPage() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- processIntent(newIntent) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- setPage() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- processIntent(newIntent) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- setPage() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- processIntent(newIntent) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- setPage() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- processIntent(newIntent) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- setPage() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- processIntent(newIntent) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- setPage() <- .
getView().setVisibility(View.VISIBLE) <- .
mSeperator.setVisibility(View.GONE) <- .
mCancel.setVisibility(View.GONE) <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mEmptyView.setVisibility(View.GONE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
setVisibility(View.GONE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mEmptyView.setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- mTimersList.setAdapter(mAdapter) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- processIntent(newIntent) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- setPage() <- .
------------------------------------
Lcom/android/deskclock/ScreensaverActivity$2249;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- .
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- .
nextAlarmView.setVisibility(View.GONE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- .
nextAlarmView.setVisibility(View.VISIBLE) <- Utils.refreshAlarm(ScreensaverActivity.this,mContentView) <- .
------------------------------------
Lcom/android/deskclock/widget/ActionableToastBar$7478;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$49663;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.expandArea.setVisibility(View.GONE) <- collapseAlarm(itemHolder,true) <- .
itemHolder.expandArea.setVisibility(View.VISIBLE) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.INVISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.GONE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.ringtone.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    launchRingTonePicker(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    final boolean checked=((CheckBox)v).isChecked();
    if (checked) {
      itemHolder.vibrate.setTextColor(mColorLit);
    }
 else {
      itemHolder.vibrate.setTextColor(mColorDim);
    }
    alarm.vibrate=checked;
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.dayButtonParents[i].setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    itemHolder.dayButtons[buttonIndex].toggle();
    final boolean checked=itemHolder.dayButtons[buttonIndex].isChecked();
    int day=DAY_ORDER[buttonIndex];
    alarm.daysOfWeek.setDaysOfWeek(checked,day);
    if (checked) {
      turnOnDayOfWeek(itemHolder,buttonIndex);
    }
 else {
      turnOffDayOfWeek(itemHolder,buttonIndex);
      if (!alarm.daysOfWeek.isRepeating()) {
        itemHolder.repeatDays.setVisibility(View.GONE);
        itemHolder.repeat.setTextColor(mColorDim);
        mRepeatChecked.remove(alarm.id);
        mPreviousDaysOfWeekMap.putInt("" + alarm.id,DaysOfWeek.NO_DAYS_SET);
      }
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeat.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    final boolean checked=((CheckBox)view).isChecked();
    if (checked) {
      itemHolder.repeatDays.setVisibility(View.VISIBLE);
      mRepeatChecked.add(alarm.id);
      final int bitSet=mPreviousDaysOfWeekMap.getInt("" + alarm.id);
      alarm.daysOfWeek.setBitSet(bitSet);
      if (!alarm.daysOfWeek.isRepeating()) {
        alarm.daysOfWeek.setDaysOfWeek(true,DAY_ORDER);
      }
      updateDaysOfWeekButtons(itemHolder,alarm.daysOfWeek);
    }
 else {
      itemHolder.repeatDays.setVisibility(View.GONE);
      mRepeatChecked.remove(alarm.id);
      final int bitSet=alarm.daysOfWeek.getBitSet();
      mPreviousDaysOfWeekMap.putInt("" + alarm.id,bitSet);
      alarm.daysOfWeek.clearAllDays();
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.clickableLabel.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    showLabelDialog(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$TimersListAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setEnabled(true) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setEnabled(canAddMinute(t)) <- TimerFragment.this.setTimerButtons(o) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
stop.setVisibility(View.INVISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
stop.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
labelText.setVisibility(View.VISIBLE) <- .
labelText.setVisibility(View.GONE) <- .
mCircleView.setVisibility(VISIBLE) <- v.done() <- .
mCircleView.setVisibility(VISIBLE) <- v.start() <- .
leftButton.setVisibility(View.INVISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
leftButton.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
delete.setVisibility(View.VISIBLE) <- TimerFragment.this.setTimerButtons(o) <- .
labelIcon.setVisibility(View.INVISIBLE) <- .
labelIcon.setVisibility(View.GONE) <- .
labelIcon.setVisibility(View.VISIBLE) <- .
this.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    runnable.run();
  }
}
) <- countingTimerView.registerVirtualButtonAction(new Runnable(){
  @Override public void run(){
    TimerFragment.this.onClickHelper(new ClickAction(ClickAction.ACTION_STOP,o));
  }
}
) <- .
leftButton.setOnClickListener(TimerFragment.this) <- .
delete.setOnClickListener(TimerFragment.this) <- .
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
this.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    runnable.run();
  }
}
) <- mTimeText.registerVirtualButtonAction(new Runnable(){
  @Override public void run(){
    rightButtonAction();
  }
}
) <- .
mShareButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    showSharePopup();
  }
}
) <- .
mLeftButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    long time=Utils.getTimeNow();
    Context context=getActivity().getApplicationContext();
    Intent intent=new Intent(context,StopwatchService.class);
    intent.putExtra(Stopwatches.MESSAGE_TIME,time);
    intent.putExtra(Stopwatches.SHOW_NOTIF,false);
switch (mState) {
case Stopwatches.STOPWATCH_RUNNING:
      addLapTime(time);
    doLap();
  intent.setAction(Stopwatches.LAP_STOPWATCH);
context.startService(intent);
break;
case Stopwatches.STOPWATCH_STOPPED:
doReset();
intent.setAction(Stopwatches.RESET_STOPWATCH);
context.startService(intent);
releaseWakeLock();
break;
default :
Log.i("Illegal state " + mState + " while pressing the left stopwatch button");
break;
}
}
}
) <- .
------------------------------------
Lcom/android/deskclock/worldclock/CitiesActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- .
startActivity(i) <- .
startActivity(new Intent(this,SettingsActivity.class)) <- .
------------------------------------
Lcom/android/deskclock/Screensaver$1971;.run()V
CHAINS:
dateDisplay.setVisibility(View.VISIBLE) <- Utils.updateDate(mDateFormat,mDateFormatForAccessibility,mContentView) <- .
------------------------------------
Lcom/android/deskclock/alarms/AlarmActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
setContentView(view) <- updateLayout() <- .
findViewById(R.id.glow_pad_view) <- updateLayout() <- .
findViewById(R.id.alertTitle) <- updateTitle() <- updateLayout() <- .
------------------------------------
Lcom/android/deskclock/timer/TimerAlertFullScreen;.dispatchKeyEvent(Landroid/view/KeyEvent;)Z
CHAINS:
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).done() <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).pause() <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(timesupTimers.remove()) <- timerFragment.stopAllTimesUpTimers() <- stopAllTimesUpTimers() <- .
------------------------------------
Lcom/android/deskclock/SettingsActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/deskclock/TimerSetupView;.onFinishInflate()V
CHAINS:
mNumbers[i].setOnClickListener(this) <- .
mDelete.setOnClickListener(this) <- .
mRight.setEnabled(enabled) <- setLeftRightEnabled(false) <- .
mLeft.setEnabled(enabled) <- setLeftRightEnabled(false) <- .
------------------------------------
Lcom/android/deskclock/widget/ActionableToastBar$6293;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment;.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V
CHAINS:
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mEmptyView.setVisibility(View.GONE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
setVisibility(View.GONE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mEmptyView.setVisibility(View.VISIBLE) <- updateEmptyStatus() <- mTimersList.setAdapter(mAdapter) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- mTimersList.setAdapter(mAdapter) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment;.onClick(Landroid/view/View;)V
CHAINS:
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(true) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(canAddMinute(t)) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setEnabled(canAddMinute(t)) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mDelete.setEnabled(enabled) <- mTimerSetup.updateDeleteButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
stop.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mSeperator.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCancel.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimersListPage.setVisibility(View.GONE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mTimerSetup.setVisibility(View.VISIBLE) <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).done() <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).stop() <- mAdapter.deleteTimer(t.mTimerId) <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).pause() <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mCircleView.setVisibility(VISIBLE) <- ((TimerListItem)t.mView).start() <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.INVISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
delete.setVisibility(t.mDeleteAfterUse ? View.INVISIBLE : View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
leftButton.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
delete.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
delete.setVisibility(View.VISIBLE) <- setTimerButtons(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_DONE) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_STOP) <- onStopButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.START_TIMER) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_RESET) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.TIMER_UPDATE) <- onPlusOneButtonPressed(clickAction.mTimer) <- onClickHelper(tag) <- .
mStart.setEnabled(enabled) <- mTimerSetup.updateStartButton() <- gotoSetupView() <- deleteTimer(t) <- updateTimersState(t,Timers.DELETE_TIMER) <- onClickHelper(tag) <- .
------------------------------------
Lcom/android/deskclock/LabelDialogFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
setButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    set(alarm,timer,tag);
  }
}
) <- .
cancelButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    dismiss();
  }
}
) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$28295;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mTimersListPage.setVisibility(View.VISIBLE) <- .
mTimerSetup.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/TimerSetupView;.onClick(Landroid/view/View;)V
CHAINS:
mDelete.setEnabled(enabled) <- updateDeleteButton() <- .
mStart.setEnabled(enabled) <- updateStartButton() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$50607;.onClick(Landroid/view/View;)V
CHAINS:
newFragment.show(ft,"label_dialog") <- showLabelDialog(alarm) <- .
------------------------------------
Lcom/android/deskclock/widget/ActionableToastBar$4535;.onClick(Landroid/view/View;)V
CHAINS:
setVisibility(View.GONE) <- hide(true) <- .
mActionButton.setOnClickListener(null) <- hide(true) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$39186;.run()V
CHAINS:
list.setEnabled(true) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$18048;.onClick(Landroid/view/View;)V
CHAINS:
mTimersListPage.setVisibility(View.VISIBLE) <- gotoTimersView() <- .
mTimerSetup.setVisibility(View.GONE) <- gotoTimersView() <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.setAdapter(Lcom/android/deskclock/widget/sgv/GridAdapter;Lcom/android/deskclock/widget/sgv/StaggeredGridView$ScrollState;)V
CHAINS:
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- setAdapter(adapter) <- .
mEmptyView.setVisibility(View.GONE) <- updateEmptyStatus() <- setAdapter(adapter) <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- setAdapter(adapter) <- .
setVisibility(View.GONE) <- updateEmptyStatus() <- setAdapter(adapter) <- .
mEmptyView.setVisibility(View.VISIBLE) <- updateEmptyStatus() <- setAdapter(adapter) <- .
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- setAdapter(adapter) <- .
------------------------------------
Lcom/android/deskclock/worldclock/CitiesActivity$CityAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
view.setEnabled(true) <- .
view.setEnabled(false) <- .
holder.time.setVisibility(View.VISIBLE) <- .
holder.selected.setVisibility(View.VISIBLE) <- .
holder.time.setVisibility(View.GONE) <- .
holder.selected.setVisibility(View.GONE) <- .
holder.selectedPin.setVisibility(View.GONE) <- .
holder.remove.setVisibility(View.GONE) <- .
holder.selectedPin.setVisibility(View.VISIBLE) <- .
holder.remove.setVisibility(View.VISIBLE) <- .
holder.selected.setOnCheckedChangeListener(CitiesActivity.this) <- .
view.setOnClickListener(CitiesActivity.this) <- .
holder.remove.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View view){
    CompoundButton b=holder.selected;
    onCheckedChanged(b,false);
    b.setChecked(false);
    mAdapter.refreshSelectedCities();
  }
}
) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.setEmptyView(Landroid/view/View;)V
CHAINS:
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
mEmptyView.setVisibility(View.GONE) <- updateEmptyStatus() <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
setVisibility(View.GONE) <- updateEmptyStatus() <- .
mEmptyView.setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$9580;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mEmptyView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView;.setItemMargin(I)V
CHAINS:
mDragView.setVisibility(INVISIBLE) <- updateReorderStates(ReorderUtils.DRAG_STATE_NONE) <- populate() <- .
------------------------------------
Lcom/android/deskclock/worldclock/WorldClockAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
dayOfWeek.setVisibility(View.GONE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
dayOfWeek.setVisibility(View.GONE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
dayOfWeek.setVisibility(View.VISIBLE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
dayOfWeek.setVisibility(View.VISIBLE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
aclock.setVisibility(View.GONE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
aclock.setVisibility(View.GONE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
separator.setVisibility(View.VISIBLE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
separator.setVisibility(View.VISIBLE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
dclock.setVisibility(View.VISIBLE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
dclock.setVisibility(View.VISIBLE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
aclock.setVisibility(View.VISIBLE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
aclock.setVisibility(View.VISIBLE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
separator.setVisibility(View.GONE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
separator.setVisibility(View.GONE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
dclock.setVisibility(View.GONE) <- updateView(rightClock,(CityObj)mCitiesList[index + 1]) <- .
dclock.setVisibility(View.GONE) <- updateView(view.findViewById(R.id.city_left),(CityObj)mCitiesList[index]) <- .
rightClock.setVisibility(View.INVISIBLE) <- .
rightClock.setVisibility(View.GONE) <- .
aclock.setVisibility(View.GONE) <- .
dclock.setVisibility(View.INVISIBLE) <- .
aclock.setVisibility(View.INVISIBLE) <- .
dclock.setVisibility(View.GONE) <- .
rightClock.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/deskclock/alarms/AlarmActivity$4115;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment;.onPause()V
CHAINS:
mUndoFrame.setVisibility(View.GONE) <- hideUndoBar(false,null) <- .
setVisibility(View.GONE) <- mUndoBar.hide(animate) <- hideUndoBar(false,null) <- .
mActionButton.setOnClickListener(null) <- mUndoBar.hide(animate) <- hideUndoBar(false,null) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$52951;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.repeatDays.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerAlertFullScreen;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.timer_alert_full_screen) <- .
findViewById(R.id.fragment_container) <- .
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$26751;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mTimerSetup.setVisibility(View.VISIBLE) <- .
mTimersListPage.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/deskclock/widget/sgv/StaggeredGridView$AdapterDataSetObserver;.onChanged()V
CHAINS:
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
mEmptyView.setVisibility(View.GONE) <- updateEmptyStatus() <- .
setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
setVisibility(View.GONE) <- updateEmptyStatus() <- .
mEmptyView.setVisibility(View.VISIBLE) <- updateEmptyStatus() <- .
------------------------------------
Lcom/android/deskclock/DeskClock;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(mViewPager) <- initViews() <- .
------------------------------------
Lcom/android/deskclock/HandleApiCalls;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- handleSetAlarm(intent) <- .
finish() <- handleSetAlarm(intent) <- .
finish() <- handleSetAlarm(intent) <- .
finish() <- .
startActivity(showAlarm) <- setupInstance(alarm.createInstanceAfter(Calendar.getInstance()),skipUi) <- handleSetAlarm(intent) <- .
startActivity(showAlarm) <- setupInstance(alarm.createInstanceAfter(Calendar.getInstance()),skipUi) <- handleSetAlarm(intent) <- .
startActivity(new Intent(this,DeskClock.class).putExtra(DeskClock.SELECT_TAB_INTENT_EXTRA,DeskClock.TIMER_TAB_INDEX)) <- handleSetTimer(intent) <- .
startActivity(new Intent(this,DeskClock.class).putExtra(DeskClock.SELECT_TAB_INTENT_EXTRA,DeskClock.TIMER_TAB_INDEX).putExtra(TimerFragment.GOTO_SETUP_VIEW,true)) <- handleSetTimer(intent) <- .
startActivity(new Intent(this,DeskClock.class).putExtra(DeskClock.SELECT_TAB_INTENT_EXTRA,DeskClock.ALARM_TAB_INDEX)) <- handleShowAlarms() <- .
startActivity(createAlarm) <- handleSetAlarm(intent) <- .
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$47691;.onClick(Landroid/view/View;)V
CHAINS:
itemHolder.expandArea.setVisibility(View.VISIBLE) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setVisibility(View.INVISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.GONE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeatDays.setVisibility(View.VISIBLE) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.ringtone.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    launchRingTonePicker(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.vibrate.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    final boolean checked=((CheckBox)v).isChecked();
    if (checked) {
      itemHolder.vibrate.setTextColor(mColorLit);
    }
 else {
      itemHolder.vibrate.setTextColor(mColorDim);
    }
    alarm.vibrate=checked;
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.dayButtonParents[i].setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    itemHolder.dayButtons[buttonIndex].toggle();
    final boolean checked=itemHolder.dayButtons[buttonIndex].isChecked();
    int day=DAY_ORDER[buttonIndex];
    alarm.daysOfWeek.setDaysOfWeek(checked,day);
    if (checked) {
      turnOnDayOfWeek(itemHolder,buttonIndex);
    }
 else {
      turnOffDayOfWeek(itemHolder,buttonIndex);
      if (!alarm.daysOfWeek.isRepeating()) {
        itemHolder.repeatDays.setVisibility(View.GONE);
        itemHolder.repeat.setTextColor(mColorDim);
        mRepeatChecked.remove(alarm.id);
        mPreviousDaysOfWeekMap.putInt("" + alarm.id,DaysOfWeek.NO_DAYS_SET);
      }
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.repeat.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    final boolean checked=((CheckBox)view).isChecked();
    if (checked) {
      itemHolder.repeatDays.setVisibility(View.VISIBLE);
      mRepeatChecked.add(alarm.id);
      final int bitSet=mPreviousDaysOfWeekMap.getInt("" + alarm.id);
      alarm.daysOfWeek.setBitSet(bitSet);
      if (!alarm.daysOfWeek.isRepeating()) {
        alarm.daysOfWeek.setDaysOfWeek(true,DAY_ORDER);
      }
      updateDaysOfWeekButtons(itemHolder,alarm.daysOfWeek);
    }
 else {
      itemHolder.repeatDays.setVisibility(View.GONE);
      mRepeatChecked.remove(alarm.id);
      final int bitSet=alarm.daysOfWeek.getBitSet();
      mPreviousDaysOfWeekMap.putInt("" + alarm.id,bitSet);
      alarm.daysOfWeek.clearAllDays();
    }
    asyncUpdateAlarm(alarm,false);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
itemHolder.clickableLabel.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    showLabelDialog(alarm);
  }
}
) <- bindExpandArea(itemHolder,itemHolder.alarm) <- expandAlarm(itemHolder,true) <- .
------------------------------------
------------------------------------
Lcom/android/deskclock/alarms/AlarmActivity;
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment$ImageLabelAdapter;
------------------------------------
Lcom/android/deskclock/HandleApiCalls;
------------------------------------
Lcom/android/deskclock/worldclock/CitiesActivity;
------------------------------------
Lcom/android/deskclock/widget/sgv/GridAdapter;
------------------------------------
Lcom/android/deskclock/DeskClock;
------------------------------------
Lcom/android/deskclock/ScreensaverActivity;
------------------------------------
Lcom/android/deskclock/timer/TimerAlertFullScreen;
------------------------------------
Lcom/android/deskclock/stopwatch/StopwatchFragment$LapsListAdapter;
------------------------------------
Lcom/android/deskclock/worldclock/WorldClockAdapter;
------------------------------------
Lcom/android/deskclock/timer/TimerFragment$TimersListAdapter;
------------------------------------
Lcom/android/deskclock/tests/TestAddAlarm;
------------------------------------
Lcom/android/deskclock/worldclock/CitiesActivity$CityAdapter;
------------------------------------
Lcom/android/deskclock/ScreensaverSettingsActivity;
------------------------------------
Lcom/android/deskclock/SettingsActivity;
------------------------------------
Lcom/android/deskclock/AlarmClockFragment$AlarmItemAdapter;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Email
start doc
end doc
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testGoodUri()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment$5814;.run()V
CHAINS:
mSecurityTypeView.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
  @Override public void onItemSelected(  AdapterView<?> arg0,  View arg1,  int arg2,  long arg3){
    updatePortFromSecurityType();
  }
  @Override public void onNothingSelected(  AdapterView<?> arg0){
  }
}
) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testBackgroundAttachmentsEas()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- checkBackgroundAttachments("eas://user:password@server.com",true) <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- checkBackgroundAttachments("eas://user:password@server.com",true) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment;.onStart()V
CHAINS:
mProceedButton.setEnabled(enable) <- enableNextButton(enabled) <- validateFields() <- loadSettings() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountCheckSettingsFragment$CheckingDialog;.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
CHAINS:
dialog.setButton(DialogInterface.BUTTON_NEGATIVE,context.getString(R.string.cancel_action),new DialogInterface.OnClickListener(){
  @Override public void onClick(  DialogInterface dialog,  int which){
    dismiss();
    final AccountCheckSettingsFragment target=(AccountCheckSettingsFragment)getTargetFragment();
    if (target != null) {
      target.onCheckingDialogCancel();
    }
  }
}
) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings$33847;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
dialogFragment.show(getFragmentManager(),UnsavedChangesDialogFragment.TAG) <- onBackPressed() <- activity.forceBack() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics$DuplicateCheckTask;.onPostExecute(Ljava/lang/String;)V
CHAINS:
dialogFragment.show(getFragmentManager(),DuplicateAccountDialogFragment.TAG) <- .
fromActivity.startActivity(i) <- AccountSetupType.actionSelectAccountType(this,mSetupData) <- onManualSetup(true) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testPushOptionIMAP()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/EventViewer;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
finish() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptions;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.account_setup_options) <- .
mCreateAccountDialog.show() <- showCreateAccountDialog() <- onDone() <- .
mCreateAccountDialog.show() <- showCreateAccountDialog() <- .
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(this,R.id.account_background_attachments_divider,View.GONE) <- .
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(this,R.id.account_sync_calendar_divider,View.VISIBLE) <- .
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(this,R.id.account_sync_contacts_divider,View.VISIBLE) <- .
mAccountSyncWindowRow.setVisibility(View.VISIBLE) <- enableLookbackSpinner() <- .
mBackgroundAttachmentsView.setVisibility(View.GONE) <- .
mSyncCalendarView.setVisibility(View.VISIBLE) <- .
mSyncContactsView.setVisibility(View.VISIBLE) <- .
parent.findViewById(viewId) <- UiUtilities.setVisibilitySafe(this,R.id.account_background_attachments_divider,View.GONE) <- .
parent.findViewById(viewId) <- UiUtilities.setVisibilitySafe(this,R.id.account_sync_calendar_divider,View.VISIBLE) <- .
parent.findViewById(viewId) <- UiUtilities.setVisibilitySafe(this,R.id.account_sync_contacts_divider,View.VISIBLE) <- .
------------------------------------
Lcom/android/email/activity/setup/EditQuickResponseDialog$3578;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(s.length() > 0) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment;.onResume()V
CHAINS:
mProceedButton.setEnabled(enable) <- enableNextButton(enabled) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment;.onCheckedChanged(Landroid/widget/CompoundButton;Z)V
CHAINS:
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(getView(),R.id.account_require_login_settings_2,visibility) <- .
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(getView(),R.id.account_require_login_settings,visibility) <- .
mProceedButton.setEnabled(enable) <- enableNextButton(enabled) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/InsertQuickResponseDialog;.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
CHAINS:
listView.setOnItemClickListener(new OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    final Cursor c=(Cursor)listView.getItemAtPosition(position);
    final String quickResponseText=c.getString(c.getColumnIndex(UIProvider.QuickResponseColumns.TEXT));
    getCallback().onQuickResponseSelected(quickResponseText);
    dismiss();
  }
}
) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testGoodUriNoPort()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings$AccountSettingsFragmentCallback;.abandonEdit()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testBadUriNoUser()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mName.addTextChangedListener(validationTextWatcher) <- .
setContentView(R.layout.account_setup_names) <- .
accountNameLabel.setVisibility(View.GONE) <- .
mName.setVisibility(View.GONE) <- .
mNextButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    onNext();
  }
}
) <- .
mNextButton.setEnabled(false) <- onNext() <- .
mNextButton.setEnabled(enableNextButton) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames$3248;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mNextButton.setEnabled(enableNextButton) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/EditQuickResponseDialog;.onResume()V
CHAINS:
mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(false) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames$FinalSetupTask;.onPostExecute(Ljava/lang/Boolean;)V
CHAINS:
startActivityForResult(i,REQUEST_SECURITY) <- .
finish() <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinished(this,account) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedWithResult(this) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedAccountFlow(this) <- finishActivity() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testBadUriNoPassword()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/UiUtilities;.getViewOrNull<T:Landroid/view/View;>(Landroid/app/Activity;I)TT;
CHAINS:
parent.findViewById(viewId) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testGoodServerVariants()V
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames;.onBackPressed()V
CHAINS:
finish() <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinished(this,account) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedWithResult(this) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedAccountFlow(this) <- finishActivity() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testGoodUriNoPort()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncoming;.onCheckSettingsComplete(ILcom/android/email/activity/setup/SetupData;)V
CHAINS:
finish() <- .
fromActivity.startActivity(intent) <- AccountSetupOptions.actionOptions(this,mSetupData) <- .
fromActivity.startActivity(intent) <- AccountSetupOutgoing.actionOutgoingSettings(this,mSetupData) <- .
------------------------------------
Lcom/android/email/activity/ActivityHelper;.showSecurityHoldDialog(Landroid/app/Activity;J)V
CHAINS:
callerActivity.startActivity(AccountSecurity.actionUpdateSecurityIntent(callerActivity,accountId,true)) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.setCallback(Lcom/android/email/activity/setup/AccountServerBaseFragment$Callback;)V
CHAINS:
mDeviceIdSectionView.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- loadSettings() <- .
mClientCertificateSelector.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- loadSettings() <- .
mDeletePolicyView.setVisibility(View.GONE) <- configureEditor() <- .
mDeletePolicyLabelView.setVisibility(View.GONE) <- configureEditor() <- .
mImapPathPrefixSectionView.setVisibility(View.GONE) <- configureEditor() <- .
mProceedButton.setEnabled(enable) <- enableNextButton(!TextUtils.isEmpty(mUsernameView.getText()) && !TextUtils.isEmpty(mPasswordView.getText()) && Utility.isServerNameValid(mServerView)&& Utility.isPortFieldValid(mPortView)) <- validateFields() <- loadSettings() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings$LoginWarningDialog;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
getActivity().finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;.deleteAccount(Lcom/android/emailcommon/provider/Account;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/ComposeActivityEmail;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
dialog.show(getFragmentManager(),insertQuickResponseDialogTag) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinished(this,account) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedWithResult(this) <- finishActivity() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionAccountCreateFinishedAccountFlow(this) <- finishActivity() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testBackgroundAttachmentsImap()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- checkBackgroundAttachments("imap://user:password@server.com",true) <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- checkBackgroundAttachments("imap://user:password@server.com",true) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSecurity$PasswordExpirationDialog;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
activity.finish() <- .
activity.startActivity(intent) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testBadServerVariants()V
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testPushOptionPOP()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoing;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.account_setup_outgoing) <- .
mNextButton.setOnClickListener(this) <- .
mProceedButton.setEnabled(enable) <- enableNextButton(enabled) <- validateFields() <- loadSettings() <- mFragment.setCallback(this) <- .
------------------------------------
Lcom/android/emailcommon/utility/CertificateRequestor;.alias(Ljava/lang/String;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;.onHeaderClick(Landroid/preference/PreferenceActivity$Header;I)V
CHAINS:
dialogFragment.show(getFragmentManager(),UnsavedChangesDialogFragment.TAG) <- .
------------------------------------
Lcom/android/email/RequireManualSyncDialog;.(Landroid/content/Context;Lcom/android/emailcommon/provider/Account;)V
CHAINS:
setButton(DialogInterface.BUTTON_POSITIVE,context.getString(android.R.string.ok),this) <- .
------------------------------------
Lcom/android/email2/ui/CreateShortcutActivityEmail;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics$29907;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
fromActivity.startActivity(i) <- AccountSetupType.actionSelectAccountType(this,mSetupData) <- onManualSetup(true) <- ((AccountSetupBasics)a).finishAutoSetup() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mNextButton.setEnabled(enabled) <- onEnableProceedButtons(valid) <- validateFields() <- .
mManualButton.setEnabled(enabled) <- onEnableProceedButtons(valid) <- validateFields() <- .
------------------------------------
Lcom/android/email/provider/FolderPickerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mDialog.show() <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
mDialog.show() <- dialog.show() <- startPicker(uiAccount.folderListUri,headerId) <- .
mWaitingForFoldersDialog.show() <- waitForFolders() <- .
mDialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    final Object item=mAdapter.getItem(position);
    if (item instanceof FolderRow) {
      update((FolderRow)item);
    }
  }
}
) <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
mDialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    final Object item=mAdapter.getItem(position);
    if (item instanceof FolderRow) {
      update((FolderRow)item);
    }
  }
}
) <- dialog.show() <- startPicker(uiAccount.folderListUri,headerId) <- .
finish() <- .
finish() <- .
finish() <- .
finish() <- .
finish() <- .
button.setEnabled(false) <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
button.setEnabled(false) <- dialog.show() <- startPicker(uiAccount.folderListUri,headerId) <- .
------------------------------------
Lcom/android/email/provider/FolderPickerActivity;.select(LFolder;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptions$16519;.doInBackground([Ljava/lang/Void;)Ljava/lang/Void;
CHAINS:
fromActivity.startActivity(intent) <- AccountSetupNames.actionSetNames(context,mSetupData) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupType$DuplicateCheckTask;.onPostExecute(Ljava/lang/String;)V
CHAINS:
dialogFragment.show(AccountSetupType.this.getFragmentManager(),DuplicateAccountDialogFragment.TAG) <- .
finish() <- onProceedNext() <- .
fromActivity.startActivity(intent) <- AccountSetupIncoming.actionIncomingSettings(this,mSetupData) <- onProceedNext() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncoming;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.account_setup_incoming) <- .
mNextButton.setOnClickListener(this) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment$6345;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mProceedButton.setEnabled(enable) <- enableNextButton(!TextUtils.isEmpty(mUsernameView.getText()) && !TextUtils.isEmpty(mPasswordView.getText()) && Utility.isServerNameValid(mServerView)&& Utility.isPortFieldValid(mPortView)) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testGoodUri()V
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testGoodServerVariants()V
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames$3057;.onClick(Landroid/view/View;)V
CHAINS:
mNextButton.setEnabled(false) <- onNext() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoing;.onEnableProceedButtons(Z)V
CHAINS:
mNextButton.setEnabled(enable) <- .
------------------------------------
Lcom/android/email/provider/FolderPickerActivity;.cancel()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncoming;.onEnableProceedButtons(Z)V
CHAINS:
mNextButton.setEnabled(enable) <- .
------------------------------------
Lcom/android/email/activity/setup/EditQuickResponseDialog;.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
CHAINS:
mQuickResponseEditText.addTextChangedListener(new TextWatcher(){
  @Override public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){
  }
  @Override public void onTextChanged(  CharSequence s,  int start,  int before,  int count){
  }
  @Override public void afterTextChanged(  Editable s){
    mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(s.length() > 0);
  }
}
) <- .
------------------------------------
Lcom/android/email/provider/FolderPickerDialog$3165;.onItemClick(Landroid/widget/AdapterView<*>;Landroid/view/View;IJ)V
CHAINS:
button.setEnabled(true) <- update((FolderRow)item) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingTests;.testPasswordNoTrim()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_password) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/provider/FolderPickerActivity$AccountObserver;.onChange(Z)V
CHAINS:
mDialog.show() <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
mDialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    final Object item=mAdapter.getItem(position);
    if (item instanceof FolderRow) {
      update((FolderRow)item);
    }
  }
}
) <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
button.setEnabled(false) <- dialog.show() <- startPicker(uri,headerId) <- startPickerForAccount() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testBadUriNoPassword()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testPushOptionEAS()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSecurity$SecurityNeededDialog;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivityForResult(intent,REQUEST_ENCRYPTION) <- activity.tryAdvanceSecurity(activity.mAccount) <- .
startActivityForResult(intent,REQUEST_PASSWORD) <- activity.tryAdvanceSecurity(activity.mAccount) <- .
startActivityForResult(intent,REQUEST_ENABLE) <- activity.tryAdvanceSecurity(activity.mAccount) <- .
activity.finish() <- .
activity.finish() <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
finish() <- activity.tryAdvanceSecurity(activity.mAccount) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    final Cursor c=(Cursor)listView.getItemAtPosition(position);
    final String quickResponseText=c.getString(c.getColumnIndex(UIProvider.QuickResponseColumns.TEXT));
    final Uri uri=Utils.getValidUri(c.getString(c.getColumnIndex(UIProvider.QuickResponseColumns.URI)));
    EditQuickResponseDialog.newInstance(quickResponseText,uri,false).show(getFragmentManager(),null);
  }
}
) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment$6611;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mProceedButton.setEnabled(enable) <- enableNextButton(enabled) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testPasswordNoTrim()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupType;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testBadUriNoUser()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.onDestroyView()V
CHAINS:
mSecurityTypeView.setOnItemSelectedListener(null) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.onStart()V
CHAINS:
mDeviceIdSectionView.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- loadSettings() <- .
mClientCertificateSelector.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- loadSettings() <- .
mDeletePolicyView.setVisibility(View.GONE) <- configureEditor() <- .
mDeletePolicyLabelView.setVisibility(View.GONE) <- configureEditor() <- .
mImapPathPrefixSectionView.setVisibility(View.GONE) <- configureEditor() <- .
mProceedButton.setEnabled(enable) <- enableNextButton(!TextUtils.isEmpty(mUsernameView.getText()) && !TextUtils.isEmpty(mPasswordView.getText()) && Utility.isServerNameValid(mServerView)&& Utility.isPortFieldValid(mPortView)) <- validateFields() <- loadSettings() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics;.onClick(Landroid/view/View;)V
CHAINS:
dialogFragment.show(getFragmentManager(),NoteDialogFragment.TAG) <- onNext() <- .
fromActivity.startActivity(i) <- AccountSetupType.actionSelectAccountType(this,mSetupData) <- onManualSetup(true) <- finishAutoSetup() <- onNext() <- .
fromActivity.startActivity(i) <- AccountSetupType.actionSelectAccountType(this,mSetupData) <- onManualSetup(false) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingTests;.testBadServerVariants()V
CHAINS:
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
mActivity.findViewById(R.id.account_server) <- getActivityAndFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;.actionSettings(Landroid/app/Activity;J)V
CHAINS:
fromActivity.startActivity(createAccountSettingsIntent(accountId,null,null)) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptions$12551;.run()V
CHAINS:
startActivityForResult(intent,AccountSetupOptions.REQUEST_CODE_ACCEPT_POLICIES) <- optionsComplete() <- .
------------------------------------
Lcom/android/email/activity/UiUtilities;.getView<T:Landroid/view/View;>(Landroid/app/Activity;I)TT;
CHAINS:
parent.findViewById(viewId) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoing;.onCheckSettingsComplete(ILcom/android/email/activity/setup/SetupData;)V
CHAINS:
finish() <- .
fromActivity.startActivity(intent) <- AccountSetupOptions.actionOptions(this,mSetupData) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSecurity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
startActivityForResult(intent,REQUEST_ENCRYPTION) <- tryAdvanceSecurity(mAccount) <- .
startActivityForResult(intent,REQUEST_PASSWORD) <- tryAdvanceSecurity(mAccount) <- .
startActivityForResult(intent,REQUEST_ENABLE) <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptions;.onClick(Landroid/view/View;)V
CHAINS:
mCreateAccountDialog.show() <- showCreateAccountDialog() <- onDone() <- .
------------------------------------
Lcom/android/email/activity/ActivityHelper;.openUrlInMessage(Landroid/app/Activity;Ljava/lang/String;J)Z
CHAINS:
activity.startActivity(intent) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.onAutoDiscoverComplete(ILcom/android/email/activity/setup/SetupData;)V
CHAINS:
finish() <- activity.onAutoDiscoverComplete(result,setupData) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mPasswordView.addTextChangedListener(this) <- .
mEmailView.addTextChangedListener(this) <- .
setContentView(R.layout.account_setup_basics) <- .
mManualButton.setVisibility(View.VISIBLE) <- .
mNextButton.setOnClickListener(this) <- .
mManualButton.setOnClickListener(this) <- .
mNextButton.setEnabled(enabled) <- onEnableProceedButtons(false) <- .
mManualButton.setEnabled(enabled) <- onEnableProceedButtons(false) <- .
fromActivity.startActivity(intent) <- AccountSetupOptions.actionOptions(this,mSetupData) <- onCheckSettingsComplete(AccountCheckSettingsFragment.CHECK_SETTINGS_OK,mSetupData) <- .
------------------------------------
Lcom/android/email/activity/setup/MailboxSettings$LoadMailboxTask;.onSuccess(Ljava/lang/Void;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSecurity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
dialog.show(fm,"security_needed") <- .
dialog.show(fm,"password_expiration") <- .
startActivityForResult(intent,REQUEST_ENCRYPTION) <- tryAdvanceSecurity(mAccount) <- .
startActivityForResult(intent,REQUEST_PASSWORD) <- tryAdvanceSecurity(mAccount) <- .
startActivityForResult(intent,REQUEST_ENABLE) <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- tryAdvanceSecurity(mAccount) <- .
finish() <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupType;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.account_setup_account_type) <- .
previousButton.setOnClickListener(this) <- .
button.setOnClickListener(this) <- .
findViewById(R.id.previous) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoingFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mPortView.addTextChangedListener(validationTextWatcher) <- .
mServerView.addTextChangedListener(validationTextWatcher) <- .
mPasswordView.addTextChangedListener(validationTextWatcher) <- .
mUsernameView.addTextChangedListener(validationTextWatcher) <- .
mProceedButton.setOnClickListener(this) <- onCreateViewSettingsMode(view) <- .
mProceedButton.setEnabled(false) <- onCreateViewSettingsMode(view) <- .
mRequireLoginView.setOnCheckedChangeListener(this) <- .
------------------------------------
Lcom/android/email/activity/setup/MailboxSettings;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptionsTests;.testBackgroundAttachmentsPop()V|Ljava/net/URISyntaxException;
CHAINS:
mActivity.findViewById(R.id.account_background_attachments) <- getActivityAndFields() <- checkBackgroundAttachments("pop3://user:password@server.com",false) <- .
mActivity.findViewById(R.id.account_check_frequency) <- getActivityAndFields() <- checkBackgroundAttachments("pop3://user:password@server.com",false) <- .
------------------------------------
Lcom/android/email/activity/UiUtilitiesTests;.testSetVisibilitySafe()V
CHAINS:
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(a,5,View.VISIBLE) <- .
v.setVisibility(visibility) <- setVisibilitySafe(parent.findViewById(viewId),visibility) <- UiUtilities.setVisibilitySafe(a,3,View.VISIBLE) <- .
v.setVisibility(visibility) <- UiUtilities.setVisibilitySafe(null,View.VISIBLE) <- .
v.setVisibility(visibility) <- UiUtilities.setVisibilitySafe(v,View.VISIBLE) <- .
parent.findViewById(viewId) <- UiUtilities.setVisibilitySafe(a,5,View.VISIBLE) <- .
parent.findViewById(viewId) <- UiUtilities.setVisibilitySafe(a,3,View.VISIBLE) <- .
------------------------------------
Lcom/android/email/view/CertificateSelector;.onFinishInflate()V
CHAINS:
mSelectButton.setOnClickListener(this) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettingsEditQuickResponsesFragment$4903;.onItemClick(Landroid/widget/AdapterView<*>;Landroid/view/View;IJ)V
CHAINS:
EditQuickResponseDialog.newInstance(quickResponseText,uri,false).show(getFragmentManager(),null) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mPortView.addTextChangedListener(mValidationTextWatcher) <- .
mServerView.addTextChangedListener(mValidationTextWatcher) <- .
mPasswordView.addTextChangedListener(mValidationTextWatcher) <- .
mUsernameView.addTextChangedListener(mValidationTextWatcher) <- .
mSecurityTypeView.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
  @Override public void onItemSelected(  AdapterView<?> arg0,  View arg1,  int arg2,  long arg3){
    updatePortFromSecurityType();
  }
  @Override public void onNothingSelected(  AdapterView<?> arg0){
  }
}
) <- .
view.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    if (view.getError() == null) {
      view.setError(errorMessage);
    }
 else {
      view.setError(null);
    }
  }
}
) <- makeTextViewUneditable(mUsernameView,getString(R.string.account_setup_username_uneditable_error)) <- .
mProceedButton.setOnClickListener(this) <- onCreateViewSettingsMode(view) <- .
mProceedButton.setEnabled(false) <- onCreateViewSettingsMode(view) <- .
------------------------------------
Lcom/android/email/activity/setup/DebugFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mEnableFileLoggingView.setVisibility(View.GONE) <- .
mEnableVerboseLoggingView.setVisibility(View.GONE) <- .
mEnableStrictModeView.setOnCheckedChangeListener(this) <- .
mInhibitGraphicsAccelerationView.setOnCheckedChangeListener(this) <- .
mEnableFileLoggingView.setOnCheckedChangeListener(this) <- .
mEnableVerboseLoggingView.setOnCheckedChangeListener(this) <- .
mEnableDebugLoggingView.setOnCheckedChangeListener(this) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings$AccountServerSettingsFragmentCallback;.onCheckSettingsComplete(ILcom/android/email/activity/setup/SetupData;)V
CHAINS:
dialogFragment.show(getFragmentManager(),UnsavedChangesDialogFragment.TAG) <- onBackPressed() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;.onCreate(Landroid/os/Bundle;)V
CHAINS:
dialog.show(getFragmentManager(),"loginwarning") <- .
finish() <- launchMailboxSettings(i) <- .
finish() <- .
parent.startActivity(i) <- MailboxSettings.start(this,mailboxId) <- launchMailboxSettings(i) <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionNewAccountWithResult(this) <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
dialogFragment.show(getFragmentManager(),UnsavedChangesDialogFragment.TAG) <- onBackPressed() <- .
fromActivity.startActivity(i) <- AccountSetupBasics.actionNewAccount(this) <- onAddNewAccount() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment;.onResume()V
CHAINS:
mProceedButton.setEnabled(enable) <- enableNextButton(!TextUtils.isEmpty(mUsernameView.getText()) && !TextUtils.isEmpty(mPasswordView.getText()) && Utility.isServerNameValid(mServerView)&& Utility.isPortFieldValid(mPortView)) <- validateFields() <- .
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncomingFragment$5893;.onItemSelected(Landroid/widget/AdapterView<*>;Landroid/view/View;IJ)V
CHAINS:
mDeviceIdSectionView.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- .
mClientCertificateSelector.setVisibility(mode) <- onUseSslChanged(sslSelected) <- updatePortFromSecurityType() <- .
------------------------------------
------------------------------------
Lcom/android/email/activity/setup/AccountSecurity;
------------------------------------
Lcom/android/emailcommon/utility/CertificateRequestor;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOutgoing;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupBasics;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupOptions;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupType;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupActivity;
------------------------------------
Lcom/android/email/provider/FolderPickerActivity;
------------------------------------
Lcom/android/email/activity/setup/MailboxSettings;
------------------------------------
Lcom/android/email2/ui/CreateShortcutActivityEmail;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupNames;
------------------------------------
Lcom/android/email/activity/setup/AccountSettings;
------------------------------------
Lcom/android/email/activity/setup/AccountSetupIncoming;
------------------------------------
Lcom/android/email/activity/EventViewer;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/Mms
start doc
end doc
Lcom/android/mms/ui/ConfirmRateLimitActivity$1781;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- doAnswer(true) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$18148;.handleMessage(Landroid/os/Message;)V
CHAINS:
finish() <- sendMessage(true) <- ComposeMessageActivity.this.confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- ComposeMessageActivity.this.confirmSendMessageIfNeeded() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$13669;.run()V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivityForResult(intent,REQUEST_CODE_EDIT_SLIDE) <- openSlide(position) <- .
------------------------------------
Lcom/android/mms/ui/SearchActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.search_activity) <- .
getListView() <- .
------------------------------------
Lcom/android/smsautoreply/AutoReplyActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.main) <- .
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
finish() <- queueMsgFromIntent(msgIntent) <- .
------------------------------------
Lcom/android/mms/ui/BasicSlideEditorView;.setAudio(Landroid/net/Uri;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;*>;)V
CHAINS:
mAudioView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- queueMsgFromIntent(getIntent()) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$21145;.handleMessage(Landroid/os/Message;)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
findViewById(R.id.subject) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- editMessageItem(msgItem) <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- editMessageItem(msgItem) <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- editMessageItem(msgItem) <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- editMessageItem(msgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- editMessageItem(msgItem) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(msgItem) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$ModeCallback;.onItemCheckedStateChanged(Landroid/view/ActionMode;IJZ)V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setAudio(Landroid/net/Uri;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;*>;)V
CHAINS:
mAudioInfoView.setVisibility(View.GONE) <- initAudioInfoView(name) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$144475;.onSizeChanged(IIII)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- loadMessagesAndDraft(3) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- loadMessagesAndDraft(3) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- loadMessagesAndDraft(3) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- loadMessagesAndDraft(3) <- .
------------------------------------
Lcom/android/mms/ui/RecipientListActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
getListView() <- .
finish() <- .
finish() <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity$10450;.onClick(Landroid/view/View;)V
CHAINS:
startActivityForResult(intent,REQUEST_CODE_CHANGE_PICTURE) <- .
------------------------------------
Lcom/android/mms/ui/MessageListItem$ImageLoadedCallback;.onItemLoaded(Lcom/android/mms/util/ThumbnailManager$ImageLoaded;Ljava/lang/Throwable;)V
CHAINS:
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- mListItem.setVideoThumbnail(null,imageLoaded.mBitmap) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- mListItem.setImage(null,imageLoaded.mBitmap) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(true) <- mListItem.setVideoThumbnail(null,imageLoaded.mBitmap) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(true) <- mListItem.setImage(null,imageLoaded.mBitmap) <- .
mImageView.setVisibility(VISIBLE) <- mListItem.setVideoThumbnail(null,imageLoaded.mBitmap) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- mListItem.setVideoThumbnail(null,imageLoaded.mBitmap) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- mListItem.setImage(null,imageLoaded.mBitmap) <- .
mImageView.setVisibility(VISIBLE) <- mListItem.setImage(null,imageLoaded.mBitmap) <- .
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity;.onResume()V
CHAINS:
finish() <- doAnswer(false) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages$QueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_LIST) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_LIST) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
getListView() <- .
finish() <- .
finish() <- .
mAddSlideItem.setVisibility(View.VISIBLE) <- adjustAddSlideVisibility() <- .
mAddSlideItem.setVisibility(View.GONE) <- adjustAddSlideVisibility() <- .
text.setVisibility(View.VISIBLE) <- createAddSlideItem() <- .
mAddSlideItem.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity$9388;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$103247;.run()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
getListView() <- .
startActivity(ComposeMessageActivity.createIntent(this,threadId)) <- openThread(tid) <- .
------------------------------------
Lcom/android/mms/ui/DeliveryReportActivity;.onResume()V
CHAINS:
getListView() <- refreshDeliveryReport() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$ModeCallback;.onDestroyActionMode(Landroid/view/ActionMode;)V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$DiscardDraftListener;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/MessageUtils$35196;.run()V
CHAINS:
((Activity)context).startActivityForResult(intent,requestCode) <- launchSlideshowActivity(activity,msgUri,requestCode) <- .
------------------------------------
Lcom/android/mms/ui/MessageListAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
mImageView.setOnClickListener(null) <- setOnClickListener(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    sendMessage(msgItem,MSG_LIST_PLAY);
  }
}
) <- setOnClickListener(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    onMessageListItemClick();
  }
}
) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mSlideShowButton.setOnClickListener(this) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    mDownloadingLabel.setVisibility(View.VISIBLE);
    mDownloadButton.setVisibility(View.GONE);
    Intent intent=new Intent(mContext,TransactionService.class);
    intent.putExtra(TransactionBundle.URI,mMessageItem.mMessageUri.toString());
    intent.putExtra(TransactionBundle.TRANSACTION_TYPE,Transaction.RETRIEVE_TRANSACTION);
    mContext.startService(intent);
    DownloadManager.getInstance().markState(mMessageItem.mMessageUri,DownloadManager.STATE_PRE_DOWNLOADING);
  }
}
) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(false) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadingLabel.setVisibility(View.GONE) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadButton.setVisibility(View.GONE) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadButton.setVisibility(View.GONE) <- showDownloadingAttachment() <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadButton.setVisibility(View.GONE) <- showDownloadingAttachment() <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadingLabel.setVisibility(View.VISIBLE) <- showDownloadingAttachment() <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadingLabel.setVisibility(View.VISIBLE) <- showDownloadingAttachment() <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadButton.setVisibility(View.VISIBLE) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDownloadingLabel.setVisibility(View.GONE) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDetailsIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDetailsIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDeliveredIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDeliveredIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDeliveredIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mLockedIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mLockedIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mSlideShowButton.setVisibility(View.GONE) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mSlideShowButton.setVisibility(View.VISIBLE) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mImageView.setVisibility(VISIBLE) <- setImage(null,null) <- bindCommonMessage(sameItem) <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDetailsIndicator.setVisibility(View.GONE) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mDeliveredIndicator.setVisibility(View.GONE) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
mLockedIndicator.setVisibility(View.GONE) <- bindNotifInd() <- mli.bind(msgItem,mIsGroupConversation,position) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
finish() <- .
finish() <- .
mAddSlideItem.setVisibility(View.VISIBLE) <- adjustAddSlideVisibility() <- .
mAddSlideItem.setVisibility(View.GONE) <- adjustAddSlideVisibility() <- .
------------------------------------
Lcom/android/mms/ui/MiniPreferenceActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/MessageListItem$16675;.onPduLoaded(Lcom/android/mms/ui/MessageItem;)V
CHAINS:
mImageView.setOnClickListener(null) <- setOnClickListener(mMessageItem) <- bindCommonMessage(true) <- .
mImageView.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    sendMessage(msgItem,MSG_LIST_PLAY);
  }
}
) <- setOnClickListener(mMessageItem) <- bindCommonMessage(true) <- .
setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    onMessageListItemClick();
  }
}
) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(true) <- .
mSlideShowButton.setOnClickListener(this) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(true) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(true) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mMmsView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(true) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mmsStub.setVisibility(View.VISIBLE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mDownloadingLabel.setVisibility(View.GONE) <- bindCommonMessage(true) <- .
mDownloadButton.setVisibility(View.GONE) <- bindCommonMessage(true) <- .
mDetailsIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mDetailsIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mDeliveredIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mDeliveredIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mDeliveredIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mLockedIndicator.setVisibility(View.GONE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mLockedIndicator.setVisibility(View.VISIBLE) <- drawRightStatusIndicator(mMessageItem) <- bindCommonMessage(true) <- .
mSlideShowButton.setVisibility(View.GONE) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(true) <- .
mSlideShowButton.setVisibility(View.VISIBLE) <- drawPlaybackButton(mMessageItem) <- bindCommonMessage(true) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(true) <- setImage(null,null) <- bindCommonMessage(true) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- showMmsView(false) <- bindCommonMessage(true) <- .
mImageView.setVisibility(VISIBLE) <- setImage(null,null) <- bindCommonMessage(true) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$177529;.run()V
CHAINS:
finish() <- goToConversationList() <- .
startActivity(new Intent(this,ConversationList.class)) <- goToConversationList() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$32615;.afterTextChanged(Landroid/text/Editable;)V
CHAINS:
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.edit_slide_activity) <- .
finish() <- .
finish() <- .
findViewById(R.id.done_button) <- .
findViewById(R.id.text_message) <- .
findViewById(R.id.remove_slide_button) <- .
findViewById(R.id.replace_image_button) <- .
findViewById(R.id.preview_button) <- .
findViewById(R.id.next_slide_button) <- .
findViewById(R.id.pre_slide_button) <- .
findViewById(R.id.slide_editor_view) <- .
mDone.setOnClickListener(mDoneClickListener) <- .
mRemoveSlide.setOnClickListener(mOnRemoveSlide) <- .
mReplaceImage.setOnClickListener(mOnReplaceImage) <- .
mPreview.setOnClickListener(mOnPreview) <- .
mNextSlide.setOnClickListener(mOnNavigateForward) <- .
mPreSlide.setOnClickListener(mOnNavigateBackward) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
------------------------------------
Lcom/android/mms/ui/LongThreadTest;.setUp()V|Ljava/lang/Exception;
CHAINS:
mActivity.findViewById(R.id.subject) <- .
mActivity.findViewById(R.id.embedded_text_editor) <- .
mActivity.findViewById(R.id.recipients_editor) <- .
mActivity.findViewById(R.id.recipients_editor_stub) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$RecipientsMenuClickListener;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/WarnOfStorageLimitsActivity;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$143344;.onTextChanged(Ljava/lang/CharSequence;III)V
CHAINS:
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$126873;.run()V
CHAINS:
progressDialog.show() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$92140;.run()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- loadMessagesAndDraft(2) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- loadMessagesAndDraft(2) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- loadMessagesAndDraft(2) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- loadMessagesAndDraft(2) <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity$19604;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
startActivityForResult(intent,REQUEST_CODE_CHANGE_DURATION) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onPause()V
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$54971;.run()V
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$BackgroundQueryHandler;.onDeleteComplete(ILjava/lang/Object;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$150467;.run()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onContextItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(createAddContactIntent(address)) <- .
startActivity(intent) <- .
startActivity(ComposeMessageActivity.createIntent(this,threadId)) <- openThread(threadId) <- .
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity;.onKeyDown(ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- doAnswer(false) <- .
------------------------------------
Lcom/android/mms/ui/SmsTest$6575;.run()V
CHAINS:
mActivity.findViewById(R.id.send_button_sms) <- .
------------------------------------
Lcom/android/mms/ui/ConversationListItem$6055;.run()V
CHAINS:
mAvatarView.setVisibility(View.VISIBLE) <- updateAvatarView() <- updateFromView() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$19627;.onQueryTextSubmit(Ljava/lang/String;)Z
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$20554;.run()V
CHAINS:
((Activity)context).startActivityForResult(intent,requestCode) <- MessageUtils.launchSlideshowActivity(ComposeMessageActivity.this,mTempMmsUri,requestCode) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$9466;.onContentChanged(Lcom/android/mms/ui/ConversationListAdapter;)V
CHAINS:
getListView() <- startAsyncQuery() <- .
------------------------------------
Lcom/android/mms/ui/AudioAttachmentView$3263;.onError(Landroid/media/MediaPlayer;II)Z
CHAINS:
mErrorMsgView.setVisibility(VISIBLE) <- showErrorMessage(mRes.getString(R.string.cannot_play_audio)) <- onPlaybackError() <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setImage(Ljava/lang/String;Landroid/graphics/Bitmap;)V
CHAINS:
mImageView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/MiniPreferenceActivity$1286;.onDismiss(Landroid/content/DialogInterface;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onResume()V
CHAINS:
getListView() <- .
mSmsPromoBannerView.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    Intent settingsIntent=new Intent(ConversationList.this,MessagingPreferenceActivity.class);
    startActivityIfNeeded(settingsIntent,-1);
  }
}
) <- initSmsPromoBanner() <- .
mSmsPromoBannerView.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    startActivity(smsAppIntent);
  }
}
) <- initSmsPromoBanner() <- .
mSmsPromoBannerView.setVisibility(View.VISIBLE) <- .
mSmsPromoBannerView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.reset()V
CHAINS:
mVideoView.setVisibility(View.GONE) <- .
mTextView.setVisibility(View.GONE) <- .
mScrollText.setVisibility(View.GONE) <- .
mAudioInfoView.setVisibility(View.GONE) <- hideAudioInfo() <- stopAudio() <- .
mImageView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/NumberPickerDialog;.(Landroid/content/Context;ILcom/android/mms/ui/NumberPickerDialog$OnNumberSetListener;IIII)V
CHAINS:
setButton(DialogInterface.BUTTON_NEGATIVE,context.getText(R.string.no),(OnClickListener)null) <- .
setButton(DialogInterface.BUTTON_POSITIVE,context.getText(R.string.set),this) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
finish() <- sendMessage(false) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setTextVisibility(Z)V
CHAINS:
mScrollText.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
mTextView.setVisibility(visible ? View.VISIBLE : View.GONE) <- .
------------------------------------
Lcom/android/mms/apptests/SmsSendIntentTestActivity$3902;.onClick(Landroid/view/View;)V
CHAINS:
startActivityForResult(intent,NOTIFICATIONS_REQUEST_CODE) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- initialize(savedInstanceState,0) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- initialize(savedInstanceState,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- initialize(savedInstanceState,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- initialize(savedInstanceState,0) <- .
mTextEditor.addTextChangedListener(mTextEditorWatcher) <- initResourceRefs() <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    if (view != null) {
      ((MessageListItem)view).onMessageListItemClick();
    }
  }
}
) <- initMessageList() <- initialize(savedInstanceState,0) <- .
setContentView(R.layout.compose_message_activity) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- initialize(savedInstanceState,0) <- .
findViewById(R.id.attachment_editor_scroll_view) <- initResourceRefs() <- .
findViewById(R.id.attachment_editor) <- initResourceRefs() <- .
findViewById(R.id.recipients_subject_linear) <- initResourceRefs() <- .
findViewById(R.id.send_button_sms) <- initResourceRefs() <- .
findViewById(R.id.send_button_mms) <- initResourceRefs() <- .
findViewById(R.id.text_counter) <- initResourceRefs() <- .
findViewById(R.id.embedded_text_editor) <- initResourceRefs() <- .
findViewById(R.id.bottom_panel) <- initResourceRefs() <- .
findViewById(R.id.history) <- initResourceRefs() <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- initialize(savedInstanceState,0) <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- initialize(savedInstanceState,0) <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- initialize(savedInstanceState,0) <- .
mSendButtonSms.setOnClickListener(this) <- initResourceRefs() <- .
mSendButtonMms.setOnClickListener(this) <- initResourceRefs() <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- initialize(savedInstanceState,0) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- initialize(savedInstanceState,0) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- initialize(savedInstanceState,0) <- .
mMsgListView.setVisibility(mSendDiscreetMode ? View.INVISIBLE : View.VISIBLE) <- initMessageList() <- initialize(savedInstanceState,0) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- initialize(savedInstanceState,0) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- initialize(savedInstanceState,0) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- initialize(savedInstanceState,0) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- initialize(savedInstanceState,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- initialize(savedInstanceState,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- initialize(savedInstanceState,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- initialize(savedInstanceState,0) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- initialize(savedInstanceState,0) <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(savedInstanceState,0) <- .
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.confirm_rate_limit_activity) <- .
findViewById(R.id.btn_no) <- .
findViewById(R.id.btn_yes) <- .
button.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    doAnswer(false);
  }
}
) <- .
button.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    doAnswer(true);
  }
}
) <- .
------------------------------------
Lcom/android/mms/ui/RecipientListActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$114227;.run()V
CHAINS:
finish() <- goToConversationList() <- .
startActivity(new Intent(this,ConversationList.class)) <- goToConversationList() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$106743;.run()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- resetMessage() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- resetMessage() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- resetMessage() <- .
mTextEditor.addTextChangedListener(mTextEditorWatcher) <- resetMessage() <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(false) <- resetMessage() <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- resetMessage() <- .
findViewById(R.id.subject) <- showSubjectEditor(false) <- resetMessage() <- .
mAttachmentEditorScrollView.setVisibility(View.GONE) <- resetMessage() <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- resetMessage() <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- resetMessage() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- resetMessage() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- resetMessage() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- resetMessage() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(false) <- resetMessage() <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(false) <- resetMessage() <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- resetMessage() <- .
((View)mView).setVisibility(View.GONE) <- mAttachmentEditor.hideView() <- resetMessage() <- .
------------------------------------
Lcom/android/mms/ui/SlideListItemView;.setText(Ljava/lang/String;Ljava/lang/String;)V
CHAINS:
mTextPreview.setVisibility(TextUtils.isEmpty(text) ? View.GONE : View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.slideshow) <- .
finish() <- .
findViewById(R.id.slide_view) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivityTests$5499;.run()V
CHAINS:
mActivity.findViewById(R.id.send_button_sms) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$ThreadListQueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
getListView() <- .
getListView() <- .
checkbox.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    listener.setDeleteLockedMessage(checkbox.isChecked());
  }
}
) <- confirmDeleteThreadDialog(new DeleteThreadListener(threadIds,mQueryHandler,ConversationList.this),threadIds,cursor != null && cursor.getCount() > 0,ConversationList.this) <- .
checkbox.setVisibility(View.GONE) <- confirmDeleteThreadDialog(new DeleteThreadListener(threadIds,mQueryHandler,ConversationList.this),threadIds,cursor != null && cursor.getCount() > 0,ConversationList.this) <- .
------------------------------------
Lcom/android/mms/ui/BasicSlideEditorView;.reset()V
CHAINS:
mAudioView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$105571;.run()V
CHAINS:
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(convertToMms) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(convertToMms) <- .
mTextCounter.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/LongThreadTest$11272;.run()V
CHAINS:
mActivity.findViewById(R.id.send_button_sms) <- .
------------------------------------
Lcom/android/mms/ui/EditSlideDurationActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.edit_slide_duration) <- .
findViewById(R.id.done) <- .
findViewById(R.id.text) <- .
findViewById(R.id.label) <- .
mDone.setOnClickListener(mOnDoneClickListener) <- .
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity$1993;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- doAnswer(false) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivityTests;.setUp()V|Ljava/lang/Exception;
CHAINS:
mActivity.findViewById(R.id.history) <- .
mActivity.findViewById(R.id.embedded_text_editor) <- .
mActivity.findViewById(R.id.recipients_editor) <- .
mActivity.findViewById(R.id.recipients_editor_stub) <- .
------------------------------------
Lcom/android/mms/util/PhoneNumberFormatter$TextWatcherLoadAsyncTask;.onPostExecute(Landroid/telephony/PhoneNumberFormattingTextWatcher;)V
CHAINS:
mTextView.addTextChangedListener(watcher) <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setImageVisibility(Z)V
CHAINS:
mImageView.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
mImageView.setVisibility(visible ? View.VISIBLE : View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/MessagingPreferenceActivity;.onPreferenceTreeClick(Landroid/preference/PreferenceScreen;Landroid/preference/Preference;)Z
CHAINS:
startActivity(new Intent(this,ManageSimMessages.class)) <- .
new NumberPickerDialog(this,mMmsLimitListener,mMmsRecycler.getMessageLimit(this),mMmsRecycler.getMessageMinLimit(),mMmsRecycler.getMessageMaxLimit(),R.string.pref_title_mms_delete).show() <- .
new NumberPickerDialog(this,mSmsLimitListener,mSmsRecycler.getMessageLimit(this),mSmsRecycler.getMessageMinLimit(),mSmsRecycler.getMessageMaxLimit(),R.string.pref_title_sms_delete).show() <- .
------------------------------------
Lcom/android/mms/ui/DeliveryReportActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.delivery_report_activity) <- .
getListView() <- initListView() <- .
------------------------------------
Lcom/android/mms/ui/SearchActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/apptests/SmsSendIntentTestActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
findViewById(R.id.turn_off_notification_message) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onConfigurationChanged(Landroid/content/res/Configuration;)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(isSubjectEditorVisible()) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(isSubjectEditorVisible()) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
------------------------------------
Lcom/android/mms/InterceptSendSms;.setUp()V|Ljava/lang/Exception;
CHAINS:
activity.findViewById(R.id.embedded_text_editor) <- .
activity.findViewById(R.id.recipients_editor) <- .
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity$6694;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- processNextMessage() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$23177;.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
CHAINS:
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(false) <- .
findViewById(R.id.subject) <- showSubjectEditor(false) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(false) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(false) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$141698;.onTextChanged(Ljava/lang/CharSequence;III)V
CHAINS:
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
mTextCounter.setVisibility(View.INVISIBLE) <- ensureCorrectButtonHeight() <- .
mTextCounter.setVisibility(View.GONE) <- ensureCorrectButtonHeight() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(workingMessage.requiresMms()) <- updateCounter(s,start,before,count) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(workingMessage.requiresMms()) <- updateCounter(s,start,before,count) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(workingMessage.requiresMms()) <- updateCounter(s,start,before,count) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(workingMessage.requiresMms()) <- updateCounter(s,start,before,count) <- .
mTextCounter.setVisibility(View.GONE) <- updateCounter(s,start,before,count) <- .
mTextCounter.setVisibility(View.VISIBLE) <- updateCounter(s,start,before,count) <- .
------------------------------------
Lcom/android/mms/ui/MiniPreferenceActivity$1611;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onStart()V
CHAINS:
getListView() <- startAsyncQuery() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$SendIgnoreInvalidRecipientListener;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- sendMessage(true) <- .
------------------------------------
Lcom/android/mms/ui/WarnOfStorageLimitsActivity;.dismiss()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/SlideshowAttachmentView;.setTextVisibility(Z)V
CHAINS:
mTextView.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages$7879;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity$11614;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/AudioAttachmentView;.reset()V
CHAINS:
mErrorMsgView.setVisibility(GONE) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity$13461;.onModelChanged(Lcom/android/mms/model/Model;Z)V
CHAINS:
mAddSlideItem.setVisibility(View.VISIBLE) <- adjustAddSlideVisibility() <- .
mAddSlideItem.setVisibility(View.GONE) <- adjustAddSlideVisibility() <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setVideoVisibility(Z)V
CHAINS:
mVideoView.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
mVideoView.setVisibility(visible ? View.VISIBLE : View.GONE) <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.startAudio()V
CHAINS:
mAudioInfoView.setVisibility(View.VISIBLE) <- displayAudioInfo() <- .
------------------------------------
Lcom/android/mms/ui/SlideshowAttachmentView;.setImageVisibility(Z)V
CHAINS:
mImageView.setVisibility(visible ? View.VISIBLE : View.INVISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages$2921;.onReceive(Landroid/content/Context;Landroid/content/Intent;)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_EMPTY) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_EMPTY) <- .
------------------------------------
Lcom/android/mms/ui/SearchActivity$9091;.run()V
CHAINS:
finish() <- .
startActivity(onClickIntent) <- .
------------------------------------
Lcom/android/mms/ui/MessagingPreferenceActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$MsgListMenuClickListener;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
startActivity(intent) <- showDeliveryReport(mMsgItem.mMsgId,mMsgItem.mType) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
findViewById(R.id.subject) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- editMessageItem(mMsgItem) <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- editMessageItem(mMsgItem) <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- editMessageItem(mMsgItem) <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- editMessageItem(mMsgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(true) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- editMessageItem(mMsgItem) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- editMmsMessageItem(msgItem) <- editMessageItem(mMsgItem) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onStart()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- loadMessagesAndDraft(1) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- loadMessagesAndDraft(1) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- loadMessagesAndDraft(1) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- loadMessagesAndDraft(1) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$33630;.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
CHAINS:
getListView() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onRestart()V
CHAINS:
finish() <- goToConversationList() <- .
startActivity(new Intent(this,ConversationList.class)) <- goToConversationList() <- .
mBottomPanel.setVisibility(View.INVISIBLE) <- hideBottomPanel() <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.sim_list) <- .
findViewById(R.id.empty_message) <- .
findViewById(R.id.messages) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- init() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$120072;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
((Activity)context).startActivityForResult(wrapperIntent,requestCode) <- selectMediaByType(context,requestCode,ContentType.IMAGE_UNSPECIFIED,false) <- MessageUtils.selectImage(this,REQUEST_CODE_ATTACH_IMAGE) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
((Activity)context).startActivityForResult(wrapperIntent,requestCode) <- selectMediaByType(context,requestCode,ContentType.VIDEO_UNSPECIFIED,true) <- MessageUtils.selectVideo(this,REQUEST_CODE_ATTACH_VIDEO) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.capturePicture(this,REQUEST_CODE_TAKE_PICTURE) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.recordVideo(this,REQUEST_CODE_TAKE_VIDEO,sizeLimit) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.recordSound(this,REQUEST_CODE_RECORD_SOUND,sizeLimit) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.selectAudio(this,REQUEST_CODE_ATTACH_SOUND) <- addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which),replace) <- .
------------------------------------
Lcom/android/mms/ui/MessageListAdapter$5163;.onMovedToScrapHeap(Landroid/view/View;)V
CHAINS:
mImageView.setOnClickListener(null) <- mli.unbind() <- .
------------------------------------
Lcom/android/mms/ui/EditSlideDurationActivity$4262;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- editDone() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$35108;.run()V
CHAINS:
getListView() <- ((ConversationList)mContext).unbindListeners(mThreadIds) <- .
getListView() <- ((ConversationList)mContext).unbindListeners(mThreadIds) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowActivity$14355;.run()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- init() <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- init() <- .
------------------------------------
Lcom/android/mms/ui/DeliveryReportAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
mDeliveryDateView.setVisibility(View.VISIBLE) <- listItem.bind(item.recipient,item.status,item.deliveryDate) <- .
mDeliveryDateView.setVisibility(View.GONE) <- listItem.bind(item.recipient,item.status,item.deliveryDate) <- .
------------------------------------
Lcom/android/mms/ui/BasicSlideEditorView;.onFinishInflate()V
CHAINS:
mEditText.addTextChangedListener(new TextWatcher(){
  public void beforeTextChanged(  CharSequence s,  int start,  int count,  int after){
  }
  public void onTextChanged(  CharSequence s,  int start,  int before,  int count){
    if (mOnTextChangedListenerEnabled && (mOnTextChangedListener != null)) {
      mOnTextChangedListener.onTextChanged(s.toString());
    }
  }
  public void afterTextChanged(  Editable s){
  }
}
) <- .
------------------------------------
Lcom/android/mms/ui/SearchActivity$12119;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
view.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View v){
    final Intent onClickIntent=new Intent(SearchActivity.this,ComposeMessageActivity.class);
    onClickIntent.putExtra("thread_id",threadId);
    onClickIntent.putExtra("highlight",searchString);
    onClickIntent.putExtra("select_id",rowid);
    startActivity(onClickIntent);
  }
}
) <- .
------------------------------------
Lcom/android/mms/ui/MessageListItem$9602;.onClick(Landroid/view/View;)V
CHAINS:
mDownloadButton.setVisibility(View.GONE) <- .
mDownloadingLabel.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/apptests/SmsSendIntentTestActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(intent) <- .
------------------------------------
Lcom/android/mms/ui/WarnOfStorageLimitsActivity;.cancel()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mms/ui/LongThreadTest$11836;.run()V
CHAINS:
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- mActivity.onOptionsItemSelected(item) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- mActivity.onOptionsItemSelected(item) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(true) <- mActivity.onOptionsItemSelected(item) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- mActivity.onOptionsItemSelected(item) <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- mActivity.onOptionsItemSelected(item) <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- mActivity.onOptionsItemSelected(item) <- .
finish() <- mActivity.onOptionsItemSelected(item) <- .
startActivity(intent) <- mActivity.onOptionsItemSelected(item) <- .
startActivity(intent) <- mActivity.onOptionsItemSelected(item) <- .
startActivity(dialIntent) <- dialRecipient() <- mActivity.onOptionsItemSelected(item) <- .
mActivity.findViewById(R.id.send_button) <- .
findViewById(R.id.subject) <- showSubjectEditor(true) <- mActivity.onOptionsItemSelected(item) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- mActivity.onOptionsItemSelected(item) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- mActivity.onOptionsItemSelected(item) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(true) <- mActivity.onOptionsItemSelected(item) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(true) <- mActivity.onOptionsItemSelected(item) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$105086;.run()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(isSubjectEditorVisible()) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(isSubjectEditorVisible()) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(isSubjectEditorVisible()) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(isSubjectEditorVisible()) <- .
------------------------------------
Lcom/android/mms/ui/SearchActivity$13430;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(onClickIntent) <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setVideo(Ljava/lang/String;Landroid/net/Uri;)V
CHAINS:
mVideoView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$ThreadListQueryHandler;.onDeleteComplete(ILjava/lang/Object;I)V
CHAINS:
getListView() <- startAsyncQuery() <- .
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity$6921;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- processNextMessage() <- .
------------------------------------
Lcom/android/mms/ui/SlideView$2657;.onPrepared(Landroid/media/MediaPlayer;)V
CHAINS:
mAudioInfoView.setVisibility(View.GONE) <- hideAudioInfo() <- .
mAudioInfoView.setVisibility(View.VISIBLE) <- displayAudioInfo() <- .
------------------------------------
Lcom/android/mms/ui/ConversationList$11638;.onClick(Landroid/view/View;)V
CHAINS:
startActivity(smsAppIntent) <- .
------------------------------------
Lcom/android/mms/ui/LongThreadTest$13106;.run()V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- a.initialize(null,0) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- a.initialize(null,0) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- a.initialize(null,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- a.initialize(null,0) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- a.initialize(null,0) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    if (view != null) {
      ((MessageListItem)view).onMessageListItemClick();
    }
  }
}
) <- initMessageList() <- a.initialize(null,0) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- a.initialize(null,0) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- a.initialize(null,0) <- .
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- a.initialize(null,0) <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- a.initialize(null,0) <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- a.initialize(null,0) <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- a.initialize(null,0) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- a.initialize(null,0) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- a.initialize(null,0) <- .
mMsgListView.setVisibility(mSendDiscreetMode ? View.INVISIBLE : View.VISIBLE) <- initMessageList() <- a.initialize(null,0) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- a.initialize(null,0) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- a.initialize(null,0) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- a.initialize(null,0) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- a.initialize(null,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- a.initialize(null,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- a.initialize(null,0) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- a.initialize(null,0) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- a.initialize(null,0) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- a.initialize(null,0) <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- a.initialize(null,0) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages$11288;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
getListView() <- startAsyncQuery() <- .
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity$2173;.run()V
CHAINS:
finish() <- doAnswer(false) <- .
------------------------------------
Lcom/android/mms/ui/ConversationListAdapter;.bindView(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;)V
CHAINS:
mErrorIndicator.setVisibility(hasError ? VISIBLE : GONE) <- headerView.bind(context,conv) <- .
mAttachmentView.setVisibility(hasAttachment ? VISIBLE : GONE) <- headerView.bind(context,conv) <- .
mAvatarView.setVisibility(View.VISIBLE) <- updateAvatarView() <- headerView.bind(context,conv) <- .
------------------------------------
Lcom/android/mms/ui/SlideshowActivity$6402;.run()V
CHAINS:
findViewById(R.id.slide_view) <- initMediaController() <- .
mViewPort.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    if (mMediaController != null) {
      mMediaController.show();
    }
  }
}
) <- mSlideView.enableMMSConformanceMode(textLeft,textTop,imageLeft,imageTop) <- .
view.setVisibility(View.GONE) <- mSlideView.enableMMSConformanceMode(textLeft,textTop,imageLeft,imageTop) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onStop()V
CHAINS:
getListView() <- unbindListeners(null) <- .
getListView() <- unbindListeners(null) <- .
getListView() <- .
------------------------------------
Lcom/android/mms/apptests/SmsSendIntentTestActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.sms_send_intent_test) <- .
findViewById(R.id.turn_off_notification_message) <- .
findViewById(R.id.sms_prime_message) <- .
findViewById(R.id.sms_send_long_message) <- .
findViewById(R.id.sms_send_multi_message) <- .
findViewById(R.id.sms_send_message_unlock_screen) <- .
findViewById(R.id.sms_send_message) <- .
findViewById(R.id.sms_content) <- .
findViewById(R.id.sms_recipient) <- .
notificationsButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    Intent intent=new Intent("com.android.mms.intent.action.MESSAGING_APP_NOTIFICATIONS");
    startActivityForResult(intent,NOTIFICATIONS_REQUEST_CODE);
  }
}
) <- .
primeButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    mMessage.setText(R.string.sms_long_message);
  }
}
) <- .
sendLongButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    sendMessage(1,10);
  }
}
) <- .
sendMultiButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    sendMessage(5,1);
  }
}
) <- .
sendUnlockButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    sendMessageUnlockScreen();
  }
}
) <- .
sendButton.setOnClickListener(new OnClickListener(){
  public void onClick(  View v){
    sendMessage(1,1);
  }
}
) <- .
------------------------------------
Lcom/android/mms/ui/AsyncDialog$2154;.run()V
CHAINS:
mProgressDialog.show() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onNewIntent(Landroid/content/Intent;)V
CHAINS:
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- loadMessagesAndDraft(0) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- drawBottomPanel() <- initialize(null,originalThreadId) <- .
mTextEditor.setEnabled(mIsSmsEnabled) <- onKeyboardStateChanged() <- initialize(null,originalThreadId) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(false) <- updateSendButtonState() <- initialize(null,originalThreadId) <- .
mSendButton.setEnabled(mCanSend) <- updateSendButton() <- mAttachmentEditor.setCanSend(true) <- updateSendButtonState() <- initialize(null,originalThreadId) <- .
mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    if (view != null) {
      ((MessageListItem)view).onMessageListItemClick();
    }
  }
}
) <- initMessageList() <- initialize(null,originalThreadId) <- .
sendButton.setEnabled(enable) <- updateSendButtonState() <- initialize(null,originalThreadId) <- .
findViewById(R.id.subject) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- initialize(null,originalThreadId) <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- initialize(null,originalThreadId) <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- initialize(null,originalThreadId) <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- initialize(null,originalThreadId) <- .
removeButton.setOnClickListener(new MessageOnClick(MSG_REMOVE_ATTACHMENT)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
playBtn.setOnClickListener(new MessageOnClick(MSG_PLAY_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mSendButton.setOnClickListener(new MessageOnClick(MSG_SEND_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
editBtn.setOnClickListener(new MessageOnClick(MSG_EDIT_SLIDESHOW)) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
removeButton.setOnClickListener(new MessageOnClick(remove_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
replaceButton.setOnClickListener(new MessageOnClick(replace_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
viewButton.setOnClickListener(new MessageOnClick(view_message)) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- initialize(null,originalThreadId) <- .
mMsgListView.setVisibility(View.INVISIBLE) <- initActivityState(savedInstanceState) <- initialize(null,originalThreadId) <- .
mMsgListView.setVisibility(mSendDiscreetMode ? View.INVISIBLE : View.VISIBLE) <- initMessageList() <- initialize(null,originalThreadId) <- .
mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- loadMessagesAndDraft(0) <- .
mBottomPanel.setVisibility(View.VISIBLE) <- drawBottomPanel() <- initialize(null,originalThreadId) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- loadMessagesAndDraft(0) <- .
mBottomPanel.setVisibility(View.GONE) <- drawBottomPanel() <- initialize(null,originalThreadId) <- .
hideButton.setVisibility(View.GONE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- initialize(null,originalThreadId) <- .
showButton.setVisibility(View.VISIBLE) <- showSmsOrMmsSendButton(requiresMms) <- updateSendButtonState() <- initialize(null,originalThreadId) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- initialize(null,originalThreadId) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- hideRecipientEditor() <- initialize(null,originalThreadId) <- .
mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE) <- hideOrShowTopPanel() <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE) <- showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject()) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- initialize(null,originalThreadId) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- loadMessagesAndDraft(0) <- .
mTextCounter.setVisibility(View.GONE) <- resetCounter() <- drawBottomPanel() <- initialize(null,originalThreadId) <- .
view.setVisibility(View.VISIBLE) <- createSlideshowView(inPortrait) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.audio_attachment_view_stub,R.id.audio_attachment_view,R.id.play_audio_button,R.id.replace_audio_button,R.id.remove_audio_button,MSG_PLAY_AUDIO,MSG_REPLACE_AUDIO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.video_attachment_view_stub,R.id.video_attachment_view,R.id.view_video_button,R.id.replace_video_button,R.id.remove_video_button,MSG_PLAY_VIDEO,MSG_REPLACE_VIDEO,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
view.setVisibility(View.VISIBLE) <- createMediaView(R.id.image_attachment_view_stub,R.id.image_attachment_view,R.id.view_image_button,R.id.replace_image_button,R.id.remove_image_button,MSG_VIEW_IMAGE,MSG_REPLACE_IMAGE,MSG_REMOVE_ATTACHMENT) <- createView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
((View)mView).setVisibility(View.GONE) <- hideView() <- mAttachmentEditor.update(mWorkingMessage) <- drawTopPanel(false) <- initialize(null,originalThreadId) <- .
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity$2508;.handleMessage(Landroid/os/Message;)V
CHAINS:
finish() <- processNextMessage() <- .
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
activity.startActivityForResult(intent,requestCode) <- MessageUtils.capturePicture(this,REQUEST_CODE_TAKE_PICTURE) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.recordVideo(this,REQUEST_CODE_TAKE_VIDEO,sizeLimit) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.recordSound(this,REQUEST_CODE_RECORD_SOUND,sizeLimit) <- .
activity.startActivityForResult(intent,requestCode) <- MessageUtils.selectAudio(this,REQUEST_CODE_CHANGE_MUSIC) <- .
startActivityForResult(intent,REQUEST_CODE_CHANGE_VIDEO) <- .
startActivityForResult(intent,REQUEST_CODE_CHANGE_PICTURE) <- .
------------------------------------
Lcom/android/mms/ui/SmsTest;.setUp()V|Ljava/lang/Exception;
CHAINS:
mActivity.findViewById(R.id.embedded_text_editor) <- .
mActivity.findViewById(R.id.recipients_editor) <- .
mActivity.findViewById(R.id.recipients_editor_stub) <- .
------------------------------------
Lcom/android/mms/ui/ManageSimMessages$3579;.onChange(Z)V
CHAINS:
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
mMessage.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
mSimList.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
mMessage.setVisibility(View.GONE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
mSimList.setVisibility(View.VISIBLE) <- updateState(SHOW_BUSY) <- refreshMessageList() <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
finish() <- sendMessage(true) <- confirmSendMessageIfNeeded() <- .
------------------------------------
Lcom/android/mms/ui/SlideView;.setText(Ljava/lang/String;Ljava/lang/String;)V
CHAINS:
mTextView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(ComposeMessageActivity.createIntent(this,0)) <- createNewMessage() <- .
startActivity(cellBroadcastIntent) <- .
------------------------------------
Lcom/android/mms/ui/ConversationList;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.conversation_list_screen) <- .
getListView() <- initListAdapter() <- .
getListView() <- .
findViewById(R.id.empty) <- .
findViewById(R.id.banner_sms_promo) <- .
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$BackgroundQueryHandler;.onQueryComplete(ILjava/lang/Object;Landroid/database/Cursor;)V
CHAINS:
findViewById(R.id.recipients_picker) <- initRecipientsEditor() <- .
findViewById(R.id.recipients_editor) <- initRecipientsEditor() <- .
findViewById(R.id.recipients_editor_stub) <- initRecipientsEditor() <- .
checkbox.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    listener.setDeleteLockedMessage(checkbox.isChecked());
  }
}
) <- ConversationList.confirmDeleteThreadDialog(new ConversationList.DeleteThreadListener(threadIds,mBackgroundQueryHandler,ComposeMessageActivity.this),threadIds,cursor != null && cursor.getCount() > 0,ComposeMessageActivity.this) <- .
mRecipientsPicker.setOnClickListener(this) <- initRecipientsEditor() <- .
checkbox.setVisibility(View.GONE) <- ConversationList.confirmDeleteThreadDialog(new ConversationList.DeleteThreadListener(threadIds,mBackgroundQueryHandler,ComposeMessageActivity.this),threadIds,cursor != null && cursor.getCount() > 0,ComposeMessageActivity.this) <- .
mTopPanel.setVisibility(View.VISIBLE) <- initRecipientsEditor() <- .
------------------------------------
Lcom/android/mms/ui/EditSlideDurationActivity$3772;.onKey(Landroid/view/View;ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- editDone() <- .
------------------------------------
------------------------------------
Lcom/android/mms/ui/ConversationList$26874;
------------------------------------
Lcom/android/mms/ui/DeliveryReportAdapter;
------------------------------------
Lcom/android/mms/ui/IconListAdapter;
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivityNoLockScreen;
------------------------------------
Lcom/android/mms/ui/SearchActivity;
------------------------------------
Lcom/android/mms/ui/MessagingPreferenceActivity;
------------------------------------
Lcom/android/mms/ui/RecipientListActivity$RecipientListAdapter;
------------------------------------
Lcom/android/mms/ui/DeliveryReportActivity;
------------------------------------
Lcom/android/mms/ui/MiniPreferenceActivity;
------------------------------------
Lcom/android/mms/ui/WarnOfStorageLimitsActivity;
------------------------------------
Lcom/android/mms/ui/RecipientListActivity;
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity;
------------------------------------
Lcom/android/mms/ui/ConversationList;
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$36439;
------------------------------------
Lcom/android/mms/apptests/SmsSendIntentTestActivity;
------------------------------------
Lcom/android/smsautoreply/AutoReplyActivity;
------------------------------------
Lcom/android/mms/ui/SlideshowActivity;
------------------------------------
Lcom/android/mms/ui/ManageSimMessages;
------------------------------------
Lcom/android/mms/ui/SlideshowEditActivity$SlideListAdapter;
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity;
------------------------------------
Lcom/android/mms/ui/ComposeMessageActivity$44972;
------------------------------------
Lcom/android/mms/ui/ConfirmRateLimitActivity;
------------------------------------
Lcom/android/mms/ui/EditSlideDurationActivity;
------------------------------------
Lcom/android/mms/ui/MessageListItem$25976;
------------------------------------
Lcom/android/mms/ui/ClassZeroActivity;
------------------------------------
Lcom/android/mms/ui/SlideEditorActivity;
Done writing file.
------------------------------------
Project: ./tests/android.googlesource.com/UnifiedEmail
start doc
end doc
Lcom/android/mail/browse/ConversationViewAdapter$BorderItem;.rebindView(Landroid/view/View;)V
CHAINS:
mCardTop.setVisibility(!isExpanded || borderItem.isLastBorder() ? GONE : VISIBLE) <- border.bind(this,measureOnly) <- bindView(view,false) <- .
mCardBottom.setVisibility(!isExpanded || borderItem.isFirstBorder() ? GONE : VISIBLE) <- border.bind(this,measureOnly) <- bindView(view,false) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
findViewById(R.id.wait) <- showWaitFragment(null) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(mAttachmentsView.generateLocalAttachment(contentUri)) <- addAttachmentAndUpdateView(data != null ? data.getData() : (Uri)null) <- addAttachmentAndUpdateView(data) <- .
finish() <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment;.onConversationUpdated(Lcom/android/mail/providers/Conversation;)V
CHAINS:
mFoldersView.setVisibility(show ? View.VISIBLE : View.GONE) <- setFoldersVisible(true) <- setFolders(conv) <- headerView.onConversationUpdated(conv) <- .
mSubjectView.setVisibility(GONE) <- headerView.setSubject(conv.subject) <- .
------------------------------------
Lcom/android/mail/browse/EmlViewerActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
setContentView(R.layout.eml_viewer_activity) <- .
finish() <- .
------------------------------------
Lcom/android/mail/browse/ConversationContainer$AdapterObserver;.onChanged()V
CHAINS:
mSnapHeader.setVisibility(VISIBLE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- onDataSetChanged() <- .
mSnapHeader.setVisibility(GONE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- onDataSetChanged() <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment$SecureConversationWebViewClient;.onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
------------------------------------
Lcom/android/mail/ui/NestedFolderTeaserView;.onFinishInflate()V
CHAINS:
mShowMoreFoldersRow.setOnClickListener(mShowMoreOnClickListener) <- .
------------------------------------
Lcom/android/mail/photo/MailPhotoViewActivity;.onCursorChanged(LPhotoViewFragment;Landroid/database/Cursor;)V
CHAINS:
retryButton.setVisibility(View.VISIBLE) <- updateProgressAndEmptyViews(fragment,new Attachment(cursor)) <- .
retryButton.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View view){
    redownloadAttachment();
    emptyText.setVisibility(View.GONE);
    retryButton.setVisibility(View.GONE);
  }
}
) <- updateProgressAndEmptyViews(fragment,new Attachment(cursor)) <- .
emptyText.setVisibility(View.VISIBLE) <- updateProgressAndEmptyViews(fragment,new Attachment(cursor)) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
startActivity(mailIntent) <- onAppUpPressed() <- .
frag.show(getFragmentManager(),"discard confirm") <- doDiscard() <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message,save,showToast) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_body,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_body,save,showToast) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_subject,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_subject,save,showToast) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(errorText) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(errorText) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(getString(R.string.recipient_needed)) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(getString(R.string.recipient_needed)) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(mReplyFromAccount.account) <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(mReplyFromAccount.account) <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
startActivityForResult(Intent.createChooser(i,getText(R.string.select_attachment_type)),RESULT_PICK_ATTACHMENT) <- doAttach(MIME_TYPE_VIDEO) <- .
startActivityForResult(Intent.createChooser(i,getText(R.string.select_attachment_type)),RESULT_PICK_ATTACHMENT) <- doAttach(MIME_TYPE_PHOTO) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(true,true,true) <- showCcBccViews() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(true,true,true) <- showCcBccViews() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- showCcBccViews() <- .
finish() <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
finish() <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
finish() <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(true) <- .
finish() <- sendOrSaveWithSanityChecks(false,true,false,false) <- doSend() <- .
finish() <- onAppUpPressed() <- .
finish() <- onBackPressed() <- onAppUpPressed() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyAllToSelfWithCc()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/EmlMessageViewFragment;.onActivityCreated(Landroid/os/Bundle;)V
CHAINS:
mBackgroundView.setVisibility(View.VISIBLE) <- mProgressController.showLoadingStatus(mCallbacks.isViewVisibleToUser()) <- mViewController.onActivityCreated(savedInstanceState) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefMessageReplyAllCustomFromThisAccount()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY_ALL,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- confirmAndDelete(id,target,true,R.plurals.confirm_discard_drafts_conversation) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- confirmAndDelete(id,target,showDialog,R.plurals.confirm_delete_conversation) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- confirmAndDelete(id,target,showDialog,R.plurals.confirm_archive_conversation) <- .
fragment.show(mActivity.getFragmentManager(),EmptyFolderDialogFragment.FRAGMENT_TAG) <- showEmptyDialog() <- .
fragment.show(mActivity.getFragmentManager(),EmptyFolderDialogFragment.FRAGMENT_TAG) <- showEmptyDialog() <- .
mSyncProgressBar.setVisibility(VISIBLE) <- mConversationListView.showSyncStatusBar() <- convList.showSyncStatusBar() <- requestFolderRefresh() <- .
mSyncTriggerBar.setVisibility(GONE) <- mConversationListView.showSyncStatusBar() <- convList.showSyncStatusBar() <- requestFolderRefresh() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testCompose()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.onMessageCursorLoadFinished(Landroid/content/Loader<Lcom/android/mail/content/ObjectCursor<Lcom/android/mail/browse/ConversationMessage;>;>;Lcom/android/mail/browse/MessageCursor;Lcom/android/mail/browse/MessageCursor;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mAttachmentBarList.setVisibility(View.VISIBLE) <- renderBarAttachments(barAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mAttachmentGrid.setVisibility(View.VISIBLE) <- renderTiledAttachments(tiledAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mTitleText.setVisibility(View.VISIBLE) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
setVisibility(mMessageHeaderItem.isExpanded() ? VISIBLE : GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mAttachmentBarList.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mAttachmentGrid.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mTitleText.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mMessageFooterView.setVisibility(View.VISIBLE) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(newCursor) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onPause()V
CHAINS:
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_body,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
frag.show(getFragmentManager(),"send confirm") <- showSendConfirmDialog(R.string.confirm_send_message_with_no_subject,save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(errorText) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
frag.show(getFragmentManager(),"recipient error") <- showRecipientErrorDialog(getString(R.string.recipient_needed)) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(mReplyFromAccount.account) <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
finish() <- sendOrSave(save,showToast) <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
finish() <- sendOrSaveWithSanityChecks(true,showToast,false,false) <- doSave(!mAddingAttachment) <- saveIfNeeded() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReply()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/ConversationPhotoTeaserView$3242;.run()V
CHAINS:
arrow.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController$174360;.onActionClicked(Landroid/content/Context;)V
CHAINS:
fragment.show(mFragmentManager,SYNC_ERROR_DIALOG_FRAGMENT_TAG) <- showStorageErrorDialog() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testChangeModes0()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyAllToSelf()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/SpamWarningView;.onFinishInflate()V
CHAINS:
mSpamWarningLink.setOnClickListener(this) <- .
setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.onConversationUpdated(Lcom/android/mail/providers/Conversation;)V
CHAINS:
mFoldersView.setVisibility(show ? View.VISIBLE : View.GONE) <- setFoldersVisible(true) <- setFolders(conv) <- headerView.onConversationUpdated(conv) <- .
mSubjectView.setVisibility(GONE) <- headerView.setSubject(conv.subject) <- .
------------------------------------
Lcom/android/mail/browse/ConversationContainer;.onLayout(ZIIII)V
CHAINS:
mSnapHeader.setVisibility(VISIBLE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- .
mSnapHeader.setVisibility(GONE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- .
------------------------------------
Lcom/android/mail/ui/ShortcutNameActivity;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- doCancel() <- .
finish() <- doCreateShortcut() <- .
------------------------------------
Lcom/android/mail/compose/QuotedTextView;.onClick(Landroid/view/View;)V
CHAINS:
quotedTextView.setVisibility(View.GONE) <- respondInline() <- .
mRespondInlineButton.setVisibility(View.GONE) <- respondInline() <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- updateCheckedState(false) <- respondInline() <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- updateCheckedState(!mShowHideCheckBox.isChecked()) <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- updateCheckedState(mShowHideCheckBox.isChecked()) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$ConversationWebViewClient;.onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest$46711;.run()V
CHAINS:
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- activity.initAttachments(refMessage) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$13537;.onClick(Landroid/view/View;)V
CHAINS:
mNewMessageBar.setVisibility(View.GONE) <- onNewMessageBarClick() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onRespondInline(Ljava/lang/String;)V
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(text,withSignature) <- appendToBody(text,false) <- .
------------------------------------
Lcom/android/mail/ui/ConversationListView;.dispatchTouchEvent(Landroid/view/MotionEvent;)Z
CHAINS:
setVisibility(View.VISIBLE) <- mHintText.displayCheckingForMailAndHideAfterDelay() <- triggerSync() <- .
setVisibility(View.VISIBLE) <- mHintText.displaySwipeToRefresh() <- .
mSyncTriggerBar.setVisibility(View.GONE) <- triggerSync() <- .
mSyncTriggerBar.setVisibility(VISIBLE) <- setTriggerScale(mAccelerateInterpolator.getInterpolation(verticalDistanceDp / mDistanceToTriggerSyncDp)) <- .
------------------------------------
Lcom/android/mail/browse/EmlViewerActivity;.onOptionsItemSelected(Landroid/view/MenuItem;)Z
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onLoadFinished(Landroid/content/Loader<Landroid/database/Cursor;>;Landroid/database/Cursor;)V
CHAINS:
startActivity(intent) <- selectAccount(new Account(accounts)) <- updateAccountList(data) <- .
setVisible(true) <- updateAccountList(data) <- .
startActivityForResult(noAccountIntent,RESULT_CREATE_ACCOUNT) <- updateAccountList(data) <- .
mContent.setVisibility(View.VISIBLE) <- .
mWait.setVisibility(View.GONE) <- .
mContent.setVisibility(View.GONE) <- showWaitFragment(account) <- .
mWait.setVisibility(View.VISIBLE) <- showWaitFragment(account) <- .
mContent.setVisibility(View.VISIBLE) <- updateAccountList(data) <- .
mWait.setVisibility(View.GONE) <- updateAccountList(data) <- .
finish() <- selectAccount(new Account(accounts)) <- updateAccountList(data) <- .
finish() <- selectAccount(new Account(accounts)) <- updateAccountList(data) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefMessageReplyToCustomFrom()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentTile;.onFinishInflate()V
CHAINS:
setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/ui/ShortcutNameActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.cancel) <- .
findViewById(R.id.done) <- .
findViewById(R.id.folder_text) <- .
setContentView(R.layout.shortcut_name_activity) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onRestoreInstanceState(Landroid/os/Bundle;)V
CHAINS:
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- .
------------------------------------
Lcom/android/mail/ui/FolderListFragment$FolderListAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
mFolderParentIcon.setVisibility(mFolder.hasChildren ? View.VISIBLE : View.GONE) <- folderItemView.bind(mFolder,mActivity,mBidiFormatter) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
iconView.setVisibility(View.GONE) <- Folder.setIcon(folder,folderIconView) <- folderItemView.setIcon(mFolder) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
iconView.setVisibility(View.VISIBLE) <- Folder.setIcon(folder,folderIconView) <- folderItemView.setIcon(mFolder) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
mUnreadCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnreadCount(count) <- accountItemView.bind(mAccount,mIsSelected,mResource) <- getAccountView(convertView,parent) <- item.getView(convertView,parent) <- .
mUnseenCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnseenCount(mFolder.getBackgroundColor(Color.BLACK),mFolder.unseenCount) <- folderItemView.bind(mFolder,mActivity,mBidiFormatter) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
mUnreadCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnreadCount(count) <- ((FolderItemView)view).overrideUnreadCount(mCurrentFolderForUnreadCheck.unreadCount) <- .
mUnreadCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnreadCount(Utils.getFolderUnreadDisplayCount(mFolder)) <- folderItemView.bind(mFolder,mActivity,mBidiFormatter) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
mUnseenCountTextView.setVisibility(View.GONE) <- folderItemView.bind(mFolder,mActivity,mBidiFormatter) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
mUnreadCountTextView.setVisibility(View.GONE) <- folderItemView.bind(mFolder,mActivity,mBidiFormatter) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
colorBlock.setVisibility(View.VISIBLE) <- Folder.setFolderBlockColor(mFolder,folderItemView.findViewById(R.id.color_block)) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
colorBlock.setVisibility(View.GONE) <- Folder.setFolderBlockColor(mFolder,folderItemView.findViewById(R.id.color_block)) <- getFolderView(convertView,parent) <- item.getView(convertView,parent) <- .
------------------------------------
Lcom/android/mail/ui/ConversationListFragment;.onActivityCreated(Landroid/os/Bundle;)V
CHAINS:
mSearchStatusView.setVisibility(showHeader ? View.VISIBLE : View.GONE) <- configureSearchResultHeader() <- .
mSyncTriggerBar.setVisibility(GONE) <- mConversationListView.onSyncFinished() <- checkSyncStatus() <- onFolderStatusUpdated() <- onConversationListStatusUpdated() <- showList() <- .
mSyncTriggerBar.setVisibility(GONE) <- mConversationListView.onSyncFinished() <- checkSyncStatus() <- onFolderStatusUpdated() <- onFolderUpdated(mActivity.getFolderController().getFolder()) <- showList() <- .
mLoadMore.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoading.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mErrorActionButton.setVisibility(mErrorStatus != UIProvider.LastSyncResult.SECURITY_ERROR ? View.VISIBLE : View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoading.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoading.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
mLoading.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- showList() <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentBar;.onClick(Landroid/view/View;)V
CHAINS:
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- showDownloadingDialog() <- mActionHandler.showAttachment(AttachmentDestination.CACHE) <- onClick(v.getId(),v) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- showDownloadingDialog() <- mActionHandler.showAttachment(AttachmentDestination.EXTERNAL) <- onClick(v.getId(),v) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- mActionHandler.showDownloadingDialog() <- onClick(v.getId(),v) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- mActionHandler.showDownloadingDialog() <- onClick(v.getId(),v) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest$41533;.run()V
CHAINS:
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
------------------------------------
Lcom/android/mail/ui/AttachmentTile;.thumbnailLoadFailed()V
CHAINS:
mDefaultIcon.setVisibility(View.GONE) <- setThumbnail(cachedPreview) <- setThumbnailToDefault() <- .
mDefaultIcon.setVisibility(View.VISIBLE) <- setThumbnailToDefault() <- .
------------------------------------
Lcom/android/mail/ui/MailActionBarView;.onMenuItemActionCollapse(Landroid/view/MenuItem;)Z
CHAINS:
setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyAllWithReplyTo()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter$MessageHeaderItem;.rebindView(Landroid/view/View;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.rebind(this) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefReplyAllOnlyCustomFrom()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY_ALL,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account3@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyWithReplyTo()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter$MessageHeaderItem;.onModelUpdated(Landroid/view/View;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- header.refresh() <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.setupConversationHeaderView(Lcom/android/mail/browse/ConversationViewHeader;)V
CHAINS:
mFoldersView.setVisibility(show ? View.VISIBLE : View.GONE) <- setFoldersVisible(true) <- headerView.setFolders(mConversation) <- .
mSubjectView.setVisibility(GONE) <- headerView.setSubject(mConversation.subject) <- .
------------------------------------
Lcom/android/mail/ui/AbstractConversationWebViewClient;.shouldOverrideUrlLoading(Landroid/webkit/WebView;Ljava/lang/String;)Z
CHAINS:
mActivity.startActivity(intent) <- .
------------------------------------
Lcom/android/mail/ui/OnePaneController;.handleUpPress()Z
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(false,false) <- handleBackPress() <- .
setVisibility(View.GONE) <- mToastBar.hide(false,false) <- handleBackPress() <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mCardTop.setVisibility(GONE) <- ((BorderView)rootView.findViewById(R.id.bottom_border)).disableCardTopBorder() <- mViewController.onCreateView(inflater,container,savedInstanceState) <- .
mCardBottom.setVisibility(GONE) <- ((BorderView)rootView.findViewById(R.id.top_border)).disableCardBottomBorder() <- mViewController.onCreateView(inflater,container,savedInstanceState) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$11712;.go()V
CHAINS:
mBackgroundView.setVisibility(View.VISIBLE) <- mProgressController.showLoadingStatus(isUserVisible()) <- startConversationLoad() <- showConversation() <- .
mWebView.setVisibility(View.VISIBLE) <- startConversationLoad() <- showConversation() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefMessageReplyAllCustomFrom()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY_ALL,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/FolderSelectionActivity;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- createWidget(mAppWidgetId,mAccount,mSelectedFolder) <- .
finish() <- doCancel() <- .
------------------------------------
Lcom/android/mail/ui/ConversationListView$18090;.run()V
CHAINS:
setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$49483;.go()V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- mProgressController.dismissLoadingStatus(mOnProgressDismiss) <- revealConversation() <- .
------------------------------------
Lcom/android/mail/browse/MessageFooterView;.onLoadFinished(Landroid/content/Loader<Landroid/database/Cursor;>;Landroid/database/Cursor;)V
CHAINS:
mAttachmentBarList.setVisibility(View.VISIBLE) <- renderBarAttachments(barAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(true) <- .
mAttachmentGrid.setVisibility(View.VISIBLE) <- renderTiledAttachments(tiledAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(true) <- .
mTitleText.setVisibility(View.VISIBLE) <- renderAttachments(attachments,loaderResult) <- renderAttachments(true) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment;.onMessageCursorLoadFinished(Landroid/content/Loader<Lcom/android/mail/content/ObjectCursor<Lcom/android/mail/browse/ConversationMessage;>;>;Lcom/android/mail/browse/MessageCursor;Lcom/android/mail/browse/MessageCursor;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(false) <- mSnapHeader.refresh() <- mConversationContainer.onOverlayModelUpdate(changedOverlayPositions) <- processInPlaceUpdates(newCursor,oldCursor) <- .
mNewMessageBar.setVisibility(View.VISIBLE) <- showNewMessageNotification(info) <- .
------------------------------------
Lcom/android/mail/ui/NestedFolderTeaserView;.onGetView()V
CHAINS:
mShowMoreFoldersRow.setVisibility(GONE) <- updateShowMoreView() <- .
mShowMoreFoldersCountTextView.setVisibility(GONE) <- updateShowMoreView() <- .
mShowMoreFoldersRow.setVisibility(VISIBLE) <- updateShowMoreView() <- .
mShowMoreFoldersCountTextView.setVisibility(VISIBLE) <- updateShowMoreView() <- .
mShowMoreFoldersRow.setVisibility(VISIBLE) <- updateShowMoreView() <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentTile;.setThumbnailToDefault()V
CHAINS:
mTextContainer.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest$39625;.run()V
CHAINS:
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyToSelf()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/FolderListFragment$HierarchicalFolderListAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
mFolderParentIcon.setVisibility(mFolder.hasChildren ? View.VISIBLE : View.GONE) <- folderItemView.bind(folder,mDropHandler,mBidiFormatter) <- .
iconView.setVisibility(View.GONE) <- Folder.setIcon(folder,(ImageView)folderItemView.findViewById(R.id.folder_icon)) <- .
iconView.setVisibility(View.VISIBLE) <- Folder.setIcon(folder,(ImageView)folderItemView.findViewById(R.id.folder_icon)) <- .
mUnseenCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnseenCount(mFolder.getBackgroundColor(Color.BLACK),mFolder.unseenCount) <- folderItemView.bind(folder,mDropHandler,mBidiFormatter) <- .
mUnreadCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnreadCount(count) <- folderItemView.overrideUnreadCount(mCurrentFolderForUnreadCheck.unreadCount) <- .
mUnreadCountTextView.setVisibility(count > 0 ? View.VISIBLE : View.GONE) <- setUnreadCount(Utils.getFolderUnreadDisplayCount(mFolder)) <- folderItemView.bind(folder,mDropHandler,mBidiFormatter) <- .
mUnseenCountTextView.setVisibility(View.GONE) <- folderItemView.bind(folder,mDropHandler,mBidiFormatter) <- .
mUnreadCountTextView.setVisibility(View.GONE) <- folderItemView.bind(folder,mDropHandler,mBidiFormatter) <- .
colorBlock.setVisibility(View.VISIBLE) <- Folder.setFolderBlockColor(folder,folderItemView.findViewById(R.id.color_block)) <- .
colorBlock.setVisibility(View.GONE) <- Folder.setFolderBlockColor(folder,folderItemView.findViewById(R.id.color_block)) <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController;.onCreate(Landroid/os/Bundle;)Z
CHAINS:
mLegacyTitleContainer.setOnClickListener(this) <- initializeTitleViews() <- mActionBarView.initialize(mActivity,this,actionBar) <- initializeActionBar() <- .
mLegacyTitleContainer.setVisibility(View.GONE) <- initializeTitleViews() <- mActionBarView.initialize(mActivity,this,actionBar) <- initializeActionBar() <- .
------------------------------------
Lcom/android/mail/ui/OnePaneController;.onError(Lcom/android/mail/providers/Folder;Z)V
CHAINS:
mActionDescriptionIcon.setVisibility(VISIBLE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionDescriptionIcon.setVisibility(GONE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (op.shouldTakeOnActionClickedPrecedence()) {
      op.onActionClicked(getContext());
    }
 else {
      listener.onActionClicked(getContext());
    }
    hide(true,true);
  }
}
) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefReplyAllCustomFromReplyTo()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY_ALL,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account3@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/SuperCollapsedBlock;.(Landroid/content/Context;Landroid/util/AttributeSet;)V
CHAINS:
setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/ui/ActionableToastBar$2280;.run()V
CHAINS:
mActionButton.setOnClickListener(null) <- hide(true,false) <- .
setVisibility(View.GONE) <- hide(true,false) <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onActivityResult(IILandroid/content/Intent;)V
CHAINS:
mContent.setVisibility(View.GONE) <- showWaitFragment(null) <- .
mWait.setVisibility(View.VISIBLE) <- showWaitFragment(null) <- .
finish() <- .
------------------------------------
Lcom/android/mail/ui/OnePaneController;.hideOrRepositionToastBar(Z)V
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(animated,false) <- .
setVisibility(View.GONE) <- mToastBar.hide(animated,false) <- .
------------------------------------
Lcom/android/mail/ui/ConversationPhotoTeaserView;.onMeasure(II)V
CHAINS:
mTeaserRightEdge.setVisibility(GONE) <- .
mTeaserRightEdge.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/FolderSelectionActivity;.onFolderSelected(Lcom/android/mail/providers/Folder;)V
CHAINS:
startActivity(shortcutNameIntent) <- onFolderChanged(folder,false) <- .
finish() <- onFolderChanged(folder,false) <- .
finish() <- createWidget(mAppWidgetId,mAccount,mSelectedFolder) <- onFolderChanged(folder,false) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneController;.handleUpPress()Z
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(false,false) <- handleBackPress() <- .
mActionButton.setOnClickListener(null) <- mToastBar.hide(false,false) <- handleBackPress() <- .
setVisibility(View.GONE) <- mToastBar.hide(false,false) <- handleBackPress() <- .
setVisibility(View.GONE) <- mToastBar.hide(false,false) <- handleBackPress() <- .
------------------------------------
Lcom/android/mail/ui/ConversationListView$HintText;.(Landroid/content/Context;Landroid/util/AttributeSet;I)V
CHAINS:
setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testForward()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/LimitedMultiSelectDialogFragment;.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
CHAINS:
listView.setOnItemClickListener(new OnItemClickListener(){
  @Override public void onItemClick(  final AdapterView<?> parent,  final View view,  final int position,  final long id){
    final String entryValue=(String)parent.getItemAtPosition(position);
    if (selectedValues.contains(entryValue)) {
      selectedValues.remove(entryValue);
      adapter.removeSelected(entryValue);
    }
 else {
      selectedValues.add(entryValue);
      adapter.addSelected(entryValue);
    }
    getArguments().putStringArrayList(ARG_SELECTED_VALUES,new ArrayList<String>(selectedValues));
    adapter.notifyDataSetChanged();
  }
}
) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$45901;.go()V
CHAINS:
mSnapHeader.setVisibility(VISIBLE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- mConversationContainer.onGeometryChange(parsePositions(overlayTopStrs,overlayBottomStrs)) <- .
mSnapHeader.setVisibility(GONE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(0,mOffsetY) <- mConversationContainer.onGeometryChange(parsePositions(overlayTopStrs,overlayBottomStrs)) <- .
------------------------------------
Lcom/android/mail/browse/EmlMessageViewFragment$MessageLoadCallbacks;.onLoadFinished(Landroid/content/Loader<Lcom/android/mail/browse/ConversationMessage;>;Lcom/android/mail/browse/ConversationMessage;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mAttachmentBarList.setVisibility(View.VISIBLE) <- renderBarAttachments(barAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mAttachmentGrid.setVisibility(View.VISIBLE) <- renderTiledAttachments(tiledAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mTitleText.setVisibility(View.VISIBLE) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
setVisibility(mMessageHeaderItem.isExpanded() ? VISIBLE : GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mAttachmentBarList.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mAttachmentGrid.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mTitleText.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(data) <- .
mMessageFooterView.setVisibility(View.VISIBLE) <- mViewController.renderMessage(data) <- .
mSubjectView.setVisibility(GONE) <- mConversationHeaderView.setSubject(subject) <- mViewController.setSubject(data.subject) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(data) <- .
------------------------------------
Lcom/android/mail/ui/NestedFolderTeaserView;.onMeasure(II)V
CHAINS:
mTeaserRightEdge.setVisibility(GONE) <- .
mTeaserRightEdge.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentTile;.setThumbnail(Landroid/graphics/Bitmap;)V
CHAINS:
mTextContainer.setVisibility(GONE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefReplyAllOnlyAccount()V|Ljava/lang/Throwable;
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- activity.mFromSpinner.initialize(ComposeActivity.REPLY_ALL,currentAccount.account,EMPTY_ACCOUNT_LIST,null) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account3@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyAll()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/MultiAdapterSpinner;.setSelectedItem(Lcom/android/mail/browse/MultiAdapterSpinner$FancySpinnerAdapter;I)V
CHAINS:
itemView.setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onResume()V
CHAINS:
setOnItemSelectedListener(this) <- initFromSpinner() <- mFromSpinner.initialize(mComposeMode,mAccount,mAccounts,mRefMessage) <- .
------------------------------------
Lcom/android/mail/ui/FolderSelectionActivity;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- doCancel() <- .
------------------------------------
Lcom/android/mail/browse/MessageHeaderView;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(false) <- handleShowImagePromptClick(v) <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
v.setVisibility(GONE) <- handleShowImagePromptClick(v) <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(false) <- handleShowImagePromptClick(v) <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- handleShowImagePromptClick(v) <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(null,item.getItemId()) <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onClick(Landroid/view/View;)V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentBar;.updateProgress(Z)V
CHAINS:
mProgress.setVisibility(INVISIBLE) <- .
mProgress.setVisibility(VISIBLE) <- .
mSubTitle.setVisibility(VISIBLE) <- .
mSubTitle.setVisibility(INVISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController;.onFooterViewErrorActionClick(Lcom/android/mail/providers/Folder;I)V
CHAINS:
fragment.show(mFragmentManager,SYNC_ERROR_DIALOG_FRAGMENT_TAG) <- showStorageErrorDialog() <- .
------------------------------------
Lcom/android/mail/compose/QuotedTextView;.(Landroid/content/Context;Landroid/util/AttributeSet;I)V
CHAINS:
mShowHideCheckBox.setOnClickListener(this) <- .
mRespondInlineButton.setEnabled(false) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewProgressController$5039;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mail/ui/ConversationListView$4513;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
mSyncTriggerBar.setVisibility(GONE) <- .
mSyncProgressBar.setVisibility(GONE) <- .
------------------------------------
Lcom/android/mail/ui/ConversationSyncDisabledTipView;.getShouldDisplayInList()Z
CHAINS:
mTextArea.setOnClickListener(mAccountSyncOffTextClickedListener) <- setReasonSyncOff(calculateReasonSyncOff(mMailPrefs,mAccount,mAccountPreferences)) <- .
mTextArea.setOnClickListener(mAutoSyncOffTextClickedListener) <- setReasonSyncOff(calculateReasonSyncOff(mMailPrefs,mAccount,mAccountPreferences)) <- .
mText2.setVisibility(View.VISIBLE) <- setReasonSyncOff(calculateReasonSyncOff(mMailPrefs,mAccount,mAccountPreferences)) <- .
mText2.setVisibility(View.VISIBLE) <- setReasonSyncOff(calculateReasonSyncOff(mMailPrefs,mAccount,mAccountPreferences)) <- .
------------------------------------
Lcom/android/mail/compose/AttachmentsView;.addAttachment(Lcom/android/mail/providers/Account;Landroid/net/Uri;)J|Lcom/android/mail/compose/AttachmentsView$AttachmentFailureException;
CHAINS:
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- addAttachment(account,generateLocalAttachment(contentUri)) <- .
------------------------------------
Lcom/android/mail/ui/FolderSelectionDialog$QueryRunner;.onPostExecute(Ljava/lang/Void;)V
CHAINS:
mDialog.show() <- showInternal() <- .
mDialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){
  @Override public void onItemClick(  AdapterView<?> parent,  View view,  int position,  long id){
    onListItemClick(position);
  }
}
) <- showInternal() <- .
------------------------------------
Lcom/android/mail/ui/LimitedMultiSelectDialogFragment$LimitedMultiSelectAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
checkedTextView.setEnabled(isEnabled(position)) <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter$MessageHeaderItem;.bindView(Landroid/view/View;Z)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- header.bind(this,measureOnly) <- .
------------------------------------
Lcom/android/mail/ui/ConversationSyncDisabledTipView;.onMeasure(II)V
CHAINS:
mTeaserRightEdge.setVisibility(GONE) <- .
mTeaserRightEdge.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController;.onRestart()V
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(false,false) <- .
setVisibility(View.GONE) <- mToastBar.hide(false,false) <- .
------------------------------------
Lcom/android/mail/browse/EmlMessageViewFragment$EmlWebViewClient;.onPageFinished(Landroid/webkit/WebView;Ljava/lang/String;)V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- mViewController.dismissLoadingStatus() <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneController;.showConversation(Lcom/android/mail/providers/Conversation;Z)V
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(false,false) <- handleBackPress() <- .
setVisibility(View.GONE) <- mToastBar.hide(false,false) <- handleBackPress() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onLoadFinished(Landroid/content/Loader<Landroid/database/Cursor;>;Landroid/database/Cursor;)V
CHAINS:
findViewById(R.id.wait) <- showWaitFragment(account) <- .
findViewById(R.id.compose) <- .
findViewById(R.id.wait) <- .
findViewById(R.id.from_picker) <- findViews() <- finishCreate() <- .
findViewById(R.id.spinner_from_content) <- findViews() <- finishCreate() <- .
findViewById(R.id.from_account_name) <- findViews() <- finishCreate() <- .
findViewById(R.id.static_from_content) <- findViews() <- finishCreate() <- .
findViewById(R.id.body) <- findViews() <- finishCreate() <- .
findViewById(R.id.quoted_text_view) <- findViews() <- finishCreate() <- .
findViewById(R.id.subject) <- findViews() <- finishCreate() <- .
findViewById(R.id.bcc) <- findViews() <- finishCreate() <- .
findViewById(R.id.cc) <- findViews() <- finishCreate() <- .
findViewById(R.id.to) <- findViews() <- finishCreate() <- .
findViewById(R.id.add_video_attachment) <- findViews() <- finishCreate() <- .
findViewById(R.id.add_photo_attachment) <- findViews() <- finishCreate() <- .
findViewById(R.id.attachments) <- findViews() <- finishCreate() <- .
findViewById(R.id.cc_bcc_wrapper) <- findViews() <- finishCreate() <- .
findViewById(R.id.add_cc_bcc) <- findViews() <- finishCreate() <- .
findViewById(R.id.compose) <- findViews() <- finishCreate() <- .
setOnItemSelectedListener(this) <- initFromSpinner() <- mFromSpinner.initialize(action,mAccount,mAccounts,mRefMessage) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setOnItemSelectedListener(this) <- initFromSpinner() <- mFromSpinner.initialize(action,mAccount,mAccounts,mRefMessage) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,intent,null) <- .
setOnItemSelectedListener(this) <- initFromSpinner() <- mFromSpinner.initialize(action,mAccount,mAccounts,mRefMessage) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(URLDecoder.decode(replacePlus(body.get(0)),UTF8_ENCODING_NAME),true) <- initFromMailTo(dataUri.toString()) <- initFromExtras(intent) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(text,true) <- initFromExtras(intent) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(body,false) <- initFromRefMessage(mComposeMode) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(body,false) <- initFromRefMessage(action) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(account) <- finishCreate() <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(mComposeMode,intent,null) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(mComposeMode,intent,null) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mVideoAttachmentsButton.setOnClickListener(this) <- findViews() <- finishCreate() <- .
mPhotoAttachmentsButton.setOnClickListener(this) <- findViews() <- finishCreate() <- .
mCcBccButton.setOnClickListener(this) <- findViews() <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- showCcBcc(savedState) <- finishCreate() <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(mComposeMode) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(action) <- finishCreate() <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- finishCreate() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- showCcBcc(savedState) <- finishCreate() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(mComposeMode) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(action) <- finishCreate() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(mComposeMode) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(action) <- finishCreate() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(mComposeMode,intent,null) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(mComposeMode) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(action) <- finishCreate() <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(mComposeMode,intent,null) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mFromSpinnerWrapper.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mFromSpinnerWrapper.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,intent,null) <- .
mFromSpinnerWrapper.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mFromStatic.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mFromStatic.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,intent,null) <- .
mFromStatic.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mFromSpinnerWrapper.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mFromSpinnerWrapper.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,intent,null) <- .
mFromSpinnerWrapper.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mFromStatic.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mFromStatic.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(mComposeMode,intent,null) <- .
mFromStatic.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mQuotedTextView.setVisibility(View.GONE) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mQuotedTextView.setVisibility(View.GONE) <- finishSetup(mComposeMode,intent,null) <- .
mQuotedTextView.setVisibility(View.GONE) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
setVisibility(VISIBLE) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
setVisibility(VISIBLE) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- mQuotedTextView.updateCheckedState(showQuotedText) <- updateHideOrShowQuotedText(mShowQuotedText) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- mQuotedTextView.updateCheckedState(showQuotedText) <- updateHideOrShowQuotedText(mShowQuotedText) <- finishSetup(mComposeMode,intent,null) <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- mQuotedTextView.updateCheckedState(showQuotedText) <- updateHideOrShowQuotedText(mShowQuotedText) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(!forward) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(!forward) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,getIntent(),mInnerSavedState) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(mComposeMode,intent,null) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
finish() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(mComposeMode) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- .
------------------------------------
Lcom/android/mail/ui/AbstractActivityController;.onRestoreInstanceState(Landroid/os/Bundle;)V
CHAINS:
mText.setOnClickListener(this) <- leaveBehind.bind(deletedRow,mAccount,this,undoOp,target,mFolder,viewHeight) <- setupLeaveBehind(left.data,left.op,left.data.position,left.height) <- convListFragment.getAnimatedAdapter().onRestoreInstanceState(savedState) <- .
mSwipeableContent.setOnClickListener(this) <- leaveBehind.bind(deletedRow,mAccount,this,undoOp,target,mFolder,viewHeight) <- setupLeaveBehind(left.data,left.op,left.data.position,left.height) <- convListFragment.getAnimatedAdapter().onRestoreInstanceState(savedState) <- .
mSwipeableContent.setVisibility(View.GONE) <- item.makeInert() <- fadeOutLeaveBehindItems() <- setupLeaveBehind(left.data,left.op,left.data.position,left.height) <- convListFragment.getAnimatedAdapter().onRestoreInstanceState(savedState) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testChangeModes3()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment;.onUserVisibleHintChanged()V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- .
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- dismissLoadingStatus(null) <- mProgressController.dismissLoadingStatus() <- .
mBackgroundView.setVisibility(View.VISIBLE) <- mProgressController.showLoadingStatus(isUserVisible()) <- startConversationLoad() <- handleDelayedConversationLoad() <- .
mWebView.setVisibility(View.VISIBLE) <- startConversationLoad() <- handleDelayedConversationLoad() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity$131908;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
finish() <- ((ComposeActivity)getActivity()).doDiscardWithoutConfirmation() <- .
------------------------------------
Lcom/android/mail/ui/ConversationSyncDisabledTipView$4251;.onClick(Landroid/view/View;)V
CHAINS:
dialog.show(mActivity.getFragmentManager(),TurnAutoSyncOnDialog.DIALOG_TAG) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.from_picker) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.spinner_from_content) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.from_account_name) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.static_from_content) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.body) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.quoted_text_view) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.subject) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.bcc) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.cc) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.to) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.add_video_attachment) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.add_photo_attachment) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.attachments) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.cc_bcc_wrapper) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.add_cc_bcc) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
findViewById(R.id.compose) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
setOnItemSelectedListener(this) <- initFromSpinner() <- mFromSpinner.initialize(action,mAccount,mAccounts,mRefMessage) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(URLDecoder.decode(replacePlus(body.get(0)),UTF8_ENCODING_NAME),true) <- initFromMailTo(dataUri.toString()) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(text,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setBody(body,false) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(account) <- finishCreate() <- checkValidAccounts() <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
startActivityForResult(noAccountIntent,RESULT_CREATE_ACCOUNT) <- checkValidAccounts() <- .
mVideoAttachmentsButton.setOnClickListener(this) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
mPhotoAttachmentsButton.setOnClickListener(this) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
mCcBccButton.setOnClickListener(this) <- findViews() <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
setContentView(R.layout.compose) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- showCcBcc(savedState) <- finishCreate() <- checkValidAccounts() <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- finishCreate() <- checkValidAccounts() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- showCcBcc(savedState) <- finishCreate() <- checkValidAccounts() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,true,false) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mFromSpinnerWrapper.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mFromStatic.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mFromSpinnerWrapper.setVisibility(View.VISIBLE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mFromStatic.setVisibility(View.GONE) <- initFromSpinner(savedInstanceState != null ? savedInstanceState : intent.getExtras(),action) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mQuotedTextView.setVisibility(View.GONE) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(VISIBLE) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(VISIBLE) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
mQuotedTextWebView.setVisibility(show ? View.VISIBLE : View.GONE) <- updateQuotedTextVisibility(checked) <- mQuotedTextView.updateCheckedState(showQuotedText) <- updateHideOrShowQuotedText(mShowQuotedText) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(!forward) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(!forward) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,attachment) <- addAttachmentAndUpdateView(a) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(attachments) <- initAttachmentsFromIntent(intent) <- finishSetup(action,intent,savedState) <- finishCreate() <- checkValidAccounts() <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(value,true) <- initFromExtras(intent) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedTextFromHtml(quotedText,shouldQuoteText) <- initQuotedText(quotedText,false) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(htmlText) <- mQuotedTextView.setQuotedTextFromDraft(quotedText,mForward) <- initFromDraftMessage(message) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(action) <- initFromRefMessage(action) <- finishCreate() <- checkValidAccounts() <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- finishCreate() <- checkValidAccounts() <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.first_button) <- .
findViewById(R.id.wait) <- .
findViewById(R.id.content) <- .
setVisible(false) <- .
((Button)findViewById(R.id.first_button)).setOnClickListener(this) <- .
setContentView(R.layout.mailbox_selection_activity) <- .
------------------------------------
Lcom/android/mail/browse/ConversationListFooterView;.onFinishInflate()V
CHAINS:
mErrorActionButton.setOnClickListener(this) <- .
mLoadMore.setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/ui/NestedFolderTeaserView$15555;.onLoadFinished(Landroid/content/Loader<Lcom/android/mail/content/ObjectCursor<Lcom/android/mail/providers/Folder;>;>;Lcom/android/mail/content/ObjectCursor<Lcom/android/mail/providers/Folder;>;)V
CHAINS:
view.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  final View v){
    mListener.onFolderSelected(holder.getFolder());
  }
}
) <- attachOnClickListener(itemView,holder) <- createFolderHolder(folder.name) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest$43781;.run()V
CHAINS:
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBodyView.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mSubject.addTextChangedListener(this) <- initChangeListeners() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setOnClickListener(this) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mDeleteButton.setOnClickListener(clickListener) <- attachmentTile.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentTile,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
deleteButton.setOnClickListener(clickListener) <- attachmentView.addDeleteListener(new OnClickListener(){
  @Override public void onClick(  View v){
    deleteAttachment(attachmentView,attachment);
  }
}
) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(false,showCc,showBcc) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.INVISIBLE) <- attachmentTile.render(attachment,null,-1,this,false) <- mTileGrid.addComposeTileFromAttachment(attachment) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mCcBccButton.setVisibility(View.VISIBLE) <- updateHideOrShowCcBcc() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.GONE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(View.VISIBLE) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setVisibility(allow ? View.VISIBLE : View.GONE) <- allowRespondInline(true) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
quotedTextRow.setVisibility(allow ? View.VISIBLE : View.INVISIBLE) <- allowQuotedText(allow) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(GONE) <- mAttachmentsView.deleteAllAttachments() <- resetMessageForModeChange() <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
setVisibility(View.VISIBLE) <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mAttachmentLayout.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mTileGrid.setVisibility(VISIBLE) <- expandView() <- addAttachment(attachment) <- mAttachmentsView.addAttachment(mAccount,a) <- addAttachments(refMessage.getAttachments()) <- initAttachments(mRefMessage) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(false) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(2,ComposeActivity.FORWARD) <- .
mRespondInlineButton.setEnabled(true) <- setQuotedText(quotedText) <- mQuotedTextView.setQuotedText(action,refMessage,action != FORWARD) <- initQuotedTextFromRefMessage(mRefMessage,action) <- setFieldsFromRefMessage(mComposeMode) <- activity.onNavigationItemSelected(1,ComposeActivity.REPLY_ALL) <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter$ConversationHeaderItem;.createView(Landroid/content/Context;Landroid/view/LayoutInflater;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
mFoldersView.setVisibility(show ? View.VISIBLE : View.GONE) <- setFoldersVisible(true) <- headerView.setFolders(mConversation) <- .
mSubjectView.setVisibility(GONE) <- headerView.setSubject(mConversation.subject) <- .
------------------------------------
Lcom/android/mail/ui/SeparatedFolderListAdapter;.getView(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;
CHAINS:
iconView.setVisibility(View.GONE) <- Folder.setIcon(folder,iconView) <- adapter.getView(position,convertView,parent) <- .
iconView.setVisibility(View.VISIBLE) <- Folder.setIcon(folder,iconView) <- adapter.getView(position,convertView,parent) <- .
colorBlock.setVisibility(View.VISIBLE) <- Folder.setFolderBlockColor(folder,colorBlock) <- adapter.getView(position,convertView,parent) <- .
colorBlock.setVisibility(View.GONE) <- Folder.setFolderBlockColor(folder,colorBlock) <- adapter.getView(position,convertView,parent) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewProgressController$1745;.go()V
CHAINS:
mProgressView.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewProgressController$3758;.go()V
CHAINS:
mBackgroundView.setVisibility(View.GONE) <- animateDismiss(doAfter) <- dismiss(doAfter) <- .
mProgressView.setVisibility(View.GONE) <- dismiss(doAfter) <- .
------------------------------------
Lcom/android/mail/ui/ConversationLongPressTipView;.onMeasure(II)V
CHAINS:
mTeaserRightEdge.setVisibility(GONE) <- .
mTeaserRightEdge.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/ConversationListFragment$ConversationCursorObserver;.onChanged()V
CHAINS:
mSyncTriggerBar.setVisibility(GONE) <- mConversationListView.onSyncFinished() <- checkSyncStatus() <- onFolderStatusUpdated() <- onConversationListStatusUpdated() <- .
mLoadMore.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoading.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mErrorActionButton.setVisibility(mErrorStatus != UIProvider.LastSyncResult.SECURITY_ERROR ? View.VISIBLE : View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoading.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoading.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoadMore.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mNetworkError.setVisibility(View.GONE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
mLoading.setVisibility(View.VISIBLE) <- mFooterView.updateStatus(cursor) <- onConversationListStatusUpdated() <- .
------------------------------------
Lcom/android/mail/ui/FolderSelectionActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
findViewById(R.id.first_button) <- .
firstButton.setOnClickListener(this) <- .
setContentView(R.layout.folders_activity) <- .
firstButton.setVisibility(View.VISIBLE) <- .
firstButton.setEnabled(false) <- .
------------------------------------
Lcom/android/mail/compose/AttachmentComposeView;.(Landroid/content/Context;Lcom/android/mail/providers/Attachment;)V
CHAINS:
((TextView)findViewById(R.id.attachment_size)).setVisibility(View.GONE) <- populateAttachmentData(c) <- .
------------------------------------
Lcom/android/mail/browse/WebViewContextMenu$Share;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
mActivity.startActivity(Intent.createChooser(send,mActivity.getText(getChooserTitleStringResIdForMenuType(MenuType.SHARE_LINK_MENU)))) <- shareLink(mUri) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneLayout;.onViewModeChanged(I)V
CHAINS:
mMiscellaneousView.setVisibility(GONE) <- .
mConversationView.setVisibility(VISIBLE) <- .
mConversationView.setVisibility(GONE) <- .
mMiscellaneousView.setVisibility(VISIBLE) <- .
mListCopyView.setVisibility(VISIBLE) <- .
mListView.setVisibility(VISIBLE) <- .
mFoldersView.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneLayout;.onFinishInflate()V
CHAINS:
mMiscellaneousView.setVisibility(GONE) <- .
mConversationView.setVisibility(GONE) <- .
mListCopyView.setVisibility(GONE) <- .
mListView.setVisibility(GONE) <- .
mFoldersView.setVisibility(GONE) <- .
------------------------------------
Lcom/android/mail/ui/CreateShortcutActivity;.onCreate(Landroid/os/Bundle;)V
CHAINS:
startActivity(intent) <- .
finish() <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentBar$2627;.run()V
CHAINS:
button.setVisibility(visible ? VISIBLE : GONE) <- setButtonVisible(mOverflowButton,shouldShowOverflow()) <- updateActionsInternal() <- .
button.setVisibility(visible ? VISIBLE : GONE) <- setButtonVisible(mCancelButton,shouldShowCancel()) <- updateActionsInternal() <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testRecipientsRefMessageReplyToSelf()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/ActionableToastBar$7723;.onAnimationEnd(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity$111059;.onClick(Landroid/content/DialogInterface;I)V
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(mReplyFromAccount.account) <- sendOrSave(save,showToast) <- ((ComposeActivity)getActivity()).finishSendConfirmDialog(save,showToast) <- .
finish() <- sendOrSave(save,showToast) <- ((ComposeActivity)getActivity()).finishSendConfirmDialog(save,showToast) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onClick(Landroid/view/View;)V
CHAINS:
startActivityForResult(Intent.createChooser(i,getText(R.string.select_attachment_type)),RESULT_PICK_ATTACHMENT) <- doAttach(MIME_TYPE_VIDEO) <- .
startActivityForResult(Intent.createChooser(i,getText(R.string.select_attachment_type)),RESULT_PICK_ATTACHMENT) <- doAttach(MIME_TYPE_PHOTO) <- .
mBcc.setVisibility(showBcc ? View.VISIBLE : View.GONE) <- mCcBccView.show(true,true,true) <- showCcBccViews() <- .
mCc.setVisibility(showCc ? View.VISIBLE : View.GONE) <- mCcBccView.show(true,true,true) <- showCcBccViews() <- .
mCcBccButton.setVisibility(View.INVISIBLE) <- showCcBccViews() <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onListItemClick(Landroid/widget/ListView;Landroid/view/View;IJ)V
CHAINS:
startActivity(intent) <- selectAccount(new Account((Cursor)mAdapter.getItem(position))) <- .
finish() <- selectAccount(new Account((Cursor)mAdapter.getItem(position))) <- .
finish() <- selectAccount(new Account((Cursor)mAdapter.getItem(position))) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testChangeModes2()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/MessageHeaderDetailsDialogFragment;.onCreateDialog(Landroid/os/Bundle;)Landroid/app/Dialog;
CHAINS:
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
date.setVisibility(VISIBLE) <- MessageHeaderView.renderExpandedDetails(getResources(),expandedDetails,null,addressCache,(Account)args.getParcelable(ARG_ACCOUNT),null,args.getStringArray(ARG_FROM),args.getStringArray(ARG_REPLY_TO),args.getStringArray(ARG_TO),args.getStringArray(ARG_CC),args.getStringArray(ARG_BCC),args.getCharSequence(ARG_RECEIVED_TIME)) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneController;.onUndoAvailable(Lcom/android/mail/ui/ToastBarOperation;)V
CHAINS:
mActionDescriptionIcon.setVisibility(VISIBLE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionDescriptionIcon.setVisibility(GONE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (op.shouldTakeOnActionClickedPrecedence()) {
      op.onActionClicked(getContext());
    }
 else {
      listener.onActionClicked(getContext());
    }
    hide(true,true);
  }
}
) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneController$22020;.run()V
CHAINS:
mActionButton.setOnClickListener(null) <- mToastBar.hide(animated,false) <- .
setVisibility(View.GONE) <- mToastBar.hide(animated,false) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testReplyAllWithCc()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account1@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.onAccountChanged(Lcom/android/mail/providers/Account;Lcom/android/mail/providers/Account;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mAttachmentBarList.setVisibility(View.VISIBLE) <- renderBarAttachments(barAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mAttachmentGrid.setVisibility(View.VISIBLE) <- renderTiledAttachments(tiledAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mTitleText.setVisibility(View.VISIBLE) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
setVisibility(mMessageHeaderItem.isExpanded() ? VISIBLE : GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mAttachmentBarList.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mAttachmentGrid.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mTitleText.setVisibility(View.GONE) <- mMessageFooterView.bind(item,mCallbacks.getAccountUri(),false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mMessageFooterView.setVisibility(View.VISIBLE) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- render(measureOnly) <- mMessageHeaderView.bind(item,false) <- mViewController.renderMessage(newCursor.getMessage()) <- renderMessage(getMessageCursor()) <- .
------------------------------------
Lcom/android/mail/ui/SecureConversationViewFragment;.onActivityCreated(Landroid/os/Bundle;)V
CHAINS:
mBackgroundView.setVisibility(View.VISIBLE) <- mProgressController.showLoadingStatus(mCallbacks.isViewVisibleToUser()) <- mViewController.onActivityCreated(savedInstanceState) <- .
------------------------------------
Lcom/android/mail/browse/ConversationItemView;.dismiss()V
CHAINS:
mText.setOnClickListener(this) <- leaveBehind.bind(deletedRow,mAccount,this,undoOp,target,mFolder,viewHeight) <- adapter.setupLeaveBehind(conv,undoOp,conv.position,target.getHeight()) <- getListView().dismissChild(this) <- .
mSwipeableContent.setOnClickListener(this) <- leaveBehind.bind(deletedRow,mAccount,this,undoOp,target,mFolder,viewHeight) <- adapter.setupLeaveBehind(conv,undoOp,conv.position,target.getHeight()) <- getListView().dismissChild(this) <- .
mSwipeableContent.setVisibility(View.GONE) <- item.makeInert() <- fadeOutLeaveBehindItems() <- adapter.setupLeaveBehind(conv,undoOp,conv.position,target.getHeight()) <- getListView().dismissChild(this) <- .
------------------------------------
Lcom/android/mail/ui/OnePaneController;.onUndoAvailable(Lcom/android/mail/ui/ToastBarOperation;)V
CHAINS:
mActionDescriptionIcon.setVisibility(VISIBLE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionDescriptionIcon.setVisibility(VISIBLE) <- mToastBar.show(getUndoClickedListener(convList != null ? convList.getAnimatedAdapter() : null),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionDescriptionIcon.setVisibility(GONE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionDescriptionIcon.setVisibility(GONE) <- mToastBar.show(getUndoClickedListener(convList != null ? convList.getAnimatedAdapter() : null),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (op.shouldTakeOnActionClickedPrecedence()) {
      op.onActionClicked(getContext());
    }
 else {
      listener.onActionClicked(getContext());
    }
    hide(true,true);
  }
}
) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (op.shouldTakeOnActionClickedPrecedence()) {
      op.onActionClicked(getContext());
    }
 else {
      listener.onActionClicked(getContext());
    }
    hide(true,true);
  }
}
) <- mToastBar.show(getUndoClickedListener(convList != null ? convList.getAnimatedAdapter() : null),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mToastBar.show(getUndoClickedListener(convList.getAnimatedAdapter()),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mToastBar.show(getUndoClickedListener(convList != null ? convList.getAnimatedAdapter() : null),0,Utils.convertHtmlToPlainText(op.getDescription(mActivity.getActivityContext())),true,R.string.undo,true,op) <- .
------------------------------------
Lcom/android/mail/browse/MessageHeaderView;.onFinishInflate()V
CHAINS:
v.setOnClickListener(this) <- registerMessageClickTargets(R.id.reply,R.id.reply_all,R.id.forward,R.id.star,R.id.edit_draft,R.id.overflow,R.id.upper_header) <- .
------------------------------------
Lcom/android/mail/ui/ConversationsInOutboxTipView;.onMeasure(II)V
CHAINS:
mTeaserRightEdge.setVisibility(GONE) <- .
mTeaserRightEdge.setVisibility(VISIBLE) <- .
------------------------------------
Lcom/android/mail/ui/ShortcutNameActivity;.onEditorAction(Landroid/widget/TextView;ILandroid/view/KeyEvent;)Z
CHAINS:
finish() <- doCreateShortcut() <- .
------------------------------------
Lcom/android/mail/ui/ActionableToastBar$4742;.onClick(Landroid/view/View;)V
CHAINS:
mActionButton.setOnClickListener(null) <- hide(true,true) <- .
setVisibility(View.GONE) <- hide(true,true) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment$6796;.go()V
CHAINS:
mBackgroundView.setVisibility(View.VISIBLE) <- mProgressController.showLoadingStatus(isUserVisible()) <- startConversationLoad() <- handleDelayedConversationLoad() <- .
mWebView.setVisibility(View.VISIBLE) <- startConversationLoad() <- handleDelayedConversationLoad() <- .
------------------------------------
Lcom/android/mail/browse/MessageHeaderView;.onClick(Landroid/view/View;)V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(false) <- handleShowImagePromptClick(v) <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
v.setVisibility(GONE) <- handleShowImagePromptClick(v) <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(false) <- handleShowImagePromptClick(v) <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- handleShowImagePromptClick(v) <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(detailsExpanded) <- toggleMessageDetails(v) <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? VISIBLE : GONE,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(defaultReplyAll ? GONE : VISIBLE,mReplyButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton) <- setReplyOrReplyAllVisible() <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mDraftIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mPhotoView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mDraftIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mCollapsedStarVisible && mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mMessage.hasAttachments ? VISIBLE : GONE,mAttachmentIcon) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mEditDraftButton,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSnippetView,mUpperDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mStarShown ? VISIBLE : GONE,mStarView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(draftVis,mDraftIcon,mEditDraftButton) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(normalVis,mPhotoView,mForwardButton,mOverflowButton) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(mIsSnappy ? VISIBLE : GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(VISIBLE,mPhotoView,mSenderEmailView,mDateView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mReplyButton,mReplyAllButton,mForwardButton,mOverflowButton,mDraftIcon,mEditDraftButton,mStarView,mAttachmentIcon,mUpperDateView,mSnippetView) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
v.setVisibility(visibility) <- setChildVisibility(GONE,mSnapHeaderBottomBorder) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility((mIsSnappy) ? GONE : VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(VISIBLE) <- updateChildVisibility() <- toggleExpanded() <- onClick(v,v.getId()) <- .
------------------------------------
Lcom/android/mail/browse/ConversationItemViewCoordinates;.(Landroid/content/Context;Lcom/android/mail/browse/ConversationItemViewCoordinates$Config;Lcom/android/mail/browse/ConversationItemViewCoordinates$CoordinatesCache;)V
CHAINS:
personalIndicator.setVisibility(config.isPersonalIndicatorVisible() ? View.VISIBLE : View.GONE) <- .
replyState.setVisibility(config.isReplyStateVisible() ? View.VISIBLE : View.GONE) <- .
contactImagesView.setVisibility(View.GONE) <- .
contactImagesView.setVisibility(View.GONE) <- .
contactImagesView.setVisibility(View.VISIBLE) <- .
attachmentPreviewsBottomMargin.setVisibility(marginVisible ? View.VISIBLE : View.GONE) <- .
folders.setVisibility(config.areFoldersVisible() ? View.VISIBLE : View.GONE) <- .
attachmentPreviews.setVisibility(View.GONE) <- .
attachmentPreviews.setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivity;.onAccountChanged()V
CHAINS:
mBodyView.addTextChangedListener(this) <- .
mBodyView.addTextChangedListener(this) <- appendSignature() <- setAccount(mReplyFromAccount.account) <- .
------------------------------------
Lcom/android/mail/browse/ConversationContainer;.onFinishInflate()V
CHAINS:
mDetailsPopup.show(manager,DETAILS_DIALOG_TAG) <- showDetailsPopup() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
v.setOnClickListener(this) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setOnClickListener(this) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setOnClickListener(this) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
detailsText.setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.bcc_heading,R.id.bcc_details,bcc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.cc_heading,R.id.cc_details,cc,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.to_heading,R.id.to_details,to,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.replyto_heading,R.id.replyto_details,replyTo,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
rootView.findViewById(headerId).setVisibility(VISIBLE) <- renderEmailList(res,R.id.from_heading,R.id.from_details,from,viaDomain,detailsView,addressCache,account,veiledMatcher) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
date.setVisibility(VISIBLE) <- renderExpandedDetails(getResources(),mExpandedDetailsView,mMessage.viaDomain,mAddressCache,getAccount(),mVeiledMatcher,mFrom,mReplyTo,mTo,mCc,mBcc,mMessageHeaderItem.getTimestampLong()) <- ensureExpandedDetailsView() <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mExpandedDetailsView.setVisibility(VISIBLE) <- showExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setVisibility(VISIBLE) <- showCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mSpamWarningView.setVisibility(GONE) <- hideSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- showImagePromptAlways(true) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setVisibility(VISIBLE) <- showImagePromptOnce() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mImagePromptView.setVisibility(GONE) <- hideShowImagePrompt() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mInviteView.setVisibility(VISIBLE) <- showInvite() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mInviteView.setVisibility(GONE) <- hideInvite() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mExpandedDetailsView.setVisibility(GONE) <- hideExpandedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mCollapsedDetailsView.setVisibility(GONE) <- hideCollapsedDetails() <- setMessageDetailsExpanded(mMessageHeaderItem.detailsExpanded) <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mSpamWarningLink.setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
mSpamWarningLink.setVisibility(GONE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
setVisibility(VISIBLE) <- mSpamWarningView.showSpamWarning(mMessage,mSender) <- showSpamWarning() <- setMessageDetailsVisibility(GONE) <- hideMessageDetails() <- mSnapHeader.setSnappy(true) <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentBar;.onMenuItemClick(Landroid/view/MenuItem;)Z
CHAINS:
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- showDownloadingDialog() <- mActionHandler.showAttachment(AttachmentDestination.CACHE) <- onClick(item.getItemId(),null) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- showDownloadingDialog() <- mActionHandler.showAttachment(AttachmentDestination.EXTERNAL) <- onClick(item.getItemId(),null) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- mActionHandler.showDownloadingDialog() <- onClick(item.getItemId(),null) <- .
newFragment.show(ft,PROGRESS_FRAGMENT_TAG) <- mActionHandler.showDownloadingDialog() <- onClick(item.getItemId(),null) <- .
------------------------------------
Lcom/android/mail/browse/MessageAttachmentBar;.onFinishInflate()V
CHAINS:
mCancelButton.setOnClickListener(this) <- .
mOverflowButton.setOnClickListener(this) <- .
setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/browse/ConversationContainer;.onNotifierScroll(II)V
CHAINS:
mSnapHeader.setVisibility(VISIBLE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(x,y) <- .
mSnapHeader.setVisibility(GONE) <- positionSnapHeader(mSnapIndex) <- positionOverlays(x,y) <- .
------------------------------------
Lcom/android/mail/ui/ConversationListFragment$12642;.onChanged(Lcom/android/mail/providers/Folder;)V
CHAINS:
mSyncTriggerBar.setVisibility(GONE) <- mConversationListView.onSyncFinished() <- checkSyncStatus() <- onFolderStatusUpdated() <- onFolderUpdated(newFolder) <- .
------------------------------------
Lcom/android/mail/ui/ActionableToastBar$6858;.onAnimationStart(Landroid/animation/Animator;)V
CHAINS:
setVisibility(View.VISIBLE) <- .
------------------------------------
Lcom/android/mail/compose/ComposeActivityTest;.testChangeModes1()V|Ljava/lang/Throwable;
CHAINS:
mBodyView.addTextChangedListener(this) <- appendSignature() <- activity.setAccount(mAccount) <- setAccount(activity,"account0@mockuiprovider.com") <- .
------------------------------------
Lcom/android/mail/browse/SelectedConversationsActionMenu;.onActionItemClicked(Landroid/view/ActionMode;Landroid/view/MenuItem;)Z
CHAINS:
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- performDestructiveAction(R.id.mark_not_important) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- performDestructiveAction(R.id.remove_star) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- performDestructiveAction(R.id.archive) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- performDestructiveAction(R.id.discard_drafts) <- .
show(manager,DIALOG_TAG) <- c.displayDialog(mActivity.getFragmentManager()) <- performDestructiveAction(R.id.delete) <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewHeader;.onFinishInflate()V
CHAINS:
mFoldersView.setOnClickListener(this) <- .
------------------------------------
Lcom/android/mail/browse/EmlMessageViewFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mCardTop.setVisibility(GONE) <- ((BorderView)rootView.findViewById(R.id.bottom_border)).disableCardTopBorder() <- mViewController.onCreateView(inflater,container,savedInstanceState) <- .
mCardBottom.setVisibility(GONE) <- ((BorderView)rootView.findViewById(R.id.top_border)).disableCardBottomBorder() <- mViewController.onCreateView(inflater,container,savedInstanceState) <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity$7646;.run()V
CHAINS:
startActivity(intent) <- selectAccount(new Account(accounts)) <- updateAccountList(accounts) <- .
setVisible(true) <- updateAccountList(accounts) <- .
startActivityForResult(noAccountIntent,RESULT_CREATE_ACCOUNT) <- updateAccountList(accounts) <- .
mContent.setVisibility(View.VISIBLE) <- updateAccountList(accounts) <- .
mWait.setVisibility(View.GONE) <- updateAccountList(accounts) <- .
finish() <- selectAccount(new Account(accounts)) <- updateAccountList(accounts) <- .
finish() <- selectAccount(new Account(accounts)) <- updateAccountList(accounts) <- .
------------------------------------
Lcom/android/mail/ui/ConversationViewFragment;.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;
CHAINS:
mNewMessageBar.setOnClickListener(new View.OnClickListener(){
  @Override public void onClick(  View v){
    onNewMessageBarClick();
  }
}
) <- .
------------------------------------
Lcom/android/mail/photo/MailPhotoViewActivity$10954;.onClick(Landroid/view/View;)V
CHAINS:
retryButton.setVisibility(View.GONE) <- .
emptyText.setVisibility(View.GONE) <- .
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;.onBackPressed()V
CHAINS:
finish() <- .
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter$MessageFooterItem;.bindView(Landroid/view/View;Z)V
CHAINS:
mAttachmentBarList.setVisibility(View.VISIBLE) <- renderBarAttachments(barAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
mAttachmentGrid.setVisibility(View.VISIBLE) <- renderTiledAttachments(tiledAttachments,loaderResult) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
mTitleText.setVisibility(View.VISIBLE) <- renderAttachments(attachments,loaderResult) <- renderAttachments(false) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
setVisibility(mMessageHeaderItem.isExpanded() ? VISIBLE : GONE) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
mAttachmentBarList.setVisibility(View.GONE) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
mAttachmentGrid.setVisibility(View.GONE) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
mTitleText.setVisibility(View.GONE) <- attachmentsView.bind(mHeaderitem,mAccountController.getAccount().uri,measureOnly) <- .
------------------------------------
Lcom/android/mail/ui/TwoPaneController;.onError(Lcom/android/mail/providers/Folder;Z)V
CHAINS:
mActionDescriptionIcon.setVisibility(VISIBLE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionDescriptionIcon.setVisibility(GONE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionButton.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View widget){
    if (op.shouldTakeOnActionClickedPrecedence()) {
      op.onActionClicked(getContext());
    }
 else {
      listener.onActionClicked(getContext());
    }
    hide(true,true);
  }
}
) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
mActionIcon.setVisibility(showActionIcon ? VISIBLE : GONE) <- mToastBar.show(listener,R.drawable.ic_alert_white,Utils.getSyncStatusText(mActivity.getActivityContext(),lastSyncResult),false,actionTextResourceId,replaceVisibleToast,new ToastBarOperation(1,0,ToastBarOperation.ERROR,false,folder)) <- showErrorToast(folder,replaceVisibleToast) <- .
------------------------------------
------------------------------------
Lcom/android/mail/ui/ShortcutNameActivity;
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity;
------------------------------------
Lcom/android/mail/browse/WebViewContextMenu;
------------------------------------
Lcom/android/mail/browse/EmailCopyContextMenu;
------------------------------------
Lcom/android/mail/ui/FolderSelectorAdapter;
------------------------------------
Lcom/android/mail/ui/SeparatedFolderListAdapter;
------------------------------------
Lcom/android/mail/ui/HierarchicalFolderSelectorAdapter;
------------------------------------
Lcom/android/mail/compose/FromAddressSpinnerAdapter;
------------------------------------
Lcom/android/mail/ui/MailboxSelectionActivity$9681;
------------------------------------
Lcom/android/mail/ui/CreateShortcutActivity;
------------------------------------
Lcom/android/mail/browse/MergedAdapter<TT;>;
------------------------------------
Lcom/android/mail/compose/ComposeActivity$ComposeModeAdapter;
------------------------------------
Lcom/android/mail/browse/EmlViewerActivity;
------------------------------------
Lcom/android/mail/ui/AbstractMailActivity;
------------------------------------
Lcom/android/mail/ui/AnimatedAdapter;
------------------------------------
Lcom/android/mail/browse/MultiAdapterSpinner$MergedSpinnerAdapter;
------------------------------------
Lcom/android/mail/ui/FolderListFragment$FolderListAdapter;
------------------------------------
Lcom/android/mail/ui/FolderListFragment$HierarchicalFolderListAdapter;
------------------------------------
Lcom/android/mail/ui/LimitedMultiSelectDialogFragment$LimitedMultiSelectAdapter;
------------------------------------
Lcom/android/mail/ui/FolderSelectionActivity;
------------------------------------
Lcom/android/mail/compose/ComposeActivity;
------------------------------------
Lcom/android/mail/compose/AutoSendActivity;
------------------------------------
Lcom/android/mail/ui/MailActivity;
------------------------------------
Lcom/android/mail/browse/ConversationViewAdapter;
Done writing file.
------------------------------------
